{"version":3,"sources":["nexus.js","tower.js","walkableTile.js","removeTile.js","data.js","tilemaker.js","addTile.js","motor.js","keyboard.js","toolbag.js","main.js","Input.js","EditorPlane.js"],"names":["define","grid","board","mouse","scene","input","plane","tileAction","vg","Signal","objAction","userAction","save","TILE_CHANGE_HEIGHT","TILE_ADD","TILE_REMOVE","TILE_CHANGE_WALKABLE","over","cell","tile","mesh","nexus","down","walkableTile","up","walkable","tower","dispatch","require","onOver","onDown","onUp","action","removeTile","_store","changed","get","key","this","set","val","window","localStorage","JSON","stringify","load","json","data","parse","err","console","warn","init","materials","push","THREE","MeshPhongMaterial","color","resetHeightStep","newHeightStep","getTile","matid","mat","material","t","tilePool","pop","position","copy","cellToPixel","y","h","tileHeightStep","Tile","geometry","geoGen","tileGeo","addTile","dataChanged","oldData","newData","settings","add","getTileAtCell","newCell","Cell","Math","abs","wheel","newTile","tilemaker","on","_brake","requestAnimationFrame","_update","addEventListener","onFocus","onBlur","off","removeEventListener","cb","scope","k","_hashStr","toString","_has","_steps","func","remove","i","splice","length","o","call","n","evt","str","chr","len","hash","charCodeAt","keyCode","shift","ctrl","signal","eventType","DOWN","UP","document","code","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","ZERO","ONE","TWO","FOUR","FIVE","SIX","SEVEN","EIGHT","NINE","NUMPAD_0","NUMPAD_1","NUMPAD_2","NUMPAD_3","NUMPAD_4","NUMPAD_5","NUMPAD_6","NUMPAD_7","NUMPAD_8","NUMPAD_9","NUMPAD_MULTIPLY","NUMPAD_ADD","NUMPAD_ENTER","NUMPAD_SUBTRACT","NUMPAD_DECIMAL","NUMPAD_DIVIDE","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","F13","F14","F15","COLON","EQUALS","UNDERSCORE","QUESTION_MARK","TILDE","OPEN_BRACKET","BACKWARD_SLASH","CLOSED_BRACKET","QUOTES","BACKSPACE","TAB","CLEAR","ENTER","SHIFT","CTRL","ALT","CAPS_LOCK","ESC","SPACEBAR","PAGE_UP","PAGE_DOWN","END","HOME","LEFT","RIGHT","INSERT","DELETE","HELP","NUM_LOCK","update","currentGridCell","pixelToCell","editorWorldPos","keyboard","ui","activeTool","name","allHits","equals","prevGridCell","toolChange","Tools","ADD_TILE","tool","REMOVE_TILE","WALK_TILE","onUserAction","type","overTile","rightDown","heightStep","MouseCaster","WHEEL","dif","lastHeight","round","OVER","OUT","motor","Vector3","Events","TOOL_CHANGE","wheelTimer","active","dirtyMap","saveTimer","map","log","render","onControlWheel","onMapChange","timeTilAutoSave","toJSON","loadMap","fromJSON","setGrid","generate","tileset","makeTiles","updatePlane","planeColor","planeSize","saveMap","output","replace","exportString","filename","blob","Blob","objectURL","URL","createObjectURL","link","href","download","target","createEvent","initMouseEvent","dispatchEvent","Input","EditorPlane","fileInput","createElement","file","files","reader","FileReader","onload","e","result","readAsText","SAVE_MAP","LOAD_MAP","click","canvas","getElementById","Scene","element","cameraPosition","x","z","maxPolarAngle","PI","controls","HexGrid","Board","group","camera","focusOn","trigger","UPDATE_SETTINGS","size","mapSize","cellSize","updateCellSize","style","display","body","appendChild","onMouse","mouseDelta","mousePanMinDistance","_travel","prototype","hit","point","dx","screenPosition","dy","sqrt","enabled","obj","CLICK","tileHoverMesh","visible","planeMaterial","MeshBasicMaterial","side","DoubleSide","hoverMaterial","hoverMesh","_actualSize","SQRT3","_cellWidth","newColor","parseInt","setHex","HEX","SQR","parent","dispose","makeOverlay","CircleGeometry","PlaneGeometry","Mesh","rotation","DEG_TO_RAD","makeTilePoly","container","makeTileHighlight","pickedObject"],"mappings":"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","file":"app.js","sourcesContent":["define('nexus', {\n\tgrid: null,\n\tboard: null,\n\tmouse: null,\n\tscene: null,\n\tinput: null,\n\tplane: null,\n});\n","define('tower', {\n\ttileAction: new vg.Signal(),\n\tobjAction: new vg.Signal(),\n\tuserAction: new vg.Signal(),\n\n\tsave: new vg.Signal(),\n\n\tTILE_CHANGE_HEIGHT: 'cell.change.height',\n\tTILE_ADD: 'cell.add',\n\tTILE_REMOVE: 'cell.remove',\n\tTILE_CHANGE_WALKABLE: 'cell.change.walkable',\n});\n","define('walkableTile', function() {\n\tvar tower = require('tower');\n\tvar nexus = require('nexus');\n\n\t/*var material = new THREE.MeshBasicMaterial({\n\t\ttexture:\n\t});\n\tvar verts = this.vertices.slice(0);\n\tverts.push(verts[0].clone());\n\tvar curve = new THREE.CatmullRomCurve3(verts);\n\tvar geo = new THREE.TubeGeometry(curve, 6, 1, 2, true);\n\tvar mesh = new THREE.Mesh(geo, material);\n\tmesh.scale.x = 0.9;\n\tmesh.scale.z = 0.9;*/\n\n\tfunction over(cell, tile, mesh) {\n\t\tif (tile && nexus.mouse.down) {\n\t\t\twalkableTile(tile);\n\t\t}\n\t}\n\n\tfunction down(cell, tile, mesh) {\n\t\tif (tile) {\n\t\t\twalkableTile(tile);\n\t\t}\n\t}\n\n\tfunction up(cell, tile, mesh) {\n\n\t}\n\n\tfunction walkableTile(tile) {\n\t\tif (!tile) return;\n\n\t\ttile.cell.walkable = !tile.cell.walkable;\n\n\t\ttower.tileAction.dispatch(tower.TILE_CHANGE_WALKABLE, tile);\n\n\t\treturn tile;\n\t}\n\n\treturn {\n\t\tonOver: over,\n\t\tonDown: down,\n\t\tonUp: up,\n\t\taction: walkableTile\n\t};\n});\n","define('removeTile', function() {\n\tvar tower = require('tower');\n\tvar nexus = require('nexus');\n\t// var keyboard = require('keyboard');\n\t// var motor = require('motor');\n\n\t// var disabled = false;\n\n\tfunction over(cell, tile, mesh) {\n\t\tif (tile && nexus.mouse.down) {\n\t\t\tremoveTile(tile);\n\t\t}\n\t}\n\n\tfunction down(cell, tile, mesh) {\n\t\tif (tile) {\n\t\t\tremoveTile(tile);\n\t\t}\n\t}\n\n\tfunction up(cell, tile, mesh) {\n\n\t}\n\n\tfunction removeTile(tile) {\n\t\tnexus.board.removeTile(tile);\n\t\ttower.tileAction.dispatch(tower.TILE_REMOVE, tile);\n\t}\n\n\treturn {\n\t\tonOver: over,\n\t\tonDown: down,\n\t\tonUp: up,\n\t\taction: removeTile\n\t};\n});\n","/*\n\tHandles JSON for whatever data needs to be saved to localStorage, and provides a convenient signal for whenever that data changes.\n*/\ndefine('data', {\n\t_store: {},\n\tchanged: new vg.Signal(),\n\n\tget: function(key) {\n\t\treturn this._store[key] || null;\n\t},\n\n\tset: function(key, val) {\n\t\t// fire event first so we can retrieve old data before it's overwritten (just in case)\n\t\tthis.changed.dispatch(key, this._store[key], val);\n\t\tthis._store[key] = val;\n\t},\n\n\tsave: function() {\n\t\twindow.localStorage['vongrid'] = JSON.stringify(this._store);\n\t},\n\n\tload: function(json) {\n\t\tvar data = window.localStorage['vongrid'];\n\t\tif (json || data) {\n\t\t\ttry {\n\t\t\t\tthis._store = json || JSON.parse(data);\n\t\t\t\tthis.changed.dispatch('load-success', this._store);\n\t\t\t}\n\t\t\tcatch (err) {\n\t\t\t\tconsole.warn(err);\n\t\t\t\tthis.changed.dispatch('load-failure');\n\t\t\t}\n\t\t}\n\t}\n});\n","/*\n\tCreates and manages a default tileset.\n*/\ndefine('tilemaker', function() {\n\tvar nexus = require('nexus');\n\tvar data = require('data');\n\n\tvar materials = [];\n\tvar tilePool = []; // unused tiles for recycling\n\n\tfunction init() {\n\t\t// geo = new THREE.ExtrudeGeometry(nexus.grid.cellShape, extrudeSettings);\n\t\t// create a default tileset with these materials\n\t\tmaterials.push(new THREE.MeshPhongMaterial({\n\t\t\tcolor: 'rgb(0, 0, 0)'\n\t\t}));\n\t\tmaterials.push(new THREE.MeshPhongMaterial({\n\t\t\tcolor: 'rgb(10, 64, 16)'\n\t\t}));\n\t\tmaterials.push(new THREE.MeshPhongMaterial({\n\t\t\tcolor: 'rgb(64, 51, 10)'\n\t\t}));\n\t\tmaterials.push(new THREE.MeshPhongMaterial({\n\t\t\tcolor: 'rgb(200, 200, 200)'\n\t\t}));\n\n\t\t// create all the tiles and meshes for the grid\n\t\t/*var cells = nexus.grid.cells;\n\t\tvar i, t;\n\t\tfor (i in cells) {\n\t\t\tt = cells[i];\n\t\t\t// t = getTile(0);\n\t\t\t// t.position.copy(nexus.grid.cellToPixel(c));\n\t\t\t// t.position.y = 0;\n\t\t\ttiles.push(t);\n\t\t}*/\n\t}\n\n\t// make sure all tiles are under new height, or rebuild geo if height is taller\n\tfunction resetHeightStep(newHeightStep) {\n\t\t// var i, t;\n\t\t// var step = newHeightStep || nexus.board.tileHeightStep;\n\t\t/*for (i = 0; t = nexus.board.tiles[i]; i++) { // board is undefined on map load!\n\t\t\tt.position.y = t.cell.h * step;\n\t\t}*/\n\t}\n\n\tfunction getTile(cell, matid) { // eslint-disable-line no-unused-vars\n\t\tvar mat = materials[matid];\n\t\tif (cell.tile) {\n\t\t\t// don't rebuild, just update\n\t\t\tcell.tile.material = mat;\n\t\t\tcell.tile.mesh.material = mat;\n\t\t\treturn cell.tile;\n\t\t}\n\t\tvar t = tilePool.pop();\n\t\tif (t) {\n\t\t\tt.material = mat;\n\t\t\tt.mesh.material = mat;\n\t\t\tt.cell = cell;\n\t\t\tcell.tile = t;\n\t\t\tt.position.copy(nexus.grid.cellToPixel(cell));\n\t\t\tt.position.y = t.cell.h * nexus.board.tileHeightStep;\n\t\t}\n\t\telse {\n\t\t\tt = new vg.Tile({\n\t\t\t\tcell: cell,\n\t\t\t\tgeometry: nexus.board.geoGen.tileGeo,\n\t\t\t\tmaterial: materials[matid]\n\t\t\t});\n\t\t}\n\n\t\tnexus.board.addTile(t);\n\n\t\treturn t;\n\t}\n\n\t/*function recycleTile(tile) {\n\t\tif (tile.mesh.parent) tile.mesh.parent.remove(tile.mesh);\n\t\ttilePool.push(tile);\n\t}*/\n\n\tfunction dataChanged(key, oldData, newData) {\n\t\tvar newHeightStep;\n\n\t\tif (key === 'settings') {\n\t\t\tnewHeightStep = newData.tileHeightStep;\n\t\t}\n\t\telse if (key === 'load-success') {\n\t\t\tnewHeightStep = oldData.settings.tileHeightStep;\n\t\t}\n\n\t\tif (newHeightStep) resetHeightStep(newHeightStep);\n\t}\n\n\tdata.changed.add(dataChanged, this);\n\n\treturn {\n\t\tinit: init,\n\t\tgetTile: getTile\n\t};\n});\n","define('addTile', function() {\n\tvar tower = require('tower');\n\tvar nexus = require('nexus');\n\tvar tilemaker = require('tilemaker');\n\n\tfunction over(cell, tile, mesh) {\n\t\tif (!tile && nexus.mouse.down) {\n\t\t\taddTile(cell);\n\t\t}\n\t}\n\n\tfunction down(cell, tile, mesh) {\n\t\tif (!tile) {\n\t\t\taddTile(cell);\n\t\t}\n\t}\n\n\tfunction up(cell, tile, mesh) {\n\n\t}\n\n\tfunction addTile(cell) {\n\t\tif (!cell || nexus.board.getTileAtCell(cell)) return;\n\n\t\tvar newCell = new vg.Cell();\n\t\tnewCell.copy(cell);\n\t\tnewCell.h = Math.abs(nexus.mouse.wheel * nexus.board.tileHeightStep);\n\n\t\tvar newTile = tilemaker.getTile(newCell, 1);\n\n\t\tnexus.board.addTile(newTile);\n\n\t\ttower.tileAction.dispatch(tower.TILE_ADD, newTile);\n\n\t\treturn newTile;\n\t}\n\n\treturn {\n\t\tonOver: over,\n\t\tonDown: down,\n\t\tonUp: up,\n\t\taction: addTile\n\t};\n});\n","/*\n\tThis is the ONLY place in the app that has a requestAnimationFrame handler.\n\tAll modules attach their functions to this module if they want in on the RAF.\n */\ndefine('motor', function() {\n\tvar _brake = false;\n\tvar _steps = [];\n\n\tfunction on() {\n\t\t_brake = false;\n\t\twindow.requestAnimationFrame(_update);\n\t\twindow.addEventListener('focus', onFocus, false);\n\t\twindow.addEventListener('blur', onBlur, false);\n\t}\n\n\tfunction off() {\n\t\t_brake = true;\n\t\twindow.removeEventListener('focus', onFocus, false);\n\t\twindow.removeEventListener('blur', onBlur, false);\n\t}\n\n\t// in order to be able to ID functions we have to hash them to generate unique-ish keys for us to find them with later\n\t// if we don't do this, we won't be able to remove callbacks that were bound and save us from binding callbacks multiple times all over the place\n\tfunction add(cb, scope) {\n\t\tvar k = _hashStr(cb.toString());\n\t\tvar h = _has(k);\n\t\tif (h === -1) {\n\t\t\t_steps.push({\n\t\t\t\tfunc: cb,\n\t\t\t\tscope: scope,\n\t\t\t\tkey: k\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction remove(cb) {\n\t\tvar k = _hashStr(cb.toString());\n\t\tvar i = _has(k);\n\t\tif (i !== -1) {\n\t\t\t_steps.splice(i, 1);\n\t\t}\n\t}\n\n\tfunction _update() {\n\t\tif (_brake) return;\n\t\twindow.requestAnimationFrame(_update);\n\n\t\tfor (var i = 0; i < _steps.length; i++) {\n\t\t\tvar o = _steps[i];\n\t\t\to.func.call(o.scope || null);\n\t\t}\n\t}\n\n\t// check if the handler already has iaw.motor particular callback\n\tfunction _has(k) {\n\t\tvar n = -1;\n\t\tvar i;\n\t\tfor (i = 0; i < _steps.length; i++) {\n\t\t\tn = _steps[i].key;\n\t\t\tif (n === k) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\tfunction onFocus(evt) {\n\t\t_brake = false;\n\t\t_update();\n\t}\n\n\tfunction onBlur(evt) {\n\t\t_brake = true;\n\t}\n\n\tfunction _hashStr(str) {\n\t\tvar hash = 0, i, chr, len;\n\t\tif (str.length === 0) return hash;\n\t\tfor (i = 0, len = str.length; i < len; i++) {\n\t\t\tchr = str.charCodeAt(i);\n\t\t\thash = ((hash << 5) - hash) + chr;\n\t\t\thash |= 0;\n\t\t}\n\t\treturn hash;\n\t}\n\n\treturn {\n\t\ton: on,\n\t\toff: off,\n\t\tadd: add,\n\t\tremove: remove,\n\t};\n});\n","define('keyboard', function() {\n\n\tfunction onDown(evt) {\n\t\tswitch (evt.keyCode) {\n\t\t\tcase 16:\n\t\t\t\tk.shift = true;\n\t\t\t\tbreak;\n\t\t\tcase 17:\n\t\t\t\tk.ctrl = true;\n\t\t\t\tbreak;\n\t\t}\n\t\tk.signal.dispatch(k.eventType.DOWN, evt.keyCode);\n\t}\n\n\tfunction onUp(evt) {\n\t\tswitch (evt.keyCode) {\n\t\t\tcase 16:\n\t\t\t\tk.shift = false;\n\t\t\t\tbreak;\n\t\t\tcase 17:\n\t\t\t\tk.ctrl = false;\n\t\t\t\tbreak;\n\t\t}\n\t\tk.signal.dispatch(k.eventType.UP, evt.keyCode);\n\t}\n\n\tvar k = {\n\t\tshift: false,\n\t\tctrl: false,\n\n\t\teventType: {\n\t\t\tDOWN: 'down',\n\t\t\tUP: 'up'\n\t\t},\n\n\t\tsignal: new vg.Signal(),\n\n\t\ton: function() {\n\t\t\tdocument.addEventListener('keydown', onDown, false);\n\t\t\tdocument.addEventListener('keyup', onUp, false);\n\t\t},\n\n\t\toff: function() {\n\t\t\tdocument.removeEventListener('keydown', onDown);\n\t\t\tdocument.removeEventListener('keyup', onUp);\n\t\t},\n\n\t\tcode: {\n\t\t\tA: 'A'.charCodeAt(0),\n\t\t\tB: 'B'.charCodeAt(0),\n\t\t\tC: 'C'.charCodeAt(0),\n\t\t\tD: 'D'.charCodeAt(0),\n\t\t\tE: 'E'.charCodeAt(0),\n\t\t\tF: 'F'.charCodeAt(0),\n\t\t\tG: 'G'.charCodeAt(0),\n\t\t\tH: 'H'.charCodeAt(0),\n\t\t\tI: 'I'.charCodeAt(0),\n\t\t\tJ: 'J'.charCodeAt(0),\n\t\t\tK: 'K'.charCodeAt(0),\n\t\t\tL: 'L'.charCodeAt(0),\n\t\t\tM: 'M'.charCodeAt(0),\n\t\t\tN: 'N'.charCodeAt(0),\n\t\t\tO: 'O'.charCodeAt(0),\n\t\t\tP: 'P'.charCodeAt(0),\n\t\t\tQ: 'Q'.charCodeAt(0),\n\t\t\tR: 'R'.charCodeAt(0),\n\t\t\tS: 'S'.charCodeAt(0),\n\t\t\tT: 'T'.charCodeAt(0),\n\t\t\tU: 'U'.charCodeAt(0),\n\t\t\tV: 'V'.charCodeAt(0),\n\t\t\tW: 'W'.charCodeAt(0),\n\t\t\tX: 'X'.charCodeAt(0),\n\t\t\tY: 'Y'.charCodeAt(0),\n\t\t\tZ: 'Z'.charCodeAt(0),\n\t\t\tZERO: '0'.charCodeAt(0),\n\t\t\tONE: '1'.charCodeAt(0),\n\t\t\tTWO: '2'.charCodeAt(0),\n\t\t\tTHREE: '3'.charCodeAt(0),\n\t\t\tFOUR: '4'.charCodeAt(0),\n\t\t\tFIVE: '5'.charCodeAt(0),\n\t\t\tSIX: '6'.charCodeAt(0),\n\t\t\tSEVEN: '7'.charCodeAt(0),\n\t\t\tEIGHT: '8'.charCodeAt(0),\n\t\t\tNINE: '9'.charCodeAt(0),\n\t\t\tNUMPAD_0: 96,\n\t\t\tNUMPAD_1: 97,\n\t\t\tNUMPAD_2: 98,\n\t\t\tNUMPAD_3: 99,\n\t\t\tNUMPAD_4: 100,\n\t\t\tNUMPAD_5: 101,\n\t\t\tNUMPAD_6: 102,\n\t\t\tNUMPAD_7: 103,\n\t\t\tNUMPAD_8: 104,\n\t\t\tNUMPAD_9: 105,\n\t\t\tNUMPAD_MULTIPLY: 106,\n\t\t\tNUMPAD_ADD: 107,\n\t\t\tNUMPAD_ENTER: 108,\n\t\t\tNUMPAD_SUBTRACT: 109,\n\t\t\tNUMPAD_DECIMAL: 110,\n\t\t\tNUMPAD_DIVIDE: 111,\n\t\t\tF1: 112,\n\t\t\tF2: 113,\n\t\t\tF3: 114,\n\t\t\tF4: 115,\n\t\t\tF5: 116,\n\t\t\tF6: 117,\n\t\t\tF7: 118,\n\t\t\tF8: 119,\n\t\t\tF9: 120,\n\t\t\tF10: 121,\n\t\t\tF11: 122,\n\t\t\tF12: 123,\n\t\t\tF13: 124,\n\t\t\tF14: 125,\n\t\t\tF15: 126,\n\t\t\tCOLON: 186,\n\t\t\tEQUALS: 187,\n\t\t\tUNDERSCORE: 189,\n\t\t\tQUESTION_MARK: 191,\n\t\t\tTILDE: 192,\n\t\t\tOPEN_BRACKET: 219,\n\t\t\tBACKWARD_SLASH: 220,\n\t\t\tCLOSED_BRACKET: 221,\n\t\t\tQUOTES: 222,\n\t\t\tBACKSPACE: 8,\n\t\t\tTAB: 9,\n\t\t\tCLEAR: 12,\n\t\t\tENTER: 13,\n\t\t\tSHIFT: 16,\n\t\t\tCTRL: 17,\n\t\t\tALT: 18,\n\t\t\tCAPS_LOCK: 20,\n\t\t\tESC: 27,\n\t\t\tSPACEBAR: 32,\n\t\t\tPAGE_UP: 33,\n\t\t\tPAGE_DOWN: 34,\n\t\t\tEND: 35,\n\t\t\tHOME: 36,\n\t\t\tLEFT: 37,\n\t\t\tUP: 38,\n\t\t\tRIGHT: 39,\n\t\t\tDOWN: 40,\n\t\t\tINSERT: 45,\n\t\t\tDELETE: 46,\n\t\t\tHELP: 47,\n\t\t\tNUM_LOCK: 144\n\t\t}\n\t};\n\n\treturn k;\n});\n","/*\n\tManages cells and objects on the map.\n*/\ndefine('toolbag', function() {\n\tvar tower = require('tower');\n\tvar nexus = require('nexus');\n\tvar keyboard = require('keyboard');\n\tvar motor = require('motor');\n\n\tvar addTile = require('addTile');\n\tvar removeTile = require('removeTile');\n\tvar walkableTile = require('walkableTile');\n\n\tvar tool = addTile; // should be the first tool in the bag as determined by tool-menu.tag\n\n\tvar lastHeight = 1;\n\tvar currentGridCell = null;\n\tvar prevGridCell = new THREE.Vector3();\n\t// var _cel = new vg.Cell();\n\n\ttower.userAction.add(onUserAction, this);\n\tui.on(ui.Events.TOOL_CHANGE, toolChange);\n\n\tmotor.add(update);\n\n\tfunction update() {\n\t\tcurrentGridCell = nexus.grid.pixelToCell(nexus.input.editorWorldPos);\n\t\tif (!keyboard.ctrl && nexus.mouse.down && ui.activeTool.name === 'ADD_TILE' && nexus.mouse.allHits && nexus.mouse.allHits.length) {\n\t\t\t// special case since the over event doesn't fire if there's no tile\n\t\t\tif (!currentGridCell.equals(prevGridCell)) {\n\t\t\t\taddTile.action(currentGridCell, null);\n\t\t\t}\n\t\t\tprevGridCell.copy(currentGridCell);\n\t\t}\n\t}\n\n\tfunction toolChange(evt) {\n\t\tswitch (evt) {\n\t\t\tcase ui.Tools.ADD_TILE:\n\t\t\t\ttool = addTile;\n\t\t\t\tbreak;\n\t\t\tcase ui.Tools.REMOVE_TILE:\n\t\t\t\ttool = removeTile;\n\t\t\t\tbreak;\n\t\t\tcase ui.Tools.WALK_TILE:\n\t\t\t\ttool = walkableTile;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\ttool = null;\n\t\t\t\tbreak;\n\t\t}\n\t\t// console.log('Tool selected: '+evt);\n\t}\n\n\tfunction onUserAction(type, overTile, data) {\n\t\tif (keyboard.ctrl || data === null || nexus.mouse.rightDown || !tool) {\n\t\t\t// there's no picked object, which means the user isn't hovering over any mesh in the scene\n\t\t\t// also ignore right-mouse clicks\n\t\t\treturn;\n\t\t}\n\t\tvar heightStep = nexus.board.tileHeightStep;\n\n\t\tswitch (type) {\n\t\t\tcase vg.MouseCaster.WHEEL:\n\t\t\t\tif (overTile) {\n\t\t\t\t\tvar dif = lastHeight - data;\n\t\t\t\t\toverTile.cell.h += dif > 0 ? -1 : +1;\n\t\t\t\t\tif (overTile.cell.h < 1) overTile.cell.h = 1;\n\n\t\t\t\t\tnexus.mouse.wheel = Math.round((overTile.cell.h / heightStep) + (dif > 0 ? -1 : 1));\n\t\t\t\t\tlastHeight = nexus.mouse.wheel;\n\n\t\t\t\t\toverTile.position.y = overTile.cell.h * heightStep;\n\n\t\t\t\t\ttower.tileAction.dispatch(tower.TILE_CHANGE_HEIGHT, overTile);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase vg.MouseCaster.OVER:\n\t\t\t\ttool.onOver(currentGridCell, overTile, data);\n\t\t\t\tbreak;\n\n\t\t\tcase vg.MouseCaster.OUT:\n\n\t\t\t\tbreak;\n\n\t\t\tcase vg.MouseCaster.DOWN:\n\t\t\t\ttool.onDown(currentGridCell, overTile, data);\n\t\t\t\tbreak;\n\n\t\t\tcase vg.MouseCaster.UP:\n\t\t\t\ttool.onUp(currentGridCell, overTile, data);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn {\n\n\t};\n});\n","window.addEventListener('load', function(evt) {\n\tvar data = require('data');\n\tvar tower = require('tower');\n\tvar nexus = require('nexus');\n\tvar keyboard = require('keyboard');\n\tvar motor = require('motor');\n\n\tvar Input = require('Input');\n\tvar EditorPlane = require('EditorPlane');\n\n\tdata.load();\n\tvar map = data.get('map');\n\n\tvar timeTilAutoSave = 200; // timer runs per frame, 60fps\n\tvar saveTimer = 10;\n\tvar dirtyMap = false;\n\n\tvar fileInput = document.createElement('input');\n\tfileInput.type = 'file';\n\tfileInput.addEventListener('change', function(evt) {\n\t\tvar file = fileInput.files[0];\n\t\tif (!file) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar reader = new FileReader();\n\t\treader.onload = function(e) {\n\t\t\tvar json = null;\n\t\t\ttry {\n\t\t\t\tjson = JSON.parse(e.target.result);\n\t\t\t}\n\t\t\tcatch (err) {\n\t\t\t\tconsole.warn('File is not json format');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tloadMap(json);\n\t\t};\n\n\t\treader.readAsText(file);\n\n\t\treturn false;\n\t});\n\n\tui.on('error', function(evt) {\n\t\tconsole.warn(evt);\n\t});\n\n\tui.on(ui.Events.SAVE_MAP, function() {\n\t\tsaveMap();\n\t});\n\n\tui.on(ui.Events.LOAD_MAP, function() {\n\t\tfileInput.click();\n\t});\n\n\tkeyboard.on();\n\tmotor.on();\n\n\t// setup the thing\n\tvar canvas = document.getElementById('view');\n\tvar scene = new vg.Scene({\n\t\telement: canvas,\n\t\tcameraPosition: {x: 0, y: 300, z: 120},\n\t\t// light: new THREE.AmbientLight(0x000000)\n\t}, {\n\t\tmaxPolarAngle: (Math.PI / 2) - 0.01\n\t});\n\tnexus.scene = scene;\n\n\t// listen to the orbit controls to disable the raycaster while user adjusts the view\n\tscene.controls.addEventListener('wheel', onControlWheel);\n\n\tvar grid = new vg.HexGrid();\n\tnexus.grid = grid;\n\tvar board = new vg.Board(grid);\n\tnexus.board = board;\n\tvar mouse = new vg.MouseCaster(board.group, scene.camera, canvas);\n\tnexus.mouse = mouse;\n\n\tvar input = new Input(board.group, mouse);\n\tnexus.input = input;\n\tvar plane = new EditorPlane(board.group, grid, mouse);\n\tnexus.plane = plane;\n\n\trequire('tilemaker').init();\n\n\ttower.tileAction.add(onMapChange, this);\n\ttower.save.add(onMapChange, this);\n\n\tfunction dataChanged(key, oldData, newData) {\n\t\tif (key === 'settings') {\n\t\t\tboard.tileHeightStep = newData.tileHeightStep;\n\t\t}\n\t\tif (key === 'load-success') {\n\t\t\tboard.tileHeightStep = oldData.settings.tileHeightStep;\n\t\t}\n\t}\n\tdata.changed.add(dataChanged);\n\n\tscene.focusOn(board.group);\n\n\tif (map) {\n\t\tui.trigger(ui.Events.UPDATE_SETTINGS, data.get('settings'));\n\t\tloadMap(map);\n\t}\n\telse {\n\t\tgrid.generate({\n\t\t\tsize: 5\n\t\t});\n\t\tboard.makeTiles(30);\n\n\t\tmap = grid.toJSON();\n\t\tdata.set('map', map);\n\n\t\tvar settings = {\n\t\t\tmapSize: grid.size,\n\t\t\tcellSize: grid.cellSize,\n\t\t\tplaneSize: plane.planeSize,\n\t\t\ttileHeightStep: 3,\n\t\t\tplaneColor: '#ffffff',\n\t\t\ttileset: 'default'\n\t\t};\n\t\tdata.set('settings', settings);\n\n\t\tconsole.log('Created a new map');\n\t\tdata.save();\n\n\t\tplane.generate();\n\t}\n\n\t// reflect new values in the UI\n\tui.trigger(ui.Events.UPDATE_SETTINGS, data.get('settings'));\n\n\tscene.add(board.group);\n\n\tui.on(ui.Events.UPDATE_SETTINGS, function(settings) {\n\t\t// console.log('current grid size: '+grid.size+', new: '+settings.mapSize);\n\t\t// console.log('current cell size: '+grid.cellSize+', new: '+settings.cellSize);\n\t\tplane.updatePlane(settings.planeColor, settings.planeSize);\n\n\t\tdata.set('settings', settings);\n\t\tonMapChange();\n\n\t\tif (settings.mapSize === grid.size) {\n\t\t\tif (settings.cellSize === grid.cellSize) {\n\t\t\t\t// console.log('neither changed, ignored');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// console.log('only cell size changed');\n\t\t\tgrid.updateCellSize(settings.cellSize);\n\t\t}\n\t\telse {\n\t\t\t// only map size or both changed\n\t\t\tgrid.updateCellSize(settings.cellSize);\n\t\t\t// if map size changed, we have to rebuild the map from scratch\n\t\t\tgrid.generate({\n\t\t\t\tsize: settings.mapSize\n\t\t\t});\n\t\t}\n\n\t\tplane.generate();\n\n\t\tif (settings.tileset === 'default') {\n\t\t\tboard.makeTiles(30);\n\t\t}\n\t});\n\n\tfunction update() {\n\t\tif (wheelTimer < 10) {\n\t\t\twheelTimer++;\n\t\t\tif (wheelTimer === 10) {\n\t\t\t\tmouse.active = true;\n\t\t\t}\n\t\t}\n\t\tif (dirtyMap) {\n\t\t\tsaveTimer--;\n\t\t\tif (saveTimer === 0) {\n\t\t\t\tdirtyMap = false;\n\t\t\t\tdata.set('map', map);\n\t\t\t\tdata.save();\n\t\t\t\tconsole.log('Map saved');\n\t\t\t}\n\t\t}\n\t\tmouse.update();\n\t\tinput.update();\n\t\tplane.update();\n\t\tscene.render();\n\t}\n\tmotor.add(update);\n\n\tvar wheelTimer = 10;\n\tfunction onControlWheel() {\n\t\tmouse.active = false;\n\t\twheelTimer = 0;\n\t}\n\n\tfunction onMapChange() {\n\t\tdirtyMap = true;\n\t\tsaveTimer = timeTilAutoSave;\n\t\tmap = grid.toJSON();\n\t}\n\n\tfunction loadMap(json) {\n\t\tgrid.fromJSON(json);\n\t\tboard.setGrid(grid);\n\n\t\tplane.generate();\n\n\t\tvar settings = data.get('settings');\n\n\t\tif (settings.tileset === 'default') {\n\t\t\tboard.makeTiles(30);\n\t\t}\n\n\t\tplane.updatePlane(settings.planeColor, settings.planeSize);\n\n\t\tconsole.log('Map load complete');\n\t}\n\n\tfunction saveMap() {\n\t\tvar output = null;\n\n\t\tmap = grid.toJSON();\n\n\t\ttry {\n\t\t\toutput = JSON.stringify(map, null, '\\t');\n\t\t\toutput = output.replace(/[\\n\\t]+([\\d\\.e\\-\\[\\]]+)/g, '$1');\n\t\t}\n\t\tcatch (err) {\n\t\t\toutput = JSON.stringify(map);\n\t\t}\n\n\t\texportString(output, 'hex-map.json');\n\t}\n\n\t// taken from https://github.com/mrdoob/three.js/blob/master/editor/js/Menubar.File.js\n\tvar link = document.createElement('a');\n\tlink.style.display = 'none';\n\tdocument.body.appendChild(link);\n\n\tfunction exportString(output, filename) {\n\t\tvar blob = new Blob([output], {type: 'text/plain'});\n\t\tvar objectURL = URL.createObjectURL(blob);\n\n\t\tlink.href = objectURL;\n\t\tlink.download = filename || 'data.json';\n\t\tlink.target = '_blank';\n\n\t\tvar evt = document.createEvent('MouseEvents');\n\t\tevt.initMouseEvent(\n\t\t\t'click', true, false, window, 0, 0, 0, 0, 0,\n\t\t\tfalse, false, false, false, 0, null\n\t\t);\n\t\tlink.dispatchEvent(evt);\n\t}\n});\n","/*\n\tTranslates the MouseCaster's events into more relevant data that the editor uses.\n*/\ndefine('Input', function() {\n\tvar tower = require('tower');\n\tvar nexus = require('nexus');\n\tvar keyboard = require('keyboard');\n\n\tvar Input = function(scene, mouse) {\n\t\tthis.mouse = mouse;\n\t\tthis.mouse.signal.add(this.onMouse, this);\n\n\t\tthis.mouseDelta = new THREE.Vector3();\n\t\tthis.mousePanMinDistance = 0.1;\n\t\tthis.editorWorldPos = new THREE.Vector3(); // current grid position of mouse\n\n\t\tthis.overTile = null;\n\n\t\tthis._travel = 0;\n\n\t\t/*keyboard.signal.add(function(type, code) {\n\t\t\tif (type === keyboard.eventType.DOWN) {\n\t\t\t\tif (code === keyboard.code.SHIFT) nexus.scene.controls.enabled = false;\n\t\t\t\telse if (code === keyboard.code.A) {\n\t\t\t\t\tnexus.scene.focusOn(nexus.board.tileGroup); // doesn't work??\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (code === keyboard.code.SHIFT) nexus.scene.controls.enabled = true;\n\t\t\t}\n\t\t}, this);*/\n\t};\n\n\tInput.prototype = {\n\t\tupdate: function() {\n\t\t\tvar hit = this.mouse.allHits[0];\n\t\t\tif (hit) { // fun fact, 3 references are faster than 1 function call\n\t\t\t\tthis.editorWorldPos.x = hit.point.x;\n\t\t\t\tthis.editorWorldPos.y = hit.point.y;\n\t\t\t\tthis.editorWorldPos.z = hit.point.z;\n\t\t\t}\n\t\t\tvar dx = this.mouseDelta.x - this.mouse.screenPosition.x;\n\t\t\tvar dy = this.mouseDelta.y - this.mouse.screenPosition.y;\n\t\t\tthis._travel += Math.sqrt(dx * dx + dy * dy); // fun fact, sqrt is on of the most expensive math ops\n\n\t\t\tif (keyboard.ctrl) {\n\t\t\t\tnexus.scene.controls.enabled = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnexus.scene.controls.enabled = false;\n\t\t\t}\n\t\t},\n\n\t\tonMouse: function(type, obj) {\n\t\t\tvar hit;\n\t\t\tif (this.mouse.allHits && this.mouse.allHits[0]) {\n\t\t\t\thit = this.mouse.allHits[0];\n\t\t\t}\n\t\t\tswitch (type) {\n\t\t\t\tcase vg.MouseCaster.WHEEL:\n\t\t\t\t\ttower.userAction.dispatch(vg.MouseCaster.WHEEL, this.overTile, obj);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase vg.MouseCaster.OVER:\n\t\t\t\t\tif (obj) {\n\t\t\t\t\t\tthis.overTile = obj;\n\t\t\t\t\t}\n\t\t\t\t\ttower.userAction.dispatch(vg.MouseCaster.OVER, this.overTile, hit);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase vg.MouseCaster.OUT:\n\t\t\t\t\tthis.overTile = null;\n\t\t\t\t\ttower.userAction.dispatch(vg.MouseCaster.OUT, this.overTile, hit);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase vg.MouseCaster.DOWN:\n\t\t\t\t\tthis.mouseDelta.copy(this.mouse.screenPosition);\n\t\t\t\t\ttower.userAction.dispatch(vg.MouseCaster.DOWN, this.overTile, hit);\n\t\t\t\t\tthis._travel = 0;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase vg.MouseCaster.UP:\n\t\t\t\t\tif (this._travel > this.mousePanMinDistance) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\ttower.userAction.dispatch(vg.MouseCaster.UP, this.overTile, hit);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase vg.MouseCaster.CLICK:\n\t\t\t\t\ttower.userAction.dispatch(vg.MouseCaster.CLICK, this.overTile, hit);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t};\n\n\treturn Input;\n});\n","/*\n\t2D plane that the user moves mouse around on in order to build maps. Provides a working plane to navigate, and a visual aid for tile placement.\n\n\t@author Corey Birnbaum https://github.com/vonWolfehaus/\n */\ndefine('EditorPlane', function() {\n\n\tfunction EditorPlane(scene, grid, mouse) {\n\t\tthis.nexus = require('nexus');\n\t\tthis.tower = require('tower');\n\n\t\tthis.mesh = null;\n\t\tthis.planeMaterial = new THREE.MeshBasicMaterial({\n\t\t\tcolor: 0xffffff,\n\t\t\tside: THREE.DoubleSide\n\t\t});\n\n\t\tthis.hoverMaterial = new THREE.MeshBasicMaterial({\n\t\t\tcolor: 0x1aaeff,\n\t\t\tside: THREE.DoubleSide\n\t\t});\n\n\t\tthis.scene = scene;\n\t\tthis.grid = grid;\n\t\tthis.mouse = mouse;\n\t\tthis.board = this.nexus.board;\n\n\t\tthis.hoverMesh = null; // mesh that hovers over empty cells\n\t\tthis.tileHoverMesh = null; // mesh that hovers over tiles\n\n\t\tthis.planeSize = grid.size + 5;\n\t\tthis._actualSize = this.planeSize * (vg.SQRT3 * 0.5) * this.grid._cellWidth + this.grid.cellSize;\n\n\t\tthis.tower.userAction.add(onUserAction, this);\n\t\tfunction onUserAction(type, overTile, data) {\n\t\t\tswitch (type) {\n\t\t\t\tcase vg.MouseCaster.OVER:\n\t\t\t\t\tif (overTile && !mouse.down) {\n\t\t\t\t\t\tthis.tileHoverMesh.visible = true;\n\t\t\t\t\t\tthis.tileHoverMesh.position.copy(overTile.position);\n\t\t\t\t\t\tthis.tileHoverMesh.position.y += 1;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase vg.MouseCaster.OUT:\n\t\t\t\t\tthis.tileHoverMesh.visible = false;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tEditorPlane.prototype = {\n\n\t\tupdatePlane: function(color, size) {\n\t\t\tvar newColor = parseInt(color.replace(/^#/, ''), 16);\n\t\t\tthis.planeMaterial.color.setHex(newColor);\n\n\t\t\tif (this.planeSize !== size) {\n\t\t\t\tthis.planeSize = size;\n\t\t\t\tswitch (this.grid.type) {\n\t\t\t\t\tcase vg.HEX:\n\t\t\t\t\t\tthis._actualSize = size * (vg.SQRT3 * 0.5) * this.grid._cellWidth + this.grid.cellSize;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase vg.SQR:\n\t\t\t\t\t\tthis._actualSize = size * this.grid.cellSize * 2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tthis.generate();\n\t\t\t}\n\t\t},\n\n\t\tgenerate: function() {\n\t\t\tvar geometry;\n\t\t\tif (this.mesh && this.mesh.parent) {\n\t\t\t\tthis.mesh.parent.remove(this.mesh);\n\t\t\t\tthis.mesh.geometry.dispose();\n\t\t\t}\n\n\t\t\tthis.board.makeOverlay(this.planeSize);\n\n\t\t\tswitch (this.grid.type) {\n\t\t\t\tcase vg.HEX:\n\t\t\t\t\tgeometry = new THREE.CircleGeometry(this._actualSize, 6);\n\t\t\t\t\tbreak;\n\t\t\t\tcase vg.SQR:\n\t\t\t\t\tgeometry = new THREE.PlaneGeometry(this._actualSize, this._actualSize, 1, 1);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('[EditorPlane.generate] no grid type set');\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tthis.mesh = new THREE.Mesh(geometry, this.planeMaterial);\n\t\t\tthis.mesh.rotation.x = 90 * vg.DEG_TO_RAD;\n\t\t\tthis.mesh.position.y = -0.5;\n\t\t\tif (this.grid.type === vg.HEX) {\n\t\t\t\tthis.mesh.rotation.z = 90 * vg.DEG_TO_RAD;\n\t\t\t}\n\t\t\tthis.scene.add(this.mesh);\n\n\t\t\t// make hover mesh\n\t\t\tif (this.hoverMesh && this.hoverMesh.parent) {\n\t\t\t\tthis.hoverMesh.parent.remove(this.hoverMesh);\n\t\t\t}\n\t\t\tthis.hoverMesh = this.board.geoGen.makeTilePoly(this.hoverMaterial);\n\t\t\tthis.nexus.scene.container.add(this.hoverMesh);\n\n\t\t\tif (this.tileHoverMesh && this.tileHoverMesh.parent) {\n\t\t\t\tthis.tileHoverMesh.parent.remove(this.tileHoverMesh);\n\t\t\t}\n\t\t\tthis.tileHoverMesh = this.board.geoGen.makeTileHighlight(this.hoverMaterial);\n\t\t\tthis.nexus.scene.container.add(this.tileHoverMesh);\n\t\t\tthis.tileHoverMesh.visible = false;\n\t\t},\n\n\t\tupdate: function() {\n\t\t\tif (this.mouse.allHits.length && !this.mouse.pickedObject) {\n\t\t\t\tvar cell = this.grid.pixelToCell(this.nexus.input.editorWorldPos);\n\t\t\t\tthis.hoverMesh.position.copy(this.grid.cellToPixel(cell));\n\t\t\t\tthis.hoverMesh.position.y += 0.05;\n\t\t\t\tthis.hoverMesh.visible = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.hoverMesh.visible = false;\n\t\t\t}\n\t\t}\n\t};\n\n\treturn EditorPlane;\n});\n"],"sourceRoot":"/source/"}