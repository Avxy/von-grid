{"version":3,"sources":["nexus.js","tower.js","walkableTile.js","removeTile.js","data.js","tilemaker.js","addTile.js","motor.js","keyboard.js","toolbag.js","main.js","Input.js","EditorPlane.js"],"names":["define","grid","board","mouse","scene","input","plane","gen","tileAction","vg","Signal","objAction","userAction","save","TILE_CHANGE_HEIGHT","TILE_ADD","TILE_REMOVE","TILE_CHANGE_WALKABLE","over","cell","tile","mesh","nexus","down","walkableTile","up","walkable","tower","dispatch","require","onOver","onDown","onUp","action","removeTile","_store","changed","get","key","this","set","val","window","localStorage","JSON","stringify","load","json","data","parse","err","console","warn","init","map","mats","materials","c","i","length","id","THREE","MeshPhongMaterial","color","util","randomizeRGB","resetHeightStep","newHeightStep","t","step","tileHeightStep","tiles","position","y","h","getTile","matid","mat","material","tilePool","pop","copy","cellToPixel","Tile","geometry","geoGen","tileGeo","addTile","dataChanged","oldData","newData","heightStep","settings","TilesetManager","add","getTileAtCell","newCell","Cell","Math","abs","wheel","newTile","tilemaker","ui","activeTile","slotid","on","_brake","requestAnimationFrame","_update","addEventListener","onFocus","onBlur","off","removeEventListener","cb","scope","k","_hashStr","toString","_has","_steps","push","func","remove","splice","o","call","n","evt","str","chr","len","hash","charCodeAt","keyCode","shift","ctrl","signal","eventType","DOWN","UP","document","code","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","ZERO","ONE","TWO","FOUR","FIVE","SIX","SEVEN","EIGHT","NINE","NUMPAD_0","NUMPAD_1","NUMPAD_2","NUMPAD_3","NUMPAD_4","NUMPAD_5","NUMPAD_6","NUMPAD_7","NUMPAD_8","NUMPAD_9","NUMPAD_MULTIPLY","NUMPAD_ADD","NUMPAD_ENTER","NUMPAD_SUBTRACT","NUMPAD_DECIMAL","NUMPAD_DIVIDE","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","F13","F14","F15","COLON","EQUALS","UNDERSCORE","QUESTION_MARK","TILDE","OPEN_BRACKET","BACKWARD_SLASH","CLOSED_BRACKET","QUOTES","BACKSPACE","TAB","CLEAR","ENTER","SHIFT","CTRL","ALT","CAPS_LOCK","ESC","SPACEBAR","PAGE_UP","PAGE_DOWN","END","HOME","LEFT","RIGHT","INSERT","DELETE","HELP","NUM_LOCK","update","currentGridCell","pixelToCell","editorWorldPos","keyboard","activeTool","name","allHits","equals","prevGridCell","toolChange","Tools","ADD_TILE","tool","REMOVE_TILE","WALK_TILE","onUserAction","type","overTile","rightDown","MouseCaster","WHEEL","dif","lastHeight","round","OVER","OUT","motor","Vector3","Events","TOOL_CHANGE","wheelTimer","active","dirtyMap","saveTimer","log","render","previewUpdate","onControlWheel","onMapChange","timeTilAutoSave","toJSON","loadMap","fromJSON","setGrid","generate","makeTiles","updatePlane","planeColor","planeSize","saveMap","output","replace","exportString","filename","blob","Blob","objectURL","URL","createObjectURL","link","href","download","target","createEvent","initMouseEvent","dispatchEvent","Input","EditorPlane","fileInput","createElement","file","files","reader","FileReader","onload","e","result","readAsText","SAVE_MAP","LOAD_MAP","click","canvas","getElementById","Scene","element","cameraPosition","x","z","maxPolarAngle","PI","controls","HexGrid","Board","group","camera","GeneratedTileManager","focusOn","trigger","UPDATE_SETTINGS","size","mapSize","cellSize","updateCellSize","style","display","body","appendChild","onMouse","mouseDelta","mousePanMinDistance","_travel","prototype","hit","point","dx","screenPosition","dy","sqrt","enabled","obj","CLICK","planeMaterial","MeshBasicMaterial","side","DoubleSide","hoverMaterial","hoverMesh","tileHoverMesh","_actualSize","SQRT3","_cellWidth","visible","newColor","parseInt","setHex","HEX","SQR","parent","dispose","makeOverlay","CircleGeometry","PlaneGeometry","Mesh","rotation","DEG_TO_RAD","makeTilePoly","container","makeTileHighlight","pickedObject"],"mappings":"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","file":"app.js","sourcesContent":["define('nexus', {\n\tgrid: null,\n\tboard: null,\n\tmouse: null,\n\tscene: null,\n\tinput: null,\n\tplane: null,\n\tgen: null,\n});\n","define('tower', {\n\ttileAction: new vg.Signal(),\n\tobjAction: new vg.Signal(),\n\tuserAction: new vg.Signal(),\n\n\tsave: new vg.Signal(),\n\n\tTILE_CHANGE_HEIGHT: 'cell.change.height',\n\tTILE_ADD: 'cell.add',\n\tTILE_REMOVE: 'cell.remove',\n\tTILE_CHANGE_WALKABLE: 'cell.change.walkable',\n});\n","define('walkableTile', function() {\n\tvar tower = require('tower');\n\tvar nexus = require('nexus');\n\n\t/*var material = new THREE.MeshBasicMaterial({\n\t\ttexture:\n\t});\n\tvar verts = this.vertices.slice(0);\n\tverts.push(verts[0].clone());\n\tvar curve = new THREE.CatmullRomCurve3(verts);\n\tvar geo = new THREE.TubeGeometry(curve, 6, 1, 2, true);\n\tvar mesh = new THREE.Mesh(geo, material);\n\tmesh.scale.x = 0.9;\n\tmesh.scale.z = 0.9;*/\n\n\tfunction over(cell, tile, mesh) {\n\t\tif (tile && nexus.mouse.down) {\n\t\t\twalkableTile(tile);\n\t\t}\n\t}\n\n\tfunction down(cell, tile, mesh) {\n\t\tif (tile) {\n\t\t\twalkableTile(tile);\n\t\t}\n\t}\n\n\tfunction up(cell, tile, mesh) {\n\n\t}\n\n\tfunction walkableTile(tile) {\n\t\tif (!tile) return;\n\n\t\ttile.cell.walkable = !tile.cell.walkable;\n\n\t\ttower.tileAction.dispatch(tower.TILE_CHANGE_WALKABLE, tile);\n\n\t\treturn tile;\n\t}\n\n\treturn {\n\t\tonOver: over,\n\t\tonDown: down,\n\t\tonUp: up,\n\t\taction: walkableTile\n\t};\n});\n","define('removeTile', function() {\n\tvar tower = require('tower');\n\tvar nexus = require('nexus');\n\t// var keyboard = require('keyboard');\n\t// var motor = require('motor');\n\n\t// var disabled = false;\n\n\tfunction over(cell, tile, mesh) {\n\t\tif (tile && nexus.mouse.down) {\n\t\t\tremoveTile(tile);\n\t\t}\n\t}\n\n\tfunction down(cell, tile, mesh) {\n\t\tif (tile) {\n\t\t\tremoveTile(tile);\n\t\t}\n\t}\n\n\tfunction up(cell, tile, mesh) {\n\n\t}\n\n\tfunction removeTile(tile) {\n\t\tnexus.board.removeTile(tile);\n\t\ttower.tileAction.dispatch(tower.TILE_REMOVE, tile);\n\t}\n\n\treturn {\n\t\tonOver: over,\n\t\tonDown: down,\n\t\tonUp: up,\n\t\taction: removeTile\n\t};\n});\n","/*\n\tHandles JSON for whatever data needs to be saved to localStorage, and provides a convenient signal for whenever that data changes.\n*/\ndefine('data', {\n\t_store: {},\n\tchanged: new vg.Signal(),\n\n\tget: function(key) {\n\t\treturn this._store[key] || null;\n\t},\n\n\tset: function(key, val) {\n\t\t// fire event first so we can retrieve old data before it's overwritten (just in case)\n\t\tthis.changed.dispatch(key, this._store[key], val);\n\t\tthis._store[key] = val;\n\t},\n\n\tsave: function() {\n\t\twindow.localStorage['vongrid'] = JSON.stringify(this._store);\n\t},\n\n\tload: function(json) {\n\t\tvar data = window.localStorage['vongrid'];\n\t\tif (json || data) {\n\t\t\ttry {\n\t\t\t\tthis._store = json || JSON.parse(data);\n\t\t\t\tthis.changed.dispatch('load-success', this._store);\n\t\t\t}\n\t\t\tcatch (err) {\n\t\t\t\tconsole.warn(err);\n\t\t\t\tthis.changed.dispatch('load-failure');\n\t\t\t}\n\t\t}\n\t}\n});\n","/*\n\tCreates and manages a default tileset.\n*/\ndefine('tilemaker', function() {\n\tvar nexus = require('nexus');\n\tvar data = require('data');\n\n\tvar tileset = new vg.TilesetManager(nexus.board);\n\n\tvar materials = [];\n\tvar tilePool = []; // unused tiles for recycling\n\n\tfunction init() {\n\t\tvar map = data.get('map');\n\t\tvar mats = map.materials;\n\t\tif (map.mesh) {\n\t\t\t// TODO\n\t\t\t// tileset.load(map, onMatLoad);\n\t\t}\n\t\telse {\n\t\t\t// generate a placeholder tileset with the materials saved in the map data\n\t\t\tvar c = [\n\t\t\t\t'rgb(10, 64, 16)',\n\t\t\t\t'rgb(10, 51, 64)',\n\t\t\t\t'rgb(70, 70, 0)',\n\t\t\t\t'rgb(0, 200, 200)',\n\t\t\t\t'rgb(255, 100, 200)',\n\t\t\t];\n\t\t\tfor (var i = 0; i < mats.length; i++) {\n\t\t\t\tmaterials[mats[i].id] = new THREE.MeshPhongMaterial({\n\t\t\t\t\tcolor: c[i] || vg.util.randomizeRGB(0, 100)\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t// make sure all tiles are under new height, or rebuild geo if height is taller\n\tfunction resetHeightStep(newHeightStep) {\n\t\tif (!nexus.board) return;\n\t\tvar i, t;\n\t\tvar step = newHeightStep || nexus.board.tileHeightStep;\n\t\tfor (i = 0; t = nexus.board.tiles[i]; i++) {\n\t\t\tt.position.y = t.cell.h * step;\n\t\t}\n\t}\n\n\tfunction getTile(cell, matid) { // eslint-disable-line no-unused-vars\n\t\tvar mat = materials[matid];\n\t\tvar map = data.get('map');\n\t\tif (cell.tile) {\n\t\t\t// don't rebuild, just update\n\t\t\tcell.tile.material = mat;\n\t\t\tcell.tile.mesh.material = mat;\n\t\t\treturn cell.tile;\n\t\t}\n\t\tvar t = tilePool.pop();\n\t\tif (t) {\n\t\t\tt.material = mat;\n\t\t\tt.mesh.material = mat;\n\t\t\tt.cell = cell;\n\t\t\tcell.tile = t;\n\t\t\tt.position.copy(nexus.grid.cellToPixel(cell));\n\t\t\tt.position.y = t.cell.h * nexus.board.tileHeightStep;\n\t\t}\n\t\telse {\n\t\t\tt = new vg.Tile({\n\t\t\t\tcell: cell,\n\t\t\t\tgeometry: map.mesh || nexus.gen.geoGen.tileGeo,\n\t\t\t\tmaterial: materials[matid]\n\t\t\t});\n\t\t}\n\n\t\tnexus.board.addTile(t);\n\n\t\treturn t;\n\t}\n\n\t/*function recycleTile(tile) {\n\t\tif (tile.mesh.parent) tile.mesh.parent.remove(tile.mesh);\n\t\ttilePool.push(tile);\n\t}*/\n\n\tfunction dataChanged(key, oldData, newData) {\n\t\tvar newHeightStep;\n\n\t\tif (key === 'settings') {\n\t\t\tnewHeightStep = newData.heightStep;\n\t\t}\n\t\telse if (key === 'load-success') {\n\t\t\tnewHeightStep = oldData.settings.heightStep;\n\t\t}\n\n\t\tif (newHeightStep) resetHeightStep(newHeightStep);\n\t}\n\n\tdata.changed.add(dataChanged, this);\n\n\treturn {\n\t\tinit: init,\n\t\tgetTile: getTile\n\t};\n});\n","define('addTile', function() {\n\tvar tower = require('tower');\n\tvar nexus = require('nexus');\n\tvar tilemaker = require('tilemaker');\n\n\tfunction over(cell, tile, mesh) {\n\t\tif (cell.tile) return;\n\t\tif (!tile && nexus.mouse.down) {\n\t\t\taddTile(cell);\n\t\t}\n\t}\n\n\tfunction down(cell, tile, mesh) {\n\t\tif (!tile) {\n\t\t\taddTile(cell);\n\t\t}\n\t}\n\n\tfunction up(cell, tile, mesh) {\n\n\t}\n\n\tfunction addTile(cell) {\n\t\tif (!cell || nexus.board.getTileAtCell(cell)) return;\n\n\t\tvar newCell = new vg.Cell();\n\t\tnewCell.copy(cell);\n\t\tnewCell.h = Math.abs(nexus.mouse.wheel * nexus.board.tileHeightStep);\n\n\t\tvar newTile = tilemaker.getTile(newCell, ui.activeTile.slotid);\n\n\t\tnexus.board.addTile(newTile);\n\n\t\ttower.tileAction.dispatch(tower.TILE_ADD, newTile);\n\n\t\treturn newTile;\n\t}\n\n\treturn {\n\t\tonOver: over,\n\t\tonDown: down,\n\t\tonUp: up,\n\t\taction: addTile\n\t};\n});\n","/*\n\tThis is the ONLY place in the app that has a requestAnimationFrame handler.\n\tAll modules attach their functions to this module if they want in on the RAF.\n */\ndefine('motor', function() {\n\tvar _brake = false;\n\tvar _steps = [];\n\n\tfunction on() {\n\t\t_brake = false;\n\t\twindow.requestAnimationFrame(_update);\n\t\twindow.addEventListener('focus', onFocus, false);\n\t\twindow.addEventListener('blur', onBlur, false);\n\t}\n\n\tfunction off() {\n\t\t_brake = true;\n\t\twindow.removeEventListener('focus', onFocus, false);\n\t\twindow.removeEventListener('blur', onBlur, false);\n\t}\n\n\t// in order to be able to ID functions we have to hash them to generate unique-ish keys for us to find them with later\n\t// if we don't do this, we won't be able to remove callbacks that were bound and save us from binding callbacks multiple times all over the place\n\tfunction add(cb, scope) {\n\t\tvar k = _hashStr(cb.toString());\n\t\tvar h = _has(k);\n\t\tif (h === -1) {\n\t\t\t_steps.push({\n\t\t\t\tfunc: cb,\n\t\t\t\tscope: scope,\n\t\t\t\tkey: k\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction remove(cb) {\n\t\tvar k = _hashStr(cb.toString());\n\t\tvar i = _has(k);\n\t\tif (i !== -1) {\n\t\t\t_steps.splice(i, 1);\n\t\t}\n\t}\n\n\tfunction _update() {\n\t\tif (_brake) return;\n\t\twindow.requestAnimationFrame(_update);\n\n\t\tfor (var i = 0; i < _steps.length; i++) {\n\t\t\tvar o = _steps[i];\n\t\t\to.func.call(o.scope || null);\n\t\t}\n\t}\n\n\t// check if the handler already has iaw.motor particular callback\n\tfunction _has(k) {\n\t\tvar n = -1;\n\t\tvar i;\n\t\tfor (i = 0; i < _steps.length; i++) {\n\t\t\tn = _steps[i].key;\n\t\t\tif (n === k) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\tfunction onFocus(evt) {\n\t\t_brake = false;\n\t\t_update();\n\t}\n\n\tfunction onBlur(evt) {\n\t\t_brake = true;\n\t}\n\n\tfunction _hashStr(str) {\n\t\tvar hash = 0, i, chr, len;\n\t\tif (str.length === 0) return hash;\n\t\tfor (i = 0, len = str.length; i < len; i++) {\n\t\t\tchr = str.charCodeAt(i);\n\t\t\thash = ((hash << 5) - hash) + chr;\n\t\t\thash |= 0;\n\t\t}\n\t\treturn hash;\n\t}\n\n\treturn {\n\t\ton: on,\n\t\toff: off,\n\t\tadd: add,\n\t\tremove: remove,\n\t};\n});\n","define('keyboard', function() {\n\n\tfunction onDown(evt) {\n\t\tswitch (evt.keyCode) {\n\t\t\tcase 16:\n\t\t\t\tk.shift = true;\n\t\t\t\tbreak;\n\t\t\tcase 17:\n\t\t\t\tk.ctrl = true;\n\t\t\t\tbreak;\n\t\t}\n\t\tk.signal.dispatch(k.eventType.DOWN, evt.keyCode);\n\t}\n\n\tfunction onUp(evt) {\n\t\tswitch (evt.keyCode) {\n\t\t\tcase 16:\n\t\t\t\tk.shift = false;\n\t\t\t\tbreak;\n\t\t\tcase 17:\n\t\t\t\tk.ctrl = false;\n\t\t\t\tbreak;\n\t\t}\n\t\tk.signal.dispatch(k.eventType.UP, evt.keyCode);\n\t}\n\n\tvar k = {\n\t\tshift: false,\n\t\tctrl: false,\n\n\t\teventType: {\n\t\t\tDOWN: 'down',\n\t\t\tUP: 'up'\n\t\t},\n\n\t\tsignal: new vg.Signal(),\n\n\t\ton: function() {\n\t\t\tdocument.addEventListener('keydown', onDown, false);\n\t\t\tdocument.addEventListener('keyup', onUp, false);\n\t\t},\n\n\t\toff: function() {\n\t\t\tdocument.removeEventListener('keydown', onDown);\n\t\t\tdocument.removeEventListener('keyup', onUp);\n\t\t},\n\n\t\tcode: {\n\t\t\tA: 'A'.charCodeAt(0),\n\t\t\tB: 'B'.charCodeAt(0),\n\t\t\tC: 'C'.charCodeAt(0),\n\t\t\tD: 'D'.charCodeAt(0),\n\t\t\tE: 'E'.charCodeAt(0),\n\t\t\tF: 'F'.charCodeAt(0),\n\t\t\tG: 'G'.charCodeAt(0),\n\t\t\tH: 'H'.charCodeAt(0),\n\t\t\tI: 'I'.charCodeAt(0),\n\t\t\tJ: 'J'.charCodeAt(0),\n\t\t\tK: 'K'.charCodeAt(0),\n\t\t\tL: 'L'.charCodeAt(0),\n\t\t\tM: 'M'.charCodeAt(0),\n\t\t\tN: 'N'.charCodeAt(0),\n\t\t\tO: 'O'.charCodeAt(0),\n\t\t\tP: 'P'.charCodeAt(0),\n\t\t\tQ: 'Q'.charCodeAt(0),\n\t\t\tR: 'R'.charCodeAt(0),\n\t\t\tS: 'S'.charCodeAt(0),\n\t\t\tT: 'T'.charCodeAt(0),\n\t\t\tU: 'U'.charCodeAt(0),\n\t\t\tV: 'V'.charCodeAt(0),\n\t\t\tW: 'W'.charCodeAt(0),\n\t\t\tX: 'X'.charCodeAt(0),\n\t\t\tY: 'Y'.charCodeAt(0),\n\t\t\tZ: 'Z'.charCodeAt(0),\n\t\t\tZERO: '0'.charCodeAt(0),\n\t\t\tONE: '1'.charCodeAt(0),\n\t\t\tTWO: '2'.charCodeAt(0),\n\t\t\tTHREE: '3'.charCodeAt(0),\n\t\t\tFOUR: '4'.charCodeAt(0),\n\t\t\tFIVE: '5'.charCodeAt(0),\n\t\t\tSIX: '6'.charCodeAt(0),\n\t\t\tSEVEN: '7'.charCodeAt(0),\n\t\t\tEIGHT: '8'.charCodeAt(0),\n\t\t\tNINE: '9'.charCodeAt(0),\n\t\t\tNUMPAD_0: 96,\n\t\t\tNUMPAD_1: 97,\n\t\t\tNUMPAD_2: 98,\n\t\t\tNUMPAD_3: 99,\n\t\t\tNUMPAD_4: 100,\n\t\t\tNUMPAD_5: 101,\n\t\t\tNUMPAD_6: 102,\n\t\t\tNUMPAD_7: 103,\n\t\t\tNUMPAD_8: 104,\n\t\t\tNUMPAD_9: 105,\n\t\t\tNUMPAD_MULTIPLY: 106,\n\t\t\tNUMPAD_ADD: 107,\n\t\t\tNUMPAD_ENTER: 108,\n\t\t\tNUMPAD_SUBTRACT: 109,\n\t\t\tNUMPAD_DECIMAL: 110,\n\t\t\tNUMPAD_DIVIDE: 111,\n\t\t\tF1: 112,\n\t\t\tF2: 113,\n\t\t\tF3: 114,\n\t\t\tF4: 115,\n\t\t\tF5: 116,\n\t\t\tF6: 117,\n\t\t\tF7: 118,\n\t\t\tF8: 119,\n\t\t\tF9: 120,\n\t\t\tF10: 121,\n\t\t\tF11: 122,\n\t\t\tF12: 123,\n\t\t\tF13: 124,\n\t\t\tF14: 125,\n\t\t\tF15: 126,\n\t\t\tCOLON: 186,\n\t\t\tEQUALS: 187,\n\t\t\tUNDERSCORE: 189,\n\t\t\tQUESTION_MARK: 191,\n\t\t\tTILDE: 192,\n\t\t\tOPEN_BRACKET: 219,\n\t\t\tBACKWARD_SLASH: 220,\n\t\t\tCLOSED_BRACKET: 221,\n\t\t\tQUOTES: 222,\n\t\t\tBACKSPACE: 8,\n\t\t\tTAB: 9,\n\t\t\tCLEAR: 12,\n\t\t\tENTER: 13,\n\t\t\tSHIFT: 16,\n\t\t\tCTRL: 17,\n\t\t\tALT: 18,\n\t\t\tCAPS_LOCK: 20,\n\t\t\tESC: 27,\n\t\t\tSPACEBAR: 32,\n\t\t\tPAGE_UP: 33,\n\t\t\tPAGE_DOWN: 34,\n\t\t\tEND: 35,\n\t\t\tHOME: 36,\n\t\t\tLEFT: 37,\n\t\t\tUP: 38,\n\t\t\tRIGHT: 39,\n\t\t\tDOWN: 40,\n\t\t\tINSERT: 45,\n\t\t\tDELETE: 46,\n\t\t\tHELP: 47,\n\t\t\tNUM_LOCK: 144\n\t\t}\n\t};\n\n\treturn k;\n});\n","/*\n\tManages cells and objects on the map.\n*/\ndefine('toolbag', function() {\n\tvar tower = require('tower');\n\tvar nexus = require('nexus');\n\tvar keyboard = require('keyboard');\n\tvar motor = require('motor');\n\n\tvar addTile = require('addTile');\n\tvar removeTile = require('removeTile');\n\tvar walkableTile = require('walkableTile');\n\n\tvar tool = addTile; // should be the first tool in the bag as determined by tool-menu.tag\n\n\tvar lastHeight = 1;\n\tvar currentGridCell = null;\n\tvar prevGridCell = new THREE.Vector3();\n\t// var _cel = new vg.Cell();\n\n\ttower.userAction.add(onUserAction, this);\n\tui.on(ui.Events.TOOL_CHANGE, toolChange);\n\n\tmotor.add(update);\n\n\tfunction update() {\n\t\tcurrentGridCell = nexus.grid.pixelToCell(nexus.input.editorWorldPos);\n\t\tif (!keyboard.ctrl && nexus.mouse.down && ui.activeTool.name === 'ADD_TILE' && nexus.mouse.allHits && nexus.mouse.allHits.length) {\n\t\t\t// special case since the over event doesn't fire if there's no tile\n\t\t\tif (!currentGridCell.equals(prevGridCell)) {\n\t\t\t\taddTile.action(currentGridCell, null);\n\t\t\t}\n\t\t\tprevGridCell.copy(currentGridCell);\n\t\t}\n\t}\n\n\tfunction toolChange(evt) {\n\t\tswitch (evt) {\n\t\t\tcase ui.Tools.ADD_TILE:\n\t\t\t\ttool = addTile;\n\t\t\t\tbreak;\n\t\t\tcase ui.Tools.REMOVE_TILE:\n\t\t\t\ttool = removeTile;\n\t\t\t\tbreak;\n\t\t\tcase ui.Tools.WALK_TILE:\n\t\t\t\ttool = walkableTile;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\ttool = null;\n\t\t\t\tbreak;\n\t\t}\n\t\t// console.log('Tool selected: '+evt);\n\t}\n\n\tfunction onUserAction(type, overTile, data) {\n\t\tif (keyboard.ctrl || data === null || nexus.mouse.rightDown || !tool) {\n\t\t\t// there's no picked object, which means the user isn't hovering over any mesh in the scene\n\t\t\t// also ignore right-mouse clicks\n\t\t\treturn;\n\t\t}\n\t\tvar heightStep = nexus.board.tileHeightStep;\n\n\t\tswitch (type) {\n\t\t\tcase vg.MouseCaster.WHEEL:\n\t\t\t\tif (overTile) {\n\t\t\t\t\tvar dif = lastHeight - data;\n\t\t\t\t\toverTile.cell.h += dif > 0 ? -1 : +1;\n\t\t\t\t\tif (overTile.cell.h < 1) overTile.cell.h = 0;\n\n\t\t\t\t\tnexus.mouse.wheel = Math.round((overTile.cell.h / heightStep) + (dif > 0 ? -1 : 1));\n\t\t\t\t\tlastHeight = nexus.mouse.wheel;\n\n\t\t\t\t\toverTile.position.y = overTile.cell.h * heightStep;\n\n\t\t\t\t\ttower.tileAction.dispatch(tower.TILE_CHANGE_HEIGHT, overTile);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase vg.MouseCaster.OVER:\n\t\t\t\ttool.onOver(currentGridCell, overTile, data);\n\t\t\t\tbreak;\n\n\t\t\tcase vg.MouseCaster.OUT:\n\n\t\t\t\tbreak;\n\n\t\t\tcase vg.MouseCaster.DOWN:\n\t\t\t\ttool.onDown(currentGridCell, overTile, data);\n\t\t\t\tbreak;\n\n\t\t\tcase vg.MouseCaster.UP:\n\t\t\t\ttool.onUp(currentGridCell, overTile, data);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn {\n\n\t};\n});\n","window.addEventListener('load', function(evt) {\n\tvar data = require('data');\n\tvar tower = require('tower');\n\tvar nexus = require('nexus');\n\tvar keyboard = require('keyboard');\n\tvar motor = require('motor');\n\n\tvar Input = require('Input');\n\tvar EditorPlane = require('EditorPlane');\n\n\tdata.load();\n\tvar map = data.get('map');\n\n\tvar timeTilAutoSave = 200; // timer runs per frame, 60fps\n\tvar saveTimer = 10;\n\tvar dirtyMap = false;\n\n\tvar fileInput = document.createElement('input');\n\tfileInput.type = 'file';\n\tfileInput.addEventListener('change', function(evt) {\n\t\tvar file = fileInput.files[0];\n\t\tif (!file) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar reader = new FileReader();\n\t\treader.onload = function(e) {\n\t\t\tvar json = null;\n\t\t\ttry {\n\t\t\t\tjson = JSON.parse(e.target.result);\n\t\t\t}\n\t\t\tcatch (err) {\n\t\t\t\tconsole.warn('File is not json format');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tloadMap(json);\n\t\t};\n\n\t\treader.readAsText(file);\n\n\t\treturn false;\n\t});\n\n\tui.on('error', function(evt) {\n\t\tconsole.warn(evt);\n\t});\n\n\tui.on(ui.Events.SAVE_MAP, function() {\n\t\tsaveMap();\n\t});\n\n\tui.on(ui.Events.LOAD_MAP, function() {\n\t\tfileInput.click();\n\t});\n\n\tkeyboard.on();\n\tmotor.on();\n\n\t// setup the thing\n\tvar canvas = document.getElementById('view');\n\tvar scene = new vg.Scene({\n\t\telement: canvas,\n\t\tcameraPosition: {x: 0, y: 300, z: 120},\n\t\t// light: new THREE.AmbientLight(0x000000)\n\t}, {\n\t\tmaxPolarAngle: (Math.PI / 2) - 0.01\n\t});\n\tnexus.scene = scene;\n\n\t// listen to the orbit controls to disable the raycaster while user adjusts the view\n\tscene.controls.addEventListener('wheel', onControlWheel);\n\n\tvar grid = new vg.HexGrid();\n\tnexus.grid = grid;\n\tvar board = new vg.Board(grid);\n\tnexus.board = board;\n\tvar mouse = new vg.MouseCaster(board.group, scene.camera, canvas);\n\tnexus.mouse = mouse;\n\tvar gen = new vg.GeneratedTileManager(board);\n\tnexus.gen = gen;\n\n\tvar input = new Input(board.group, mouse);\n\tnexus.input = input;\n\tvar plane = new EditorPlane(board.group, grid, mouse);\n\tnexus.plane = plane;\n\n\ttower.tileAction.add(onMapChange, this);\n\ttower.save.add(onMapChange, this);\n\n\tfunction dataChanged(key, oldData, newData) {\n\t\tif (key === 'settings') {\n\t\t\tboard.tileHeightStep = newData.heightStep;\n\t\t}\n\t\tif (key === 'load-success') {\n\t\t\tboard.tileHeightStep = oldData.settings.heightStep;\n\t\t}\n\t}\n\tdata.changed.add(dataChanged);\n\n\tscene.focusOn(board.group);\n\n\tif (map) {\n\t\tui.trigger(ui.Events.UPDATE_SETTINGS, data.get('settings'));\n\t\tloadMap(map);\n\t}\n\telse {\n\t\tgrid.generate({\n\t\t\tsize: 5\n\t\t});\n\n\t\tmap = grid.toJSON();\n\t\tdata.set('map', map);\n\t\tconsole.log('set data');\n\n\t\tnexus.gen.makeTiles(50, map.materials);\n\n\t\tvar settings = {\n\t\t\tmapSize: grid.size,\n\t\t\tcellSize: grid.cellSize,\n\t\t\tplaneSize: plane.planeSize,\n\t\t\theightStep: 3,\n\t\t\tplaneColor: '#ffffff',\n\t\t\tmesh: null\n\t\t};\n\t\tdata.set('settings', settings);\n\n\t\tconsole.log('Created a new map');\n\t\tdata.save();\n\n\t\tplane.generate();\n\t}\n\n\trequire('tilemaker').init();\n\n\t// reflect new values in the UI\n\tui.trigger(ui.Events.UPDATE_SETTINGS, data.get('settings'));\n\n\tscene.add(board.group);\n\n\tui.on(ui.Events.UPDATE_SETTINGS, function(settings) {\n\t\t// console.log('current grid size: '+grid.size+', new: '+settings.mapSize);\n\t\t// console.log('current cell size: '+grid.cellSize+', new: '+settings.cellSize);\n\t\tplane.updatePlane(settings.planeColor, settings.planeSize);\n\n\t\tdata.set('settings', settings);\n\t\tonMapChange();\n\n\t\tif (settings.mapSize === grid.size) {\n\t\t\tif (settings.cellSize === grid.cellSize) {\n\t\t\t\t// console.log('neither changed, ignored');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// console.log('only cell size changed');\n\t\t\tgrid.updateCellSize(settings.cellSize);\n\t\t}\n\t\telse {\n\t\t\t// only map size or both changed\n\t\t\tgrid.updateCellSize(settings.cellSize);\n\t\t\t// if map size changed, we have to rebuild the map from scratch\n\t\t\tgrid.generate({\n\t\t\t\tsize: settings.mapSize\n\t\t\t});\n\t\t}\n\n\t\tplane.generate();\n\n\t\tif (!settings.mesh) {\n\t\t\tgen.geoGen.makeTiles(30);\n\t\t}\n\t});\n\n\tfunction update() {\n\t\tif (wheelTimer < 10) {\n\t\t\twheelTimer++;\n\t\t\tif (wheelTimer === 10) {\n\t\t\t\tmouse.active = true;\n\t\t\t}\n\t\t}\n\t\tif (dirtyMap) {\n\t\t\tsaveTimer--;\n\t\t\tif (saveTimer === 0) {\n\t\t\t\tdirtyMap = false;\n\t\t\t\tdata.set('map', map);\n\t\t\t\tdata.save();\n\t\t\t\tconsole.log('Map saved');\n\t\t\t}\n\t\t}\n\t\tmouse.update();\n\t\tinput.update();\n\t\tplane.update();\n\t\tscene.render();\n\t\tif (ui.previewUpdate) {\n\t\t\tui.previewUpdate();\n\t\t}\n\t}\n\tmotor.add(update);\n\n\tvar wheelTimer = 10;\n\tfunction onControlWheel() {\n\t\tmouse.active = false;\n\t\twheelTimer = 0;\n\t}\n\n\tfunction onMapChange() {\n\t\tdirtyMap = true;\n\t\tsaveTimer = timeTilAutoSave;\n\t\tmap = grid.toJSON();\n\t}\n\n\tfunction loadMap(json) {\n\t\tgrid.fromJSON(json);\n\t\tboard.setGrid(grid);\n\n\t\tplane.generate();\n\n\t\tvar settings = data.get('settings');\n\n\t\tif (!settings.mesh) {\n\t\t\t// TODO: reflect height step in settings\n\t\t\tnexus.gen.makeTiles(30);\n\t\t}\n\n\t\tplane.updatePlane(settings.planeColor, settings.planeSize);\n\n\t\tconsole.log('Map load complete');\n\t}\n\n\tfunction saveMap() {\n\t\tvar output = null;\n\n\t\tmap = grid.toJSON();\n\n\t\ttry {\n\t\t\toutput = JSON.stringify(map, null, '\\t');\n\t\t\toutput = output.replace(/[\\n\\t]+([\\d\\.e\\-\\[\\]]+)/g, '$1');\n\t\t}\n\t\tcatch (err) {\n\t\t\toutput = JSON.stringify(map);\n\t\t}\n\n\t\texportString(output, 'hex-map.json');\n\t}\n\n\t// taken from https://github.com/mrdoob/three.js/blob/master/editor/js/Menubar.File.js\n\tvar link = document.createElement('a');\n\tlink.style.display = 'none';\n\tdocument.body.appendChild(link);\n\n\tfunction exportString(output, filename) {\n\t\tvar blob = new Blob([output], {type: 'text/plain'});\n\t\tvar objectURL = URL.createObjectURL(blob);\n\n\t\tlink.href = objectURL;\n\t\tlink.download = filename || 'data.json';\n\t\tlink.target = '_blank';\n\n\t\tvar evt = document.createEvent('MouseEvents');\n\t\tevt.initMouseEvent(\n\t\t\t'click', true, false, window, 0, 0, 0, 0, 0,\n\t\t\tfalse, false, false, false, 0, null\n\t\t);\n\t\tlink.dispatchEvent(evt);\n\t}\n});\n","/*\n\tTranslates the MouseCaster's events into more relevant data that the editor uses.\n*/\ndefine('Input', function() {\n\tvar tower = require('tower');\n\tvar nexus = require('nexus');\n\tvar keyboard = require('keyboard');\n\n\tvar Input = function(scene, mouse) {\n\t\tthis.mouse = mouse;\n\t\tthis.mouse.signal.add(this.onMouse, this);\n\n\t\tthis.mouseDelta = new THREE.Vector3();\n\t\tthis.mousePanMinDistance = 0.1;\n\t\tthis.editorWorldPos = new THREE.Vector3(); // current grid position of mouse\n\n\t\tthis.overTile = null;\n\n\t\tthis._travel = 0;\n\n\t\t/*keyboard.signal.add(function(type, code) {\n\t\t\tif (type === keyboard.eventType.DOWN) {\n\t\t\t\tif (code === keyboard.code.SHIFT) nexus.scene.controls.enabled = false;\n\t\t\t\telse if (code === keyboard.code.A) {\n\t\t\t\t\tnexus.scene.focusOn(nexus.board.tileGroup); // doesn't work??\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (code === keyboard.code.SHIFT) nexus.scene.controls.enabled = true;\n\t\t\t}\n\t\t}, this);*/\n\t};\n\n\tInput.prototype = {\n\t\tupdate: function() {\n\t\t\tvar hit = this.mouse.allHits[0];\n\t\t\tif (hit) { // fun fact, 3 references are faster than 1 function call\n\t\t\t\tthis.editorWorldPos.x = hit.point.x;\n\t\t\t\tthis.editorWorldPos.y = hit.point.y;\n\t\t\t\tthis.editorWorldPos.z = hit.point.z;\n\t\t\t}\n\t\t\tvar dx = this.mouseDelta.x - this.mouse.screenPosition.x;\n\t\t\tvar dy = this.mouseDelta.y - this.mouse.screenPosition.y;\n\t\t\tthis._travel += Math.sqrt(dx * dx + dy * dy); // fun fact, sqrt is on of the most expensive math ops\n\n\t\t\tif (keyboard.ctrl) {\n\t\t\t\tnexus.scene.controls.enabled = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnexus.scene.controls.enabled = false;\n\t\t\t}\n\t\t},\n\n\t\tonMouse: function(type, obj) {\n\t\t\tvar hit;\n\t\t\tif (this.mouse.allHits && this.mouse.allHits[0]) {\n\t\t\t\thit = this.mouse.allHits[0];\n\t\t\t}\n\t\t\tswitch (type) {\n\t\t\t\tcase vg.MouseCaster.WHEEL:\n\t\t\t\t\ttower.userAction.dispatch(vg.MouseCaster.WHEEL, this.overTile, obj);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase vg.MouseCaster.OVER:\n\t\t\t\t\tif (obj) {\n\t\t\t\t\t\tthis.overTile = obj;\n\t\t\t\t\t}\n\t\t\t\t\ttower.userAction.dispatch(vg.MouseCaster.OVER, this.overTile, hit);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase vg.MouseCaster.OUT:\n\t\t\t\t\tthis.overTile = null;\n\t\t\t\t\ttower.userAction.dispatch(vg.MouseCaster.OUT, this.overTile, hit);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase vg.MouseCaster.DOWN:\n\t\t\t\t\tthis.mouseDelta.copy(this.mouse.screenPosition);\n\t\t\t\t\ttower.userAction.dispatch(vg.MouseCaster.DOWN, this.overTile, hit);\n\t\t\t\t\tthis._travel = 0;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase vg.MouseCaster.UP:\n\t\t\t\t\tif (this._travel > this.mousePanMinDistance) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\ttower.userAction.dispatch(vg.MouseCaster.UP, this.overTile, hit);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase vg.MouseCaster.CLICK:\n\t\t\t\t\ttower.userAction.dispatch(vg.MouseCaster.CLICK, this.overTile, hit);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t};\n\n\treturn Input;\n});\n","/*\n\t2D plane that the user moves mouse around on in order to build maps. Provides a working plane to navigate, and a visual aid for tile placement.\n\n\t@author Corey Birnbaum https://github.com/vonWolfehaus/\n */\ndefine('EditorPlane', function() {\n\n\tfunction EditorPlane(scene, grid, mouse) {\n\t\tthis.nexus = require('nexus');\n\t\tthis.tower = require('tower');\n\n\t\tthis.mesh = null;\n\t\tthis.planeMaterial = new THREE.MeshBasicMaterial({\n\t\t\tcolor: 0xffffff,\n\t\t\tside: THREE.DoubleSide\n\t\t});\n\n\t\tthis.hoverMaterial = new THREE.MeshBasicMaterial({\n\t\t\tcolor: 0x1aaeff,\n\t\t\tside: THREE.DoubleSide\n\t\t});\n\n\t\tthis.scene = scene;\n\t\tthis.grid = grid;\n\t\tthis.mouse = mouse;\n\t\tthis.board = this.nexus.board;\n\n\t\tthis.hoverMesh = null; // mesh that hovers over empty cells\n\t\tthis.tileHoverMesh = null; // mesh that hovers over tiles\n\n\t\tthis.planeSize = grid.size + 5;\n\t\tthis._actualSize = this.planeSize * (vg.SQRT3 * 0.5) * this.grid._cellWidth + this.grid.cellSize;\n\n\t\tthis.tower.userAction.add(function onUserAction(type, overTile, data) {\n\t\t\tswitch (type) {\n\t\t\t\tcase vg.MouseCaster.OVER:\n\t\t\t\t\tif (overTile && !mouse.down) {\n\t\t\t\t\t\tthis.tileHoverMesh.visible = true;\n\t\t\t\t\t\tthis.tileHoverMesh.position.copy(overTile.position);\n\t\t\t\t\t\tthis.tileHoverMesh.position.y += 1;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase vg.MouseCaster.OUT:\n\t\t\t\t\tthis.tileHoverMesh.visible = false;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}, this);\n\n\n\t\tthis.tower.tileAction.add(function onUserAction(type, overTile) {\n\t\t\tif (type === this.tower.TILE_CHANGE_HEIGHT) {\n\t\t\t\t// console.log(overTile.position)\n\t\t\t\tthis.tileHoverMesh.position.copy(overTile.position);\n\t\t\t\tthis.tileHoverMesh.position.y += 1;\n\t\t\t}\n\t\t}, this);\n\t}\n\n\tEditorPlane.prototype = {\n\n\t\tupdatePlane: function(color, size) {\n\t\t\tvar newColor = parseInt(color.replace(/^#/, ''), 16);\n\t\t\tthis.planeMaterial.color.setHex(newColor);\n\n\t\t\tif (this.planeSize !== size) {\n\t\t\t\tthis.planeSize = size;\n\t\t\t\tswitch (this.grid.type) {\n\t\t\t\t\tcase vg.HEX:\n\t\t\t\t\t\tthis._actualSize = size * (vg.SQRT3 * 0.5) * this.grid._cellWidth + this.grid.cellSize;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase vg.SQR:\n\t\t\t\t\t\tthis._actualSize = size * this.grid.cellSize * 2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tthis.generate();\n\t\t\t}\n\t\t},\n\n\t\tgenerate: function() {\n\t\t\tvar geometry;\n\t\t\tif (this.mesh && this.mesh.parent) {\n\t\t\t\tthis.mesh.parent.remove(this.mesh);\n\t\t\t\tthis.mesh.geometry.dispose();\n\t\t\t}\n\n\t\t\tthis.nexus.gen.makeOverlay(this.planeSize);\n\n\t\t\tswitch (this.grid.type) {\n\t\t\t\tcase vg.HEX:\n\t\t\t\t\tgeometry = new THREE.CircleGeometry(this._actualSize, 6);\n\t\t\t\t\tbreak;\n\t\t\t\tcase vg.SQR:\n\t\t\t\t\tgeometry = new THREE.PlaneGeometry(this._actualSize, this._actualSize, 1, 1);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('[EditorPlane.generate] no grid type set');\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tthis.mesh = new THREE.Mesh(geometry, this.planeMaterial);\n\t\t\tthis.mesh.rotation.x = 90 * vg.DEG_TO_RAD;\n\t\t\tthis.mesh.position.y = -0.5;\n\t\t\tif (this.grid.type === vg.HEX) {\n\t\t\t\tthis.mesh.rotation.z = 90 * vg.DEG_TO_RAD;\n\t\t\t}\n\t\t\tthis.scene.add(this.mesh);\n\n\t\t\t// make hover mesh\n\t\t\tif (this.hoverMesh && this.hoverMesh.parent) {\n\t\t\t\tthis.hoverMesh.parent.remove(this.hoverMesh);\n\t\t\t}\n\t\t\tthis.hoverMesh = this.nexus.gen.geoGen.makeTilePoly(this.hoverMaterial);\n\t\t\tthis.nexus.scene.container.add(this.hoverMesh);\n\n\t\t\tif (this.tileHoverMesh && this.tileHoverMesh.parent) {\n\t\t\t\tthis.tileHoverMesh.parent.remove(this.tileHoverMesh);\n\t\t\t}\n\t\t\tthis.tileHoverMesh = this.nexus.gen.geoGen.makeTileHighlight(this.hoverMaterial);\n\t\t\tthis.nexus.scene.container.add(this.tileHoverMesh);\n\t\t\tthis.tileHoverMesh.visible = false;\n\t\t},\n\n\t\tupdate: function() {\n\t\t\tif (this.mouse.allHits.length && !this.mouse.pickedObject) {\n\t\t\t\tvar cell = this.grid.pixelToCell(this.nexus.input.editorWorldPos);\n\t\t\t\tthis.hoverMesh.position.copy(this.grid.cellToPixel(cell));\n\t\t\t\tthis.hoverMesh.position.y += 0.05;\n\t\t\t\tthis.hoverMesh.visible = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.hoverMesh.visible = false;\n\t\t\t}\n\t\t}\n\t};\n\n\treturn EditorPlane;\n});\n"],"sourceRoot":"/source/"}