{"version":3,"sources":["components/tool-menu.js","components/tileset-menu.js","components/preview-canvas.js","components/lightbox.js","components/form-newtileset.js","components/form-newtile.js","components/form-newmap.js","components/form-map-settings.js","components/flyout.js","components/app-menu.js","ui.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxHA;AACA;AACA;AACA;AACA;AACA;AACA;ACNA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ui.min.js","sourcesContent":["riot.tag2('tool-menu', '<ul class=\"btn-list tool-menu__list\"> <li class=\"tool-menu__item {active: active}\" each=\"{items}\" data=\"{this}\" title=\"{displayText}\" onclick=\"{parent.selectTool}\"> <img riot-src=\"images/{icon}\"> </li> </ul>', '', '', function(opts) {\n\tthis.items = [\n\t\t{\n\t\t\tname: ui.Tools.ADD_TILE,\n\t\t\tdisplayText: 'Add Tile',\n\t\t\ticon: 'add-tile.png',\n\t\t\tactive: true\n\t\t},\n\t\t{\n\t\t\tname: ui.Tools.REMOVE_TILE,\n\t\t\tdisplayText: 'Remove Tile',\n\t\t\ticon: 'remove-tile.png',\n\t\t\tactive: false\n\t\t},\n\t\t{\n\t\t\tname: ui.Tools.WALK_TILE,\n\t\t\tdisplayText: 'Set Tile Walkability',\n\t\t\ticon: 'set-walkability.png',\n\t\t\tactive: false\n\t\t},\n\t];\n\n\tthis.selectTool = function(evt) {\n\t\tvar item = evt.item;\n\t\tif (ui.activeTool.name === item.name) {\n\t\t\treturn;\n\t\t}\n\n\t\tui.activeTool.active = false;\n\n\t\titem.active = true;\n\t\tui.activeTool = item;\n\n\t\tui.trigger(ui.Events.TOOL_CHANGE, item.name);\n\t\tthis.update();\n\t}.bind(this)\n\n\tthis.on('mount', function() {\n\t\tui.activeTool = this.items[0];\n\t\tui.trigger(ui.Events.TOOL_CHANGE, ui.activeTool.name);\n\t});\n}, '{ }');","riot.tag2('tileset-menu', '<ul class=\"btn-list tilesets__list\"> <li class=\"tilesets__item {active: active}\" each=\"{tiles}\" onclick=\"{selectTile}\" data-slotid=\"{slotid}\"> <img class=\"tilesets__item-preview\" riot-src=\"{preview}\"> </li> <li class=\"tilesets__item\" onclick=\"{addTile}\" title=\"Add a new tile to this set\"> <i class=\"icon-plus\"></i> </li> </ul> <div class=\"tilesets__preview\"> <preview-canvas></preview-canvas> <button onclick=\"{onEdit}\">Edit</button> <button onclick=\"{onDelete}\">Delete</button> </div>', '', 'class=\"flex-container\"', function(opts) {\n\tvar self = this;\n\n\tthis.tiles = [\n\t\t{\n\t\t\tactive: false,\n\t\t\tslotid: 0,\n\t\t\tpreview: null\n\t\t}\n\t];\n\n\tthis.onEdit = function() {\n\t\tvar el = document.getElementById('js-overlay-newtile');\n\t\tel.classList.remove('hidden');\n\t\tui.tileEditMode = true;\n\t\triot.update();\n\t}.bind(this)\n\n\tthis.onDelete = function() {\n\t\tvar i = ui.activeTile.slotid;\n\n\t\tthis.tiles.splice(i, 1);\n\t\tui.activeTile = null;\n\n\t\t\tthis.selectTile({item: this.tiles[i]});\n\n\t}.bind(this)\n\n\tthis.newTile = function(evt) {\n\n\t\tvar slot = this.tiles.length;\n\n\t\tif (evt === ui.Events.EDIT_TILE) {\n\n\t\t\tslot = ui.activeTile.slotid;\n\t\t}\n\n\t\tvar tile = {\n\t\t\tactive: false,\n\t\t\tslotid: slot,\n\t\t\tpreview: null\n\t\t};\n\t\tthis.tiles.push(tile);\n\n\t\tsetTimeout(function() {\n\t\t\tui.trigger(ui.Events.GEN_TILE_PREVIEW, tile);\n\t\t}, 65);\n\t}.bind(this)\n\n\tthis.addTile = function() {\n\t\tvar el = document.getElementById('js-overlay-newtile');\n\t\tel.classList.remove('hidden');\n\t\tui.tileEditMode = false;\n\t\triot.update();\n\t}.bind(this)\n\n\tthis.selectTile = function(evt) {\n\t\tvar item = evt.item;\n\n\t\tif (ui.activeTile) {\n\t\t\tif (ui.activeTile.slotid === item.slotid) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tui.activeTile.active = false;\n\t\t}\n\n\t\titem.active = true;\n\t\tui.activeTile = item;\n\n\t\tui.trigger(ui.Events.SELECT_TILE, item.slotid);\n\t\tthis.update();\n\t}.bind(this)\n\n\tthis.open = function(tool) {\n\t\tvar el = document.getElementById('js-flyout-tilesets');\n\t\tif (tool === ui.Tools.ADD_TILE) {\n\t\t\tel.classList.remove('hidden');\n\t\t}\n\t\telse {\n\t\t\tel.classList.add('hidden');\n\t\t}\n\t}.bind(this)\n\n\tthis.on('mount', function(evt) {\n\n\t\tthis.open(ui.Tools.ADD_TILE);\n\t\tthis.selectTile({item: this.tiles[0]});\n\t});\n\n\tui.on(ui.Events.TOOL_CHANGE, this.open);\n\tui.on(ui.Events.NEW_TILE+' '+ui.Events.EDIT_TILE, this.newTile);\n}, '{ }');","riot.tag2('preview-canvas', '<canvas id=\"preview\"></canvas> <span class=\"preview__info\"> {meshSize} </span>', '', '', function(opts) {\n\tthis.renderer = null;\n\tthis.scene = null;\n\tthis.camera = null;\n\tthis.controls = null;\n\tthis.meshSize = '';\n\n\tthis.roundTenths = function(val) {\n\t\treturn Math.round(val * 10) / 10;\n\t}.bind(this)\n\n\tthis.addMesh = function(obj) {\n\t\tvar o = this.scene.children[0];\n\t\twhile (o) {\n\t\t\tthis.scene.remove(o);\n\t\t\to = this.scene.children[0];\n\t\t}\n\t\tthis.scene.add(obj);\n\n\t\tvar box = new THREE.Box3().setFromObject(obj);\n\t\tvar size = box.size();\n\t\tthis.meshSize = 'Size {x:'+this.roundTenths(size.x)+' y:'+this.roundTenths(size.y)+' z:'+this.roundTenths(size.z)+'}';\n\n\t\tvar fov = this.camera.fov * vg.DEG_TO_RAD;\n\t\tvar dist = Math.abs(Math.min(size.x, size.z) / Math.sin(fov / 2)) / 2;\n\t\tconsole.log('Camera distance:', dist);\n\n\t\tthis.camera.position.set(0, dist, dist);\n\t\tthis.update();\n\t}.bind(this)\n\n\tthis.showTile = function(color) {\n\n\t\tif (ui.activeTileMesh) {\n\t\t\tthis.addMesh(ui.activeTileMesh);\n\t\t}\n\t\telse {\n\n\t\t}\n\t}.bind(this)\n\n\tthis.genPreview = function(tile) {\n\t\tvar canvas = document.getElementById('preview');\n\t\ttile.preview = canvas.toDataURL('image/png');\n\t\triot.update();\n\t}.bind(this)\n\n\tthis.updatePreview = function() {\n\t\tthis.controls.update();\n\t\tthis.renderer.render(this.scene, this.camera);\n\t\tif (!window.require) {\n\n\t\t\trequestAnimationFrame(this.updatePreview);\n\t\t}\n\t}.bind(this)\n\n\tthis.toggle = function(tool) {\n\t\tif (tool === ui.Tools.ADD_TILE) {\n\n\t\t\tui.previewUpdate = this.updatePreview;\n\t\t}\n\t\telse {\n\t\t\tui.previewUpdate = null;\n\t\t}\n\t}.bind(this)\n\n\tthis.on('mount', function() {\n\t\tvar width = 136;\n\t\tvar height = 150;\n\n\t\tthis.renderer = new THREE.WebGLRenderer({\n\t\t\tcanvas: document.getElementById('preview'),\n\t\t\talpha: true,\n\t\t\tantialias: true\n\t\t});\n\t\tthis.renderer.setClearColor('#fff', 0);\n\t\tthis.renderer.sortObjects = false;\n\n\t\tthis.scene = new THREE.Scene();\n\t\tthis.scene.add(new THREE.AmbientLight(0xffffff));\n\t\tvar light = new THREE.DirectionalLight(0xffffff);\n\t\tlight.position.set(-1, 1, -1).normalize();\n\t\tthis.scene.add(light);\n\n\t\tthis.renderer.setPixelRatio(window.devicePixelRatio);\n\t\tthis.renderer.setSize(width, height);\n\n\t\tthis.camera = new THREE.PerspectiveCamera(50, width / height, 1, 5000);\n\t\tthis.camera.position.set(0, 20, 100);\n\n\t\tthis.controls = new THREE.OrbitControls(this.camera, this.renderer.domElement);\n\t\tthis.controls.minDistance = 1;\n\t\tthis.controls.maxDistance = 10000;\n\t\tthis.controls.zoomSpeed = 2;\n\n\t\tthis.controls.maxPolarAngle = (Math.PI / 2) - 0.01;\n\n\t\tui.previewUpdate = this.updatePreview;\n\n\t\tif (!window.require) {\n\t\t\trequestAnimationFrame(this.updatePreview);\n\n\t\t\tvar geometry = new THREE.BoxGeometry(20, 20, 20);\n\t\t\tvar material = new THREE.MeshPhongMaterial({\n\t\t\t\tcolor: 0x156289,\n\t\t\t\temissive: 0x072534,\n\t\t\t\tshading: THREE.FlatShading\n\t\t\t});\n\t\t\tvar cube = new THREE.Mesh(geometry, material);\n\t\t\tthis.scene.add(cube);\n\t\t}\n\t});\n\n\tthis.on('error', function(evt) {\n\t\tconsole.error(evt);\n\t});\n\n\tui.on(ui.Events.TOOL_CHANGE, this.toggle);\n\tui.on(ui.Events.NEW_TILE+' '+ui.Events.EDIT_TILE, this.showTile);\n\tui.on(ui.Events.GEN_TILE_PREVIEW, this.genPreview);\n}, '{ }');","riot.tag2('lightbox', '<div class=\"lightbox__overlay absolute\" onclick=\"{dismiss}\"></div> <div class=\"lightbox__panel flex-container flex-col\"> <yield></yield> <button class=\"overlay__close-btn\" onclick=\"{dismiss}\"><i class=\"icon-cancel\"></i></button> </div>', '', 'class=\"flex-container absolute hidden\"', function(opts) {\n\tthis.dismiss = function() {\n\t\tthis.root.classList.add('hidden');\n\t}.bind(this)\n\n\tui.on(ui.Events.HIDE_OVERLAY, this.dismiss);\n}, '{ }');","riot.tag2('form-newtileset', '<form onsubmit=\"{onCreate}\"> <label for=\"tilesetName\">Name:</label> <input type=\"text\" name=\"tilesetName\"> <button onclick=\"{onCreate}\">Create</button> </form>', '', 'class=\"flex-container\"', function(opts) {\n\tthis.onCreate = function() {\n\t\tui.trigger(ui.Events.NEW_TILESET, this.tilesetName.value);\n\t\tui.trigger(ui.Events.HIDE_OVERLAY);\n\t}.bind(this)\n}, '{ }');","riot.tag2('form-newtile', '<label> <input type=\"checkbox\" name=\"generateTile\"> Generate </label> <span if=\"{!generateTile.checked}\"> <label> Map: <input type=\"file\" accept=\".jpg\" name=\"tileFile\"> </label> <label> Normal map: <input type=\"file\" accept=\".jpg\" name=\"tileFile\"> </label> <label> Specular map: <input type=\"file\" accept=\".jpg\" name=\"tileFile\"> </label> </span> <label if=\"{generateTile.checked}\"> Color: <input name=\"tileColor\" type=\"color\"> </label> <span if=\"{showMessage}\" class=\"form-newtile__error\"> {warningMessage} </span> <button onclick=\"{onCreate}\">{ui.tileEditMode ? \\'Change\\' : \\'Create\\'} Tile</button>', '', 'class=\"flex-container\"', function(opts) {\n\tthis.wrongFileType = false;\n\tthis.showMessage = false;\n\tthis.warningMessage = '';\n\tthis.daeLoader = new THREE.ColladaLoader();\n\n\tthis.onModelLoad = function(obj) {\n\t\tui.activeTileMesh = obj.scene;\n\t\tthis.onCreate();\n\t}.bind(this)\n\n\tthis.onCreate = function() {\n\t\tvar file = this.tileFile.value;\n\t\tvar color = this.tileColor.value;\n\n\t\tif (this.wrongFileType) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!file && !this.generateTile.checked) {\n\t\t\tthis.warningMessage = 'Please choose to generate a tile, or upload a DAE (Collada) file.';\n\t\t\tthis.showMessage = true;\n\t\t\tthis.update();\n\t\t\treturn false;\n\t\t}\n\n\t\tif (ui.tileEditMode) {\n\t\t\tui.trigger(ui.Events.EDIT_TILE, color);\n\t\t}\n\t\telse {\n\t\t\tui.trigger(ui.Events.NEW_TILE, color);\n\t\t}\n\n\t\tui.trigger(ui.Events.HIDE_OVERLAY);\n\t}.bind(this)\n\n\tthis.on('mount', function() {\n\t\tvar self = this;\n\t\tthis.generateTile.onchange = function(evt) {\n\t\t\tui.activeTileMesh = null;\n\t\t\tself.showMessage = false;\n\t\t\tself.update();\n\t\t};\n\n\t\tthis.tileFile.onchange = function(evt) {\n\t\t\tif (self.tileFile.value.split('.')[1] !== 'dae') {\n\t\t\t\tself.wrongFileType = true;\n\t\t\t\tself.warningMessage = 'This editor only takes .DAE (Collada) models.';\n\t\t\t}\n\t\t\telse {\n\t\t\t\tself.wrongFileType = false;\n\t\t\t}\n\t\t\tself.showMessage = self.wrongFileType;\n\t\t\tself.update();\n\n\t\t\tif (self.showMessage) return false;\n\n\t\t\tvar file = this.files[0];\n\t\t\tif (!file) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tui.activeTileMesh = null;\n\n\t\t\tvar reader = new FileReader();\n\t\t\treader.onload = function(e) {\n\t\t\t\ttry {\n\t\t\t\t\tself.daeLoader.parse(e.target.result, self.onModelLoad, './assets');\n\t\t\t\t}\n\t\t\t\tcatch (err) {\n\t\t\t\t\tself.showMessage = true;\n\t\t\t\t\tself.warningMessage = 'There was an error parsing the Collada file: \"'+err+'\"';\n\t\t\t\t\tself.update();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\treader.readAsText(file);\n\t\t};\n\t});\n}, '{ }');","riot.tag2('form-newmap', '<span> <label for=\"mapsize\">Map size:</label> <input name=\"mapsize\" value=\"5\" min=\"1\" max=\"{maxMapSize}\" type=\"number\"> </span> <span> <label for=\"cellsize\">Cell size:</label> <input name=\"cellsize\" value=\"10\" min=\"1\" type=\"number\"> </span> <span> <label for=\"heightstep\">Height step:</label> <input name=\"heightstep\" value=\"3\" min=\"1\" type=\"number\"> </span> <span> <label for=\"Grid type\">Grid type:</label> <select name=\"gridtype\"> <option value=\"hex\">Hexagon</option> <option value=\"square\">Square</option> </select> </span> <span> <button onclick=\"{onCreate}\">Create New Map</button> </span>', '', 'class=\"flex-container\"', function(opts) {\n\tthis.maxMapSize = 1000;\n\n\tthis.onCreate = function() {\n\t\tif (this.mapsize.value > this.maxMapSize) {\n\t\t\tthis.mapsize.value = this.maxMapSize;\n\t\t}\n\n\t\tui.trigger(ui.Events.NEW_MAP, {\n\t\t\tmapSize: this.mapsize.value,\n\t\t\tcellSize: this.cellsize.value,\n\t\t\theightStep: this.heightstep.value,\n\t\t\ttype: this.gridtype.value\n\t\t});\n\n\t\tui.trigger(ui.Events.HIDE_OVERLAY);\n\t\tui.trigger(ui.Events.HIDE_FLYOUT);\n\t}.bind(this)\n}, '{ }');","riot.tag2('form-map-settings', '<span> <label for=\"cellSize\">Cell size:</label> <input name=\"cellSize\" value=\"10\" min=\"1\" type=\"number\"> <button onclick=\"{onMapUpdate}\">Update Map</button> </span> <span> <label for=\"heightStep\">Height step:</label> <input name=\"heightStep\" value=\"3\" min=\"1\" type=\"number\"> <button onclick=\"{onMapUpdate}\">Update Map</button> </span> <div class=\"form-group\"> <span> <label for=\"planeSize\">Plane size:</label> <input name=\"planeSize\" value=\"50\" min=\"1\" type=\"number\"> </span> <br> <span> <label for=\"planeColor\">Plane color:</label> <input name=\"planeColor\" value=\"#ffffff\" type=\"color\"> </span> <br> <button onclick=\"{onMapUpdate}\">Update Plane</button> </div> <button onclick=\"{onNewMap}\" style=\"background-color: #fd0; color: black\">New Map</button>', '', 'class=\"flex-container\"', function(opts) {\n\tthis.maxMapSize = 1000;\n\n\tthis.onNewMap = function() {\n\t\tvar el = document.getElementById('js-overlay-newmap');\n\t\tvar newmapTag = el._tag.tags['form-newmap'];\n\t\tnewmapTag.cellsize.value = this.cellSize.value;\n\t\tnewmapTag.heightstep.value = this.heightStep.value;\n\n\t\tel.classList.remove('hidden');\n\n\t\triot.update();\n\t}.bind(this)\n\n\tthis.updateSettings = function(settings) {\n\t\tthis.cellSize.value = settings.cellSize;\n\t\tthis.heightStep.value = settings.heightStep;\n\t\tthis.planeSize.value = settings.planeSize;\n\t\tthis.planeColor.value = settings.planeColor;\n\t\tthis.update();\n\t}.bind(this)\n\n\tthis.onMapUpdate = function() {\n\t\tui.trigger(ui.Events.UPDATE_SETTINGS, {\n\t\t\tcellSize: parseInt(this.cellSize.value),\n\t\t\theightStep: parseFloat(this.heightStep.value),\n\t\t\tplaneSize: parseInt(this.planeSize.value),\n\t\t\tplaneColor: this.planeColor.value,\n\t\t});\n\t}.bind(this)\n\n\tthis.on('mount unmount', function(evt) {\n\t\tif (evt === 'mount') {\n\t\t\tui.on(ui.Events.UPDATE_SETTINGS, this.updateSettings);\n\t\t}\n\t\telse if (evt === 'unmount') {\n\t\t\tui.off(ui.Events.UPDATE_SETTINGS, this.updateSettings);\n\t\t}\n\t});\n}, '{ }');","riot.tag2('flyout', '<div class=\"flyout__panel flex-container\"> <yield></yield> <button if=\"{!opts.hideclose}\" class=\"overlay__close-btn {opts.side}\" onclick=\"{dismiss}\"><i class=\"icon-cancel\"></i></button> </div>', '', 'class=\"flex-container {opts.side} hidden\"', function(opts) {\n\tthis.dismiss = function() {\n\t\tif (ui.activeTool.name === ui.Tools.ADD_TILE && this.tags['tileset-menu']) {\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis.root.classList.add('hidden');\n\t}.bind(this)\n\n\tui.on(ui.Events.HIDE_FLYOUT, this.dismiss);\n}, '{ }');","riot.tag2('app-menu', '<ul class=\"btn-list app-menu__list\"> <li class=\"app-menu__item\" onclick=\"{onClick}\" data-action=\"settings\"> <i class=\"icon-cogs\"></i>Map </li> <li class=\"app-menu__item\" onclick=\"{onClick}\" data-action=\"saveMap\"> <i class=\"icon-download\"></i>Save </li> <li class=\"app-menu__item\" onclick=\"{onClick}\" data-action=\"loadMap\"> <i class=\"icon-cw\"></i>Load </li> <li class=\"app-menu__item\" onclick=\"{onClick}\" data-action=\"showHelp\"> <i class=\"icon-help\"></i>Help </li> </ul>', '', '', function(opts) {\n\tthis.onClick = function(evt) {\n\t\tvar action = evt.target.dataset.action;\n\n\t\tswitch (action) {\n\t\t\tcase 'settings':\n\t\t\t\tvar el = document.getElementById('js-flyout-settings');\n\t\t\t\tif (el.classList.contains('hidden')) {\n\t\t\t\t\tel.classList.remove('hidden');\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tel.classList.add('hidden');\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'saveMap':\n\t\t\t\tui.trigger(ui.Events.SAVE_MAP);\n\t\t\t\tbreak;\n\t\t\tcase 'loadMap':\n\t\t\t\tui.trigger(ui.Events.LOAD_MAP);\n\t\t\t\tbreak;\n\t\t\tcase 'showHelp':\n\t\t\t\tvar el = document.getElementById('js-overlay-help');\n\t\t\t\tel.classList.remove('hidden');\n\t\t\t\tbreak;\n\t\t}\n\t}.bind(this)\n}, '{ }');","var ui = {\n\tactiveTool: null, // Tools.*\n\tactiveTile: null, // ui object describing the tile\n\tactiveTileMesh: null, // what's shown in the preview scene\n\tpreviewUpdate: null, // function that should get called every frame to update the preview scene\n\ttileEditMode: false,\n\tdata: null, // a link to the app data store (require('data'))\n\n\tEvents: {\n\t\tTOOL_CHANGE: 'tool-change',\n\t\tUPDATE_SETTINGS: 'update-map-settings',\n\t\tSELECT_TILE: 'select-tile',\n\t\tNEW_TILESET: 'new-tileset',\n\t\tNEW_TILE: 'new-tile',\n\t\tEDIT_TILE: 'edit-tile',\n\t\tGEN_TILE_PREVIEW: 'gen-tile-pre',\n\t\tNEW_MAP: 'new-map',\n\t\tSAVE_MAP: 'save-map',\n\t\tLOAD_MAP: 'load-map',\n\t\tHIDE_OVERLAY: 'ui-hide-overlay',\n\t\tHIDE_FLYOUT: 'ui-hide-flyout'\n\t},\n\n\tTools: {\n\t\tADD_TILE: 'add-tile',\n\t\tREMOVE_TILE: 'remove-tile',\n\t\tWALK_TILE: 'set-tile-walk',\n\t}\n};\n\nriot.observable(ui);\n\nriot.mount('tool-menu');\nriot.mount('app-menu');\nriot.mount('flyout');\nriot.mount('lightbox');\n"],"sourceRoot":"/source/"}