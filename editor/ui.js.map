{"version":3,"sources":["components/tool-menu.js","components/tileset-menu.js","components/preview-canvas.js","components/lightbox.js","components/form-newtileset.js","components/form-newtile.js","components/form-newmap.js","components/form-map-settings.js","components/flyout.js","components/app-menu.js","ui.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzrHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;ACNA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ui.js","sourcesContent":["riot.tag2('tool-menu', '<ul class=\"btn-list tool-menu__list\"> <li class=\"tool-menu__item {active: active}\" each=\"{items}\" data=\"{this}\" title=\"{displayText}\" onclick=\"{parent.selectTool}\"> <img riot-src=\"images/{icon}\"> </li> </ul>', '', '', function(opts) {\n\tthis.items = [\n\t\t{\n\t\t\tname: 'ADD_TILE',\n\t\t\tdisplayText: 'Add Tile',\n\t\t\ticon: 'add-tile.png',\n\t\t\tactive: true\n\t\t},\n\t\t{\n\t\t\tname: 'REMOVE_TILE',\n\t\t\tdisplayText: 'Remove Tile',\n\t\t\ticon: 'remove-tile.png',\n\t\t\tactive: false\n\t\t},\n\t\t{\n\t\t\tname: 'WALK_TILE',\n\t\t\tdisplayText: 'Set Tile Walkability',\n\t\t\ticon: 'set-walkability.png',\n\t\t\tactive: false\n\t\t},\n\t];\n\n\tthis.selectTool = function(evt) {\n\t\tvar item = evt.item;\n\t\tif (ui.activeTool.name === item.name) {\n\t\t\treturn;\n\t\t}\n\n\t\tui.activeTool.active = false;\n\n\t\titem.active = true;\n\t\tui.activeTool = item;\n\n\t\tui.trigger(ui.Events.TOOL_CHANGE, ui.Tools[item.name]);\n\t\tthis.update();\n\t}.bind(this)\n\n\tthis.on('mount', function() {\n\t\tui.activeTool = this.items[0];\n\t\tui.trigger(ui.Events.TOOL_CHANGE, ui.Tools[ui.activeTool]);\n\t});\n}, '{ }');","riot.tag2('tileset-menu', '<form> <label for=\"tilesets\">Tileset:</label> <select name=\"tilesets\" onchange=\"{selectTileset}\"> <option each=\"{name, value in sets}\" value=\"{name}\">{name}</option> </select> <span class=\"tilesets__add\" onclick=\"{addTileset}\" title=\"Add a new tileset\"> <i class=\"icon-plus\"></i> </span> </form> <ul class=\"btn-list tilesets__list\"> <li class=\"tilesets__item {active: active}\" each=\"{items}\" onclick=\"{selectTile}\" data-slotid=\"{slotid}\"> <img if=\"{preview}\" src=\"\"> </li> <li class=\"tilesets__item\" onclick=\"{addTile}\" title=\"Add a new tile to this set\"> <i class=\"icon-plus\"></i> </li> </ul> <div class=\"tilesets__preview\"> <preview-canvas></preview-canvas> <button onclick=\"{onEdit}\">Change Tile</button> </div>', '', 'class=\"flex-container\"', function(opts) {\n\tthis.sets = {\n\t\t'default': [\n\t\t\t{\n\t\t\t\tactive: false,\n\t\t\t\tslotid: 0,\n\t\t\t\tpreview: null\n\t\t\t},\n\t\t\t{\n\t\t\t\tactive: false,\n\t\t\t\tslotid: 1,\n\t\t\t\tpreview: null\n\t\t\t},\n\t\t\t{\n\t\t\t\tactive: false,\n\t\t\t\tslotid: 2,\n\t\t\t\tpreview: null\n\t\t\t},\n\t\t\t{\n\t\t\t\tactive: false,\n\t\t\t\tslotid: 3,\n\t\t\t\tpreview: null\n\t\t\t},\n\t\t\t{\n\t\t\t\tactive: false,\n\t\t\t\tslotid: 4,\n\t\t\t\tpreview: null\n\t\t\t},\n\t\t\t{\n\t\t\t\tactive: false,\n\t\t\t\tslotid: -1,\n\t\t\t\tpreview: null\n\t\t\t},\n\t\t],\n\t\t'stuff': [\n\t\t\t{\n\t\t\t\tactive: false,\n\t\t\t\tslotid: 0,\n\t\t\t\tpreview: null\n\t\t\t},\n\t\t]\n\t};\n\n\tthis.items = this.sets.default;\n\n\tthis.onEdit = function() {\n\n\t}.bind(this)\n\n\tthis.newTileset = function(name) {\n\n\t\tthis.sets[name] = [];\n\t\tthis.selectTileset({target:{value:name}});\n\t\tthis.tilesets.value = name;\n\t\tthis.update();\n\t}.bind(this)\n\n\tthis.newTile = function() {\n\n\t}.bind(this)\n\n\tthis.addTileset = function() {\n\t\tvar el = document.getElementById('js-overlay-newtileset');\n\t\tel.classList.remove('hidden');\n\t}.bind(this)\n\n\tthis.addTile = function() {\n\t\tvar el = document.getElementById('js-overlay-newtile');\n\t\tel.classList.remove('hidden');\n\t}.bind(this)\n\n\tthis.selectTileset = function(evt) {\n\t\tvar name = evt.target.value;\n\t\tthis.items = this.sets[name];\n\t\tthis.update();\n\t}.bind(this)\n\n\tthis.selectTile = function(evt) {\n\t\tvar item = evt.item;\n\t\tif (ui.activeTile.slotid === -1) {\n\t\t\tthis.addTile();\n\t\t\treturn;\n\t\t}\n\n\t\tif (ui.activeTile.slotid === item.slotid) {\n\t\t\treturn;\n\t\t}\n\n\t\tui.activeTile.active = false;\n\n\t\titem.active = true;\n\t\tui.activeTile = item;\n\n\t\tui.trigger(ui.Events.SELECT_TILE, item.slotid);\n\t\tthis.update();\n\t}.bind(this)\n\n\tthis.open = function(tool) {\n\t\tvar el = document.getElementById('js-flyout-tilesets');\n\t\tif (tool === ui.Tools.ADD_TILE) {\n\t\t\tel.classList.remove('hidden');\n\t\t}\n\t\telse {\n\t\t\tel.classList.add('hidden');\n\t\t}\n\t}.bind(this)\n\n\tthis.on('mount', function(evt) {\n\t\tui.activeTile = this.items[0];\n\n\t\tthis.open(ui.Tools.ADD_TILE);\n\t\tthis.selectTile({item: ui.activeTile});\n\t});\n\n\tui.on(ui.Events.TOOL_CHANGE, this.open);\n\tui.on(ui.Events.NEW_TILESET, this.newTileset);\n\tui.on(ui.Events.NEW_TILE, this.newTile);\n}, '{ }');","riot.tag2('preview-canvas', '', '', '', function(opts) {\n\tthis.renderer = null;\n\tthis.scene = null;\n\tthis.camera = null;\n\tthis.controls = null;\n\n\tthis.updatePreview = function() {\n\t\tthis.controls.update();\n\t\tthis.renderer.render(this.scene, this.camera);\n\t\tif (!window.require) {\n\n\t\t\trequestAnimationFrame(this.updatePreview);\n\t\t}\n\t}.bind(this)\n\n\tthis.toggle = function(tool) {\n\t\tif (tool === ui.Tools.ADD_TILE) {\n\n\t\t\tui.previewUpdate = this.updatePreview;\n\t\t}\n\t\telse {\n\t\t\tui.previewUpdate = null;\n\t\t}\n\t}.bind(this)\n\n\tthis.on('mount', function() {\n\t\tvar width = 208;\n\t\tvar height = 150;\n\n\t\tthis.renderer = new THREE.WebGLRenderer({\n\t\t\talpha: true,\n\t\t\tantialias: true\n\t\t});\n\t\tthis.renderer.setClearColor('#fff', 0);\n\t\tthis.renderer.sortObjects = false;\n\n\t\tthis.scene = new THREE.Scene();\n\t\tthis.scene.add(new THREE.AmbientLight(0xdddddd));\n\t\tthis.scene.add(new THREE.DirectionalLight(0xdddddd));\n\n\t\tthis.renderer.setPixelRatio(window.devicePixelRatio);\n\t\tthis.renderer.setSize(width, height);\n\t\tthis.root.appendChild(this.renderer.domElement);\n\n\t\tthis.camera = new THREE.PerspectiveCamera(50, width / height, 1, 5000);\n\t\tthis.camera.position.set(0, 100, 100);\n\n\t\tthis.controls = new THREE.OrbitControls(this.camera, this.renderer.domElement);\n\t\tthis.controls.minDistance = 50;\n\t\tthis.controls.maxDistance = 100;\n\t\tthis.controls.zoomSpeed = 2;\n\t\tthis.controls.noZoom = false;\n\t\tthis.controls.maxPolarAngle = (Math.PI / 2) - 0.01;\n\n\t\tvar geometry = new THREE.BoxGeometry(20, 20, 20);\n\t\tvar material = new THREE.MeshPhongMaterial({\n\t\t\tcolor: 0x156289,\n\t\t\temissive: 0x072534,\n\t\t\tside: THREE.DoubleSide,\n\t\t\tshading: THREE.FlatShading\n\t\t});\n\t\tvar cube = new THREE.Mesh(geometry, material);\n\t\tthis.scene.add(cube);\n\n\t\tui.previewUpdate = this.updatePreview;\n\n\t\tif (!window.require) {\n\t\t\trequestAnimationFrame(this.updatePreview);\n\t\t}\n\t});\n\n\tui.on(ui.Events.TOOL_CHANGE, this.toggle);\n});","riot.tag2('lightbox', '<div class=\"lightbox__overlay absolute\" onclick=\"{dismiss}\"></div> <div class=\"lightbox__panel flex-container\"> <yield></yield> <button class=\"overlay__close-btn\" onclick=\"{dismiss}\"><i class=\"icon-cancel\"></i></button> </div>', '', 'class=\"flex-container absolute \"', function(opts) {\n\tthis.dismiss = function() {\n\t\tthis.root.classList.add('hidden');\n\t}.bind(this)\n\n\tui.on(ui.Events.HIDE_OVERLAY, this.dismiss);\n}, '{ }');","riot.tag2('form-newtileset', '<form onsubmit=\"{onCreate}\"> <label for=\"tilesetName\">Name:</label> <input type=\"text\" name=\"tilesetName\"> <button onclick=\"{onCreate}\">Create</button> </form>', '', 'class=\"flex-container\"', function(opts) {\n\tthis.onCreate = function() {\n\t\tui.trigger(ui.Events.NEW_TILESET, this.tilesetName.value);\n\t\tui.trigger(ui.Events.HIDE_OVERLAY);\n\t}.bind(this)\n}, '{ }');","riot.tag2('form-newtile', '<label> <input type=\"checkbox\" name=\"generateTile\"> Generate </label> <input if=\"{!generateTile.checked}\" type=\"file\" accept=\".dae\" name=\"tileFile\"> <label if=\"{generateTile.checked}\"> Color: <input name=\"tileColor\" type=\"color\"> </label> <span if=\"{showMessage}\" class=\"form-newtile__error\"> {warningMessage} </span> <button onclick=\"{onCreate}\">Create Tile</button>', '', 'class=\"flex-container\"', function(opts) {\n\tthis.wrongFileType = false;\n\tthis.showMessage = false;\n\tthis.warningMessage = '';\n\n\tthis.onCreate = function() {\n\t\tvar file = this.tileFile.value;\n\t\tvar color = this.tileColor.value;\n\n\t\tif (this.wrongFileType) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!file && !this.generateTile.checked) {\n\t\t\tthis.warningMessage = 'Please choose to generate a tile, or upload a DAE (Collada) file';\n\t\t\tthis.showMessage = true;\n\t\t\tthis.update();\n\t\t\treturn false;\n\t\t}\n\n\t\tvar tile = {\n\t\t\tfile: file,\n\t\t\tcolor: color\n\t\t};\n\n\t\tui.trigger(ui.Events.NEW_TILE, tile);\n\t\tui.trigger(ui.Events.HIDE_OVERLAY);\n\t}.bind(this)\n\n\tthis.on('mount', function() {\n\t\tvar self = this;\n\t\tthis.generateTile.onchange = function(evt) {\n\t\t\tself.showMessage = false;\n\t\t\tself.update();\n\t\t};\n\n\t\tthis.tileFile.onchange = function(evt) {\n\t\t\tif (self.tileFile.value.split('.')[1] !== 'dae') {\n\t\t\t\tself.wrongFileType = true;\n\t\t\t\tself.warningMessage = 'This editor only takes .DAE (Collada) models';\n\t\t\t}\n\t\t\telse {\n\t\t\t\tself.wrongFileType = false;\n\t\t\t}\n\t\t\tself.showMessage = self.wrongFileType;\n\t\t\tself.update();\n\t\t};\n\t});\n}, '{ }');","riot.tag2('form-newmap', '<span> <label for=\"mapSize\">Map size:</label> <input name=\"mapSize\" value=\"40\" min=\"1\" max=\"{maxMapSize}\" type=\"number\"> </span> <span> <label for=\"cellSize\">Cell size:</label> <input name=\"cellSize\" value=\"10\" min=\"1\" type=\"number\"> </span> <span> <button onclick=\"{onCreate}\">Create</button> </span>', '', 'class=\"flex-container\"', function(opts) {\n\tthis.maxMapSize = 1000;\n\n\tthis.onCreate = function() {\n\t\tif (this.mapSize.value > this.maxMapSize) {\n\t\t\tthis.mapSize.value = this.maxMapSize;\n\t\t}\n\n\t\tui.trigger(ui.Events.NEW_MAP, this.mapSize.value, this.cellSize.value);\n\t\tui.trigger(ui.Events.HIDE_OVERLAY);\n\t}.bind(this)\n}, '{ }');","riot.tag2('form-map-settings', '<span> <label for=\"mapSize\">Map size:</label> <input name=\"mapSize\" value=\"5\" min=\"1\" max=\"{maxMapSize}\" type=\"number\"> <button onclick=\"{onMapUpdate}\">Create Map</button> </span> <span> <label for=\"cellSize\">Cell size:</label> <input name=\"cellSize\" value=\"10\" min=\"1\" type=\"number\"> <button onclick=\"{onMapUpdate}\">Update Map</button> </span> <span> <label for=\"heightStep\">Height step:</label> <input name=\"heightStep\" value=\"3\" min=\"1\" type=\"number\"> <button onclick=\"{onMapUpdate}\">Update Map</button> </span> <div class=\"form-group\"> <span> <label for=\"planeSize\">Plane size:</label> <input name=\"planeSize\" value=\"50\" min=\"1\" type=\"number\"> </span> <br> <span> <label for=\"planeColor\">Plane color:</label> <input name=\"planeColor\" value=\"#ffffff\" type=\"color\"> </span> <br> <button onclick=\"{onMapUpdate}\">Update Plane</button> <div>', '', 'class=\"flex-container\"', function(opts) {\n\tthis.maxMapSize = 1000;\n\n\tthis.updateSettings = function(settings) {\n\t\tthis.mapSize.value = settings.mapSize;\n\t\tthis.cellSize.value = settings.cellSize;\n\t\tthis.heightStep.value = settings.heightStep;\n\t\tthis.maxTileHeight.value = settings.maxTileHeight;\n\t\tthis.planeSize.value = settings.planeSize;\n\t\tthis.planeColor.value = settings.planeColor;\n\t\tthis.update();\n\t}.bind(this)\n\n\tthis.onMapUpdate = function() {\n\t\tif (this.mapSize.value > this.maxMapSize) {\n\t\t\tthis.mapSize.value = this.maxMapSize;\n\t\t}\n\n\t\tui.trigger(ui.Events.UPDATE_SETTINGS, {\n\t\t\tmapSize: parseInt(this.mapSize.value),\n\t\t\tcellSize: parseInt(this.cellSize.value),\n\t\t\theightStep: parseInt(this.heightStep.value),\n\t\t\tmaxTileHeight: parseInt(this.maxTileHeight.value),\n\t\t\tplaneSize: parseInt(this.planeSize.value),\n\t\t\tplaneColor: this.planeColor.value,\n\t\t});\n\n\t}.bind(this)\n\n\tthis.on('mount unmount', function(evt) {\n\t\tif (evt === 'mount') {\n\t\t\tui.on(ui.Events.UPDATE_SETTINGS, this.updateSettings);\n\t\t}\n\t\telse if (evt === 'unmount') {\n\t\t\tui.off(ui.Events.UPDATE_SETTINGS, this.updateSettings);\n\t\t}\n\t});\n}, '{ }');","riot.tag2('flyout', '<div class=\"flyout__panel flex-container\"> <yield></yield> <button if=\"{!opts.hideclose}\" class=\"overlay__close-btn {opts.side}\" onclick=\"{dismiss}\"><i class=\"icon-cancel\"></i></button> </div>', '', 'class=\"flex-container {opts.side} hidden\"', function(opts) {\n\tthis.dismiss = function() {\n\t\tthis.root.classList.add('hidden');\n\t}.bind(this)\n\n\tui.on(ui.Events.HIDE_FLYOUT, this.dismiss);\n}, '{ }');","riot.tag2('app-menu', '<ul class=\"btn-list app-menu__list\"> <li class=\"app-menu__item\" onclick=\"{onClick}\" data-action=\"settings\"> <i class=\"icon-cogs\"></i>Map </li> <li class=\"app-menu__item\" onclick=\"{onClick}\" data-action=\"saveMap\"> <i class=\"icon-download\"></i>Save </li> <li class=\"app-menu__item\" onclick=\"{onClick}\" data-action=\"loadMap\"> <i class=\"icon-cw\"></i>Load </li> <li class=\"app-menu__item\" onclick=\"{onClick}\" data-action=\"showHelp\"> <i class=\"icon-help\"></i>Help </li> </ul>', '', '', function(opts) {\n\tthis.onClick = function(evt) {\n\t\tvar action = evt.target.dataset.action;\n\n\t\tswitch (action) {\n\t\t\tcase 'settings':\n\t\t\t\tvar el = document.getElementById('js-flyout-settings');\n\t\t\t\tif (el.classList.contains('hidden')) {\n\t\t\t\t\tel.classList.remove('hidden');\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tel.classList.add('hidden');\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'saveMap':\n\t\t\t\tui.trigger(ui.Events.SAVE_MAP);\n\t\t\t\tbreak;\n\t\t\tcase 'loadMap':\n\t\t\t\tui.trigger(ui.Events.LOAD_MAP);\n\t\t\t\tbreak;\n\t\t\tcase 'showHelp':\n\t\t\t\tvar el = document.getElementById('js-overlay-help');\n\t\t\t\tel.classList.remove('hidden');\n\t\t\t\tbreak;\n\t\t}\n\t}.bind(this)\n}, '{ }');","var ui = {\n\tactiveTool: null, // Tools.*\n\tactiveTile: null, // ui object describing the tile\n\tactiveTileMesh: null, // what's shown in the preview scene\n\tpreviewUpdate: null, // function that should get called every frame to update the preview scene\n\n\tEvents: {\n\t\tTOOL_CHANGE: 'tool-change',\n\t\tUPDATE_SETTINGS: 'update-map-settings',\n\t\tSELECT_TILE: 'select-tile',\n\t\tNEW_TILESET: 'new-tileset',\n\t\tNEW_TILE: 'new-tile',\n\t\tNEW_MAP: 'new-map',\n\t\tSAVE_MAP: 'save-map',\n\t\tLOAD_MAP: 'load-map',\n\t\tHIDE_OVERLAY: 'ui-hide-overlay',\n\t\tHIDE_FLYOUT: 'ui-hide-flyout'\n\t},\n\n\tTools: {\n\t\tADD_TILE: 'add-tile',\n\t\tREMOVE_TILE: 'remove-tile',\n\t\tWALK_TILE: 'set-tile-walk',\n\t}\n};\n\nriot.observable(ui);\nriot.mount('*');\n"],"sourceRoot":"/source/"}