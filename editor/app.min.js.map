{"version":3,"sources":["nexus.js","tower.js","walkableTile.js","removeTile.js","data.js","tilemaker.js","addTile.js","motor.js","keyboard.js","toolbag.js","main.js","Input.js","EditorPlane.js"],"names":["define","grid","board","mouse","scene","input","plane","gen","tileAction","vg","Signal","objAction","userAction","save","TILE_CHANGE_HEIGHT","TILE_ADD","TILE_REMOVE","TILE_CHANGE_WALKABLE","over","cell","tile","mesh","nexus","down","walkableTile","up","walkable","tower","dispatch","require","onOver","onDown","onUp","action","removeTile","_store","changed","get","key","this","set","val","window","localStorage","JSON","stringify","load","json","data","parse","err","console","warn","init","map","mats","materials","c","i","length","id","THREE","MeshPhongMaterial","color","util","randomizeRGB","resetHeightStep","newHeightStep","t","step","tileHeightStep","tiles","position","y","h","getTile","matid","mat","material","tilePool","pop","copy","cellToPixel","Tile","geometry","geoGen","tileGeo","addTile","dataChanged","oldData","newData","heightStep","settings","add","getTileAtCell","newCell","Cell","Math","abs","wheel","newTile","tilemaker","ui","activeTile","slotid","on","_brake","requestAnimationFrame","_update","addEventListener","onFocus","onBlur","off","removeEventListener","cb","scope","k","_hashStr","toString","_has","_steps","push","func","remove","splice","o","call","n","evt","str","chr","len","hash","charCodeAt","keyCode","shift","ctrl","signal","eventType","DOWN","UP","document","code","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","ZERO","ONE","TWO","FOUR","FIVE","SIX","SEVEN","EIGHT","NINE","NUMPAD_0","NUMPAD_1","NUMPAD_2","NUMPAD_3","NUMPAD_4","NUMPAD_5","NUMPAD_6","NUMPAD_7","NUMPAD_8","NUMPAD_9","NUMPAD_MULTIPLY","NUMPAD_ADD","NUMPAD_ENTER","NUMPAD_SUBTRACT","NUMPAD_DECIMAL","NUMPAD_DIVIDE","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","F13","F14","F15","COLON","EQUALS","UNDERSCORE","QUESTION_MARK","TILDE","OPEN_BRACKET","BACKWARD_SLASH","CLOSED_BRACKET","QUOTES","BACKSPACE","TAB","CLEAR","ENTER","SHIFT","CTRL","ALT","CAPS_LOCK","ESC","SPACEBAR","PAGE_UP","PAGE_DOWN","END","HOME","LEFT","RIGHT","INSERT","DELETE","HELP","NUM_LOCK","update","currentGridCell","pixelToCell","editorWorldPos","keyboard","activeTool","name","allHits","equals","prevGridCell","toolChange","Tools","ADD_TILE","tool","REMOVE_TILE","WALK_TILE","onUserAction","type","overTile","rightDown","MouseCaster","WHEEL","dif","lastHeight","round","OVER","OUT","motor","Vector3","Events","TOOL_CHANGE","wheelTimer","active","dirtyMap","saveTimer","log","render","previewUpdate","onControlWheel","onMapChange","timeTilAutoSave","toJSON","loadMap","newGrid","HEX","HexGrid","SQR","SqrGrid","fromJSON","setGrid","generate","makeTiles","updatePlane","planeColor","planeSize","saveMap","output","replace","exportString","createMap","config","mapSize","cellSize","overwrite","size","filename","blob","Blob","objectURL","URL","createObjectURL","link","href","download","target","createEvent","initMouseEvent","dispatchEvent","Input","EditorPlane","fileInput","createElement","file","files","reader","FileReader","onload","e","result","readAsText","SAVE_MAP","LOAD_MAP","click","NEW_MAP","canvas","getElementById","Scene","element","cameraPosition","x","z","maxPolarAngle","PI","controls","Board","group","camera","GeneratedTileManager","focusOn","trigger","UPDATE_SETTINGS","updateCellSize","style","display","body","appendChild","onMouse","mouseDelta","mousePanMinDistance","_travel","prototype","hit","point","dx","screenPosition","dy","sqrt","enabled","obj","CLICK","planeMaterial","MeshBasicMaterial","side","DoubleSide","hoverMaterial","hoverMesh","tileHoverMesh","visible","newColor","parseInt","setHex","_actualSize","SQRT3","_cellWidth","parent","dispose","makeOverlay","CircleGeometry","PlaneGeometry","Mesh","rotation","DEG_TO_RAD","makeTilePoly","container","makeTileHighlight","pickedObject"],"mappings":"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","file":"app.min.js","sourcesContent":["define('nexus', {\n\tgrid: null,\n\tboard: null,\n\tmouse: null,\n\tscene: null,\n\tinput: null,\n\tplane: null,\n\tgen: null,\n});\n","define('tower', {\n\ttileAction: new vg.Signal(),\n\tobjAction: new vg.Signal(),\n\tuserAction: new vg.Signal(),\n\n\tsave: new vg.Signal(),\n\n\tTILE_CHANGE_HEIGHT: 'cell.change.height',\n\tTILE_ADD: 'cell.add',\n\tTILE_REMOVE: 'cell.remove',\n\tTILE_CHANGE_WALKABLE: 'cell.change.walkable',\n});\n","define('walkableTile', function() {\n\tvar tower = require('tower');\n\tvar nexus = require('nexus');\n\n\t/*var material = new THREE.MeshBasicMaterial({\n\t\ttexture:\n\t});\n\tvar verts = this.vertices.slice(0);\n\tverts.push(verts[0].clone());\n\tvar curve = new THREE.CatmullRomCurve3(verts);\n\tvar geo = new THREE.TubeGeometry(curve, 6, 1, 2, true);\n\tvar mesh = new THREE.Mesh(geo, material);\n\tmesh.scale.x = 0.9;\n\tmesh.scale.z = 0.9;*/\n\n\tfunction over(cell, tile, mesh) {\n\t\tif (tile && nexus.mouse.down) {\n\t\t\twalkableTile(tile);\n\t\t}\n\t}\n\n\tfunction down(cell, tile, mesh) {\n\t\tif (tile) {\n\t\t\twalkableTile(tile);\n\t\t}\n\t}\n\n\tfunction up(cell, tile, mesh) {\n\n\t}\n\n\tfunction walkableTile(tile) {\n\t\tif (!tile) return;\n\n\t\ttile.cell.walkable = !tile.cell.walkable;\n\n\t\ttower.tileAction.dispatch(tower.TILE_CHANGE_WALKABLE, tile);\n\n\t\treturn tile;\n\t}\n\n\treturn {\n\t\tonOver: over,\n\t\tonDown: down,\n\t\tonUp: up,\n\t\taction: walkableTile\n\t};\n});\n","define('removeTile', function() {\n\tvar tower = require('tower');\n\tvar nexus = require('nexus');\n\t// var keyboard = require('keyboard');\n\t// var motor = require('motor');\n\n\t// var disabled = false;\n\n\tfunction over(cell, tile, mesh) {\n\t\tif (tile && nexus.mouse.down) {\n\t\t\tremoveTile(tile);\n\t\t}\n\t}\n\n\tfunction down(cell, tile, mesh) {\n\t\tif (tile) {\n\t\t\tremoveTile(tile);\n\t\t}\n\t}\n\n\tfunction up(cell, tile, mesh) {\n\n\t}\n\n\tfunction removeTile(tile) {\n\t\tnexus.board.removeTile(tile);\n\t\ttower.tileAction.dispatch(tower.TILE_REMOVE, tile);\n\t}\n\n\treturn {\n\t\tonOver: over,\n\t\tonDown: down,\n\t\tonUp: up,\n\t\taction: removeTile\n\t};\n});\n","/*\n\tHandles JSON for whatever data needs to be saved to localStorage, and provides a convenient signal for whenever that data changes.\n*/\ndefine('data', {\n\t_store: {},\n\tchanged: new vg.Signal(),\n\n\tget: function(key) {\n\t\treturn this._store[key] || null;\n\t},\n\n\tset: function(key, val) {\n\t\t// fire event first so we can retrieve old data before it's overwritten (just in case)\n\t\tthis.changed.dispatch(key, this._store[key], val);\n\t\tthis._store[key] = val;\n\t},\n\n\tsave: function() {\n\t\twindow.localStorage['vongrid'] = JSON.stringify(this._store);\n\t},\n\n\tload: function(json) {\n\t\tvar data = window.localStorage['vongrid'];\n\t\tif (json || data) {\n\t\t\ttry {\n\t\t\t\tthis._store = json || JSON.parse(data);\n\t\t\t\tthis.changed.dispatch('load-success', this._store);\n\t\t\t}\n\t\t\tcatch (err) {\n\t\t\t\tconsole.warn(err);\n\t\t\t\tthis.changed.dispatch('load-failure');\n\t\t\t}\n\t\t}\n\t}\n});\n","/*\n\tCreates and manages a default tileset.\n*/\ndefine('tilemaker', function() {\n\tvar nexus = require('nexus');\n\tvar data = require('data');\n\n\t// var tileset = new vg.TilesetManager(nexus.board);\n\n\tvar materials = [];\n\tvar tilePool = []; // unused tiles for recycling\n\n\tfunction init() {\n\t\tvar map = data.get('map');\n\t\tvar mats = map.materials;\n\t\tif (map.mesh) {\n\t\t\t// TODO\n\t\t\t// tileset.load(map, onMatLoad);\n\t\t}\n\t\telse {\n\t\t\t// generate a placeholder tileset with the materials saved in the map data\n\t\t\tvar c = [\n\t\t\t\t'rgb(10, 64, 16)',\n\t\t\t\t'rgb(10, 51, 64)',\n\t\t\t\t'rgb(70, 70, 0)',\n\t\t\t\t'rgb(0, 200, 200)',\n\t\t\t\t'rgb(255, 100, 200)',\n\t\t\t];\n\t\t\tfor (var i = 0; i < mats.length; i++) {\n\t\t\t\tmaterials[mats[i].id] = new THREE.MeshPhongMaterial({\n\t\t\t\t\tcolor: c[i] || vg.util.randomizeRGB(0, 100)\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t// make sure all tiles are under new height, or rebuild geo if height is taller\n\tfunction resetHeightStep(newHeightStep) {\n\t\tif (!nexus.board) return;\n\t\tvar i, t;\n\t\tvar step = newHeightStep || nexus.board.tileHeightStep;\n\t\tfor (i = 0; t = nexus.board.tiles[i]; i++) {\n\t\t\tt.position.y = t.cell.h * step;\n\t\t}\n\t}\n\n\tfunction getTile(cell, matid) { // eslint-disable-line no-unused-vars\n\t\tvar mat = materials[matid];\n\t\tvar map = data.get('map');\n\t\tif (cell.tile) {\n\t\t\t// don't rebuild, just update\n\t\t\tcell.tile.material = mat;\n\t\t\tcell.tile.mesh.material = mat;\n\t\t\treturn cell.tile;\n\t\t}\n\t\tvar t = tilePool.pop();\n\t\tif (t) {\n\t\t\tt.material = mat;\n\t\t\tt.mesh.material = mat;\n\t\t\tt.cell = cell;\n\t\t\tcell.tile = t;\n\t\t\tt.position.copy(nexus.grid.cellToPixel(cell));\n\t\t\tt.position.y = t.cell.h * nexus.board.tileHeightStep;\n\t\t}\n\t\telse {\n\t\t\tt = new vg.Tile({\n\t\t\t\tcell: cell,\n\t\t\t\tgeometry: map.mesh || nexus.gen.geoGen.tileGeo,\n\t\t\t\tmaterial: materials[matid]\n\t\t\t});\n\t\t}\n\n\t\tnexus.board.addTile(t);\n\n\t\treturn t;\n\t}\n\n\t/*function recycleTile(tile) {\n\t\tif (tile.mesh.parent) tile.mesh.parent.remove(tile.mesh);\n\t\ttilePool.push(tile);\n\t}*/\n\n\tfunction dataChanged(key, oldData, newData) {\n\t\tvar newHeightStep;\n\n\t\tif (key === 'settings') {\n\t\t\tnewHeightStep = newData.heightStep;\n\t\t}\n\t\telse if (key === 'load-success') {\n\t\t\tnewHeightStep = oldData.settings.heightStep;\n\t\t}\n\n\t\tif (newHeightStep) resetHeightStep(newHeightStep);\n\t}\n\n\tdata.changed.add(dataChanged, this);\n\n\treturn {\n\t\tinit: init,\n\t\tgetTile: getTile\n\t};\n});\n","define('addTile', function() {\n\tvar tower = require('tower');\n\tvar nexus = require('nexus');\n\tvar tilemaker = require('tilemaker');\n\n\tfunction over(cell, tile, mesh) {\n\t\tif (cell.tile) return;\n\t\tif (!tile && nexus.mouse.down) {\n\t\t\taddTile(cell);\n\t\t}\n\t}\n\n\tfunction down(cell, tile, mesh) {\n\t\tif (!tile) {\n\t\t\taddTile(cell);\n\t\t}\n\t}\n\n\tfunction up(cell, tile, mesh) {\n\n\t}\n\n\tfunction addTile(cell) {\n\t\tif (!cell || nexus.board.getTileAtCell(cell)) return;\n\n\t\tvar newCell = new vg.Cell();\n\t\tnewCell.copy(cell);\n\t\tnewCell.h = Math.abs(nexus.mouse.wheel * nexus.board.tileHeightStep);\n\n\t\tvar newTile = tilemaker.getTile(newCell, ui.activeTile.slotid);\n\n\t\tnexus.board.addTile(newTile);\n\n\t\ttower.tileAction.dispatch(tower.TILE_ADD, newTile);\n\n\t\treturn newTile;\n\t}\n\n\treturn {\n\t\tonOver: over,\n\t\tonDown: down,\n\t\tonUp: up,\n\t\taction: addTile\n\t};\n});\n","/*\n\tThis is the ONLY place in the app that has a requestAnimationFrame handler.\n\tAll modules attach their functions to this module if they want in on the RAF.\n */\ndefine('motor', function() {\n\tvar _brake = false;\n\tvar _steps = [];\n\n\tfunction on() {\n\t\t_brake = false;\n\t\twindow.requestAnimationFrame(_update);\n\t\twindow.addEventListener('focus', onFocus, false);\n\t\twindow.addEventListener('blur', onBlur, false);\n\t}\n\n\tfunction off() {\n\t\t_brake = true;\n\t\twindow.removeEventListener('focus', onFocus, false);\n\t\twindow.removeEventListener('blur', onBlur, false);\n\t}\n\n\t// in order to be able to ID functions we have to hash them to generate unique-ish keys for us to find them with later\n\t// if we don't do this, we won't be able to remove callbacks that were bound and save us from binding callbacks multiple times all over the place\n\tfunction add(cb, scope) {\n\t\tvar k = _hashStr(cb.toString());\n\t\tvar h = _has(k);\n\t\tif (h === -1) {\n\t\t\t_steps.push({\n\t\t\t\tfunc: cb,\n\t\t\t\tscope: scope,\n\t\t\t\tkey: k\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction remove(cb) {\n\t\tvar k = _hashStr(cb.toString());\n\t\tvar i = _has(k);\n\t\tif (i !== -1) {\n\t\t\t_steps.splice(i, 1);\n\t\t}\n\t}\n\n\tfunction _update() {\n\t\tif (_brake) return;\n\t\twindow.requestAnimationFrame(_update);\n\n\t\tfor (var i = 0; i < _steps.length; i++) {\n\t\t\tvar o = _steps[i];\n\t\t\to.func.call(o.scope || null);\n\t\t}\n\t}\n\n\t// check if the handler already has iaw.motor particular callback\n\tfunction _has(k) {\n\t\tvar n = -1;\n\t\tvar i;\n\t\tfor (i = 0; i < _steps.length; i++) {\n\t\t\tn = _steps[i].key;\n\t\t\tif (n === k) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\tfunction onFocus(evt) {\n\t\t_brake = false;\n\t\t_update();\n\t}\n\n\tfunction onBlur(evt) {\n\t\t_brake = true;\n\t}\n\n\tfunction _hashStr(str) {\n\t\tvar hash = 0, i, chr, len;\n\t\tif (str.length === 0) return hash;\n\t\tfor (i = 0, len = str.length; i < len; i++) {\n\t\t\tchr = str.charCodeAt(i);\n\t\t\thash = ((hash << 5) - hash) + chr;\n\t\t\thash |= 0;\n\t\t}\n\t\treturn hash;\n\t}\n\n\treturn {\n\t\ton: on,\n\t\toff: off,\n\t\tadd: add,\n\t\tremove: remove,\n\t};\n});\n","define('keyboard', function() {\n\n\tfunction onDown(evt) {\n\t\tswitch (evt.keyCode) {\n\t\t\tcase 16:\n\t\t\t\tk.shift = true;\n\t\t\t\tbreak;\n\t\t\tcase 17:\n\t\t\t\tk.ctrl = true;\n\t\t\t\tbreak;\n\t\t}\n\t\tk.signal.dispatch(k.eventType.DOWN, evt.keyCode);\n\t}\n\n\tfunction onUp(evt) {\n\t\tswitch (evt.keyCode) {\n\t\t\tcase 16:\n\t\t\t\tk.shift = false;\n\t\t\t\tbreak;\n\t\t\tcase 17:\n\t\t\t\tk.ctrl = false;\n\t\t\t\tbreak;\n\t\t}\n\t\tk.signal.dispatch(k.eventType.UP, evt.keyCode);\n\t}\n\n\tvar k = {\n\t\tshift: false,\n\t\tctrl: false,\n\n\t\teventType: {\n\t\t\tDOWN: 'down',\n\t\t\tUP: 'up'\n\t\t},\n\n\t\tsignal: new vg.Signal(),\n\n\t\ton: function() {\n\t\t\tdocument.addEventListener('keydown', onDown, false);\n\t\t\tdocument.addEventListener('keyup', onUp, false);\n\t\t},\n\n\t\toff: function() {\n\t\t\tdocument.removeEventListener('keydown', onDown);\n\t\t\tdocument.removeEventListener('keyup', onUp);\n\t\t},\n\n\t\tcode: {\n\t\t\tA: 'A'.charCodeAt(0),\n\t\t\tB: 'B'.charCodeAt(0),\n\t\t\tC: 'C'.charCodeAt(0),\n\t\t\tD: 'D'.charCodeAt(0),\n\t\t\tE: 'E'.charCodeAt(0),\n\t\t\tF: 'F'.charCodeAt(0),\n\t\t\tG: 'G'.charCodeAt(0),\n\t\t\tH: 'H'.charCodeAt(0),\n\t\t\tI: 'I'.charCodeAt(0),\n\t\t\tJ: 'J'.charCodeAt(0),\n\t\t\tK: 'K'.charCodeAt(0),\n\t\t\tL: 'L'.charCodeAt(0),\n\t\t\tM: 'M'.charCodeAt(0),\n\t\t\tN: 'N'.charCodeAt(0),\n\t\t\tO: 'O'.charCodeAt(0),\n\t\t\tP: 'P'.charCodeAt(0),\n\t\t\tQ: 'Q'.charCodeAt(0),\n\t\t\tR: 'R'.charCodeAt(0),\n\t\t\tS: 'S'.charCodeAt(0),\n\t\t\tT: 'T'.charCodeAt(0),\n\t\t\tU: 'U'.charCodeAt(0),\n\t\t\tV: 'V'.charCodeAt(0),\n\t\t\tW: 'W'.charCodeAt(0),\n\t\t\tX: 'X'.charCodeAt(0),\n\t\t\tY: 'Y'.charCodeAt(0),\n\t\t\tZ: 'Z'.charCodeAt(0),\n\t\t\tZERO: '0'.charCodeAt(0),\n\t\t\tONE: '1'.charCodeAt(0),\n\t\t\tTWO: '2'.charCodeAt(0),\n\t\t\tTHREE: '3'.charCodeAt(0),\n\t\t\tFOUR: '4'.charCodeAt(0),\n\t\t\tFIVE: '5'.charCodeAt(0),\n\t\t\tSIX: '6'.charCodeAt(0),\n\t\t\tSEVEN: '7'.charCodeAt(0),\n\t\t\tEIGHT: '8'.charCodeAt(0),\n\t\t\tNINE: '9'.charCodeAt(0),\n\t\t\tNUMPAD_0: 96,\n\t\t\tNUMPAD_1: 97,\n\t\t\tNUMPAD_2: 98,\n\t\t\tNUMPAD_3: 99,\n\t\t\tNUMPAD_4: 100,\n\t\t\tNUMPAD_5: 101,\n\t\t\tNUMPAD_6: 102,\n\t\t\tNUMPAD_7: 103,\n\t\t\tNUMPAD_8: 104,\n\t\t\tNUMPAD_9: 105,\n\t\t\tNUMPAD_MULTIPLY: 106,\n\t\t\tNUMPAD_ADD: 107,\n\t\t\tNUMPAD_ENTER: 108,\n\t\t\tNUMPAD_SUBTRACT: 109,\n\t\t\tNUMPAD_DECIMAL: 110,\n\t\t\tNUMPAD_DIVIDE: 111,\n\t\t\tF1: 112,\n\t\t\tF2: 113,\n\t\t\tF3: 114,\n\t\t\tF4: 115,\n\t\t\tF5: 116,\n\t\t\tF6: 117,\n\t\t\tF7: 118,\n\t\t\tF8: 119,\n\t\t\tF9: 120,\n\t\t\tF10: 121,\n\t\t\tF11: 122,\n\t\t\tF12: 123,\n\t\t\tF13: 124,\n\t\t\tF14: 125,\n\t\t\tF15: 126,\n\t\t\tCOLON: 186,\n\t\t\tEQUALS: 187,\n\t\t\tUNDERSCORE: 189,\n\t\t\tQUESTION_MARK: 191,\n\t\t\tTILDE: 192,\n\t\t\tOPEN_BRACKET: 219,\n\t\t\tBACKWARD_SLASH: 220,\n\t\t\tCLOSED_BRACKET: 221,\n\t\t\tQUOTES: 222,\n\t\t\tBACKSPACE: 8,\n\t\t\tTAB: 9,\n\t\t\tCLEAR: 12,\n\t\t\tENTER: 13,\n\t\t\tSHIFT: 16,\n\t\t\tCTRL: 17,\n\t\t\tALT: 18,\n\t\t\tCAPS_LOCK: 20,\n\t\t\tESC: 27,\n\t\t\tSPACEBAR: 32,\n\t\t\tPAGE_UP: 33,\n\t\t\tPAGE_DOWN: 34,\n\t\t\tEND: 35,\n\t\t\tHOME: 36,\n\t\t\tLEFT: 37,\n\t\t\tUP: 38,\n\t\t\tRIGHT: 39,\n\t\t\tDOWN: 40,\n\t\t\tINSERT: 45,\n\t\t\tDELETE: 46,\n\t\t\tHELP: 47,\n\t\t\tNUM_LOCK: 144\n\t\t}\n\t};\n\n\treturn k;\n});\n","/*\n\tManages cells and objects on the map.\n*/\ndefine('toolbag', function() {\n\tvar tower = require('tower');\n\tvar nexus = require('nexus');\n\tvar keyboard = require('keyboard');\n\tvar motor = require('motor');\n\n\tvar addTile = require('addTile');\n\tvar removeTile = require('removeTile');\n\tvar walkableTile = require('walkableTile');\n\n\tvar tool = addTile; // should be the first tool in the bag as determined by tool-menu.tag\n\n\tvar lastHeight = 1;\n\tvar currentGridCell = null;\n\tvar prevGridCell = new THREE.Vector3();\n\t// var _cel = new vg.Cell();\n\n\ttower.userAction.add(onUserAction, this);\n\tui.on(ui.Events.TOOL_CHANGE, toolChange);\n\n\tmotor.add(update);\n\n\tfunction update() {\n\t\tcurrentGridCell = nexus.grid.pixelToCell(nexus.input.editorWorldPos);\n\t\tif (!keyboard.ctrl && nexus.mouse.down && ui.activeTool.name === 'ADD_TILE' && nexus.mouse.allHits && nexus.mouse.allHits.length) {\n\t\t\t// special case since the over event doesn't fire if there's no tile\n\t\t\tif (!currentGridCell.equals(prevGridCell)) {\n\t\t\t\taddTile.action(currentGridCell, null);\n\t\t\t}\n\t\t\tprevGridCell.copy(currentGridCell);\n\t\t}\n\t}\n\n\tfunction toolChange(evt) {\n\t\tswitch (evt) {\n\t\t\tcase ui.Tools.ADD_TILE:\n\t\t\t\ttool = addTile;\n\t\t\t\tbreak;\n\t\t\tcase ui.Tools.REMOVE_TILE:\n\t\t\t\ttool = removeTile;\n\t\t\t\tbreak;\n\t\t\tcase ui.Tools.WALK_TILE:\n\t\t\t\ttool = walkableTile;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\ttool = null;\n\t\t\t\tbreak;\n\t\t}\n\t\t// console.log('Tool selected: '+evt);\n\t}\n\n\tfunction onUserAction(type, overTile, data) {\n\t\tif (keyboard.ctrl || data === null || nexus.mouse.rightDown || !tool) {\n\t\t\t// there's no picked object, which means the user isn't hovering over any mesh in the scene\n\t\t\t// also ignore right-mouse clicks\n\t\t\treturn;\n\t\t}\n\t\tvar heightStep = nexus.board.tileHeightStep;\n\n\t\tswitch (type) {\n\t\t\tcase vg.MouseCaster.WHEEL:\n\t\t\t\tif (overTile) {\n\t\t\t\t\tvar dif = lastHeight - data;\n\t\t\t\t\toverTile.cell.h += dif > 0 ? -1 : +1;\n\t\t\t\t\tif (overTile.cell.h < 1) overTile.cell.h = 0;\n\n\t\t\t\t\tnexus.mouse.wheel = Math.round((overTile.cell.h / heightStep) + (dif > 0 ? -1 : 1));\n\t\t\t\t\tlastHeight = nexus.mouse.wheel;\n\n\t\t\t\t\toverTile.position.y = overTile.cell.h * heightStep;\n\n\t\t\t\t\ttower.tileAction.dispatch(tower.TILE_CHANGE_HEIGHT, overTile);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase vg.MouseCaster.OVER:\n\t\t\t\ttool.onOver(currentGridCell, overTile, data);\n\t\t\t\tbreak;\n\n\t\t\tcase vg.MouseCaster.OUT:\n\n\t\t\t\tbreak;\n\n\t\t\tcase vg.MouseCaster.DOWN:\n\t\t\t\ttool.onDown(currentGridCell, overTile, data);\n\t\t\t\tbreak;\n\n\t\t\tcase vg.MouseCaster.UP:\n\t\t\t\ttool.onUp(currentGridCell, overTile, data);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn {\n\n\t};\n});\n","window.addEventListener('load', function(evt) {\n\tvar data = require('data');\n\tvar tower = require('tower');\n\tvar nexus = require('nexus');\n\tvar keyboard = require('keyboard');\n\tvar motor = require('motor');\n\n\tvar Input = require('Input');\n\tvar EditorPlane = require('EditorPlane');\n\n\tdata.load();\n\tvar map = data.get('map');\n\n\tvar timeTilAutoSave = 200; // timer runs per frame, 60fps\n\tvar saveTimer = 10;\n\tvar dirtyMap = false;\n\n\tvar fileInput = document.createElement('input');\n\tfileInput.type = 'file';\n\tfileInput.addEventListener('change', function(evt) {\n\t\tvar file = fileInput.files[0];\n\t\tif (!file) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar reader = new FileReader();\n\t\treader.onload = function(e) {\n\t\t\tvar json = null;\n\t\t\ttry {\n\t\t\t\tjson = JSON.parse(e.target.result);\n\t\t\t}\n\t\t\tcatch (err) {\n\t\t\t\tconsole.warn('File is not json format');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tloadMap(json);\n\t\t};\n\n\t\treader.readAsText(file);\n\n\t\treturn false;\n\t});\n\n\tui.on('error', function(evt) {\n\t\tconsole.warn(evt);\n\t});\n\n\tui.on(ui.Events.SAVE_MAP, function() {\n\t\tsaveMap();\n\t});\n\n\tui.on(ui.Events.LOAD_MAP, function() {\n\t\tfileInput.click();\n\t});\n\n\tui.on(ui.Events.NEW_MAP, function(config) {\n\t\tcreateMap(config);\n\t});\n\n\tkeyboard.on();\n\tmotor.on();\n\n\t// setup the thing\n\tvar canvas = document.getElementById('view');\n\tvar scene = new vg.Scene({\n\t\telement: canvas,\n\t\tcameraPosition: {x: 0, y: 300, z: 120},\n\t\t// light: new THREE.AmbientLight(0x000000)\n\t}, {\n\t\tmaxPolarAngle: (Math.PI / 2) - 0.01\n\t});\n\tnexus.scene = scene;\n\n\t// listen to the orbit controls to disable the raycaster while user adjusts the view\n\tscene.controls.addEventListener('wheel', onControlWheel);\n\n\t// hex grid by default\n\tvar grid = new vg.HexGrid();\n\tnexus.grid = grid;\n\tvar board = new vg.Board(grid);\n\tnexus.board = board;\n\tvar mouse = new vg.MouseCaster(board.group, scene.camera, canvas);\n\tnexus.mouse = mouse;\n\tvar gen = new vg.GeneratedTileManager(board);\n\tnexus.gen = gen;\n\n\tvar input = new Input(board.group, mouse);\n\tnexus.input = input;\n\tvar plane = new EditorPlane(board.group, grid, mouse);\n\tnexus.plane = plane;\n\n\ttower.tileAction.add(onMapChange, this);\n\ttower.save.add(onMapChange, this);\n\n\tfunction dataChanged(key, oldData, newData) {\n\t\tif (key === 'settings') {\n\t\t\tboard.tileHeightStep = newData.heightStep;\n\t\t}\n\t\tif (key === 'load-success') {\n\t\t\tboard.tileHeightStep = oldData.settings.heightStep;\n\t\t}\n\t}\n\tdata.changed.add(dataChanged);\n\n\tscene.focusOn(board.group);\n\n\tif (map) {\n\t\tui.trigger(ui.Events.UPDATE_SETTINGS, data.get('settings'));\n\t\tloadMap(map);\n\t}\n\telse {\n\t\tcreateMap();\n\t}\n\n\trequire('tilemaker').init();\n\n\t// reflect new values in the UI\n\tui.trigger(ui.Events.UPDATE_SETTINGS, data.get('settings'));\n\n\tscene.add(board.group);\n\n\tui.on(ui.Events.UPDATE_SETTINGS, function(settings) {\n\t\t// console.log('current grid size: '+grid.size+', new: '+settings.mapSize);\n\t\t// console.log('current cell size: '+grid.cellSize+', new: '+settings.cellSize);\n\t\tplane.updatePlane(settings.planeColor, settings.planeSize);\n\n\t\tdata.set('settings', settings);\n\t\tonMapChange();\n\n\t\tif (settings.mapSize === grid.size) {\n\t\t\tif (settings.cellSize === grid.cellSize) {\n\t\t\t\t// console.log('neither changed, ignored');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// console.log('only cell size changed');\n\t\t\tgrid.updateCellSize(settings.cellSize);\n\t\t}\n\t\telse {\n\t\t\t// only map size or both changed\n\t\t\tgrid.updateCellSize(settings.cellSize);\n\t\t\t// if map size changed, we have to rebuild the map from scratch\n\t\t\tgrid.generate({\n\t\t\t\tsize: settings.mapSize\n\t\t\t});\n\t\t}\n\n\t\tplane.generate();\n\n\t\tif (!settings.mesh) {\n\t\t\tgen.geoGen.makeTiles(30);\n\t\t}\n\t});\n\n\tfunction update() {\n\t\tif (wheelTimer < 10) {\n\t\t\twheelTimer++;\n\t\t\tif (wheelTimer === 10) {\n\t\t\t\tmouse.active = true;\n\t\t\t}\n\t\t}\n\t\tif (dirtyMap) {\n\t\t\tsaveTimer--;\n\t\t\tif (saveTimer === 0) {\n\t\t\t\tdirtyMap = false;\n\t\t\t\tdata.set('map', map);\n\t\t\t\tdata.save();\n\t\t\t\tconsole.log('Map saved');\n\t\t\t}\n\t\t}\n\t\tmouse.update();\n\t\tinput.update();\n\t\tplane.update();\n\t\tscene.render();\n\t\tif (ui.previewUpdate) {\n\t\t\tui.previewUpdate();\n\t\t}\n\t}\n\tmotor.add(update);\n\n\tvar wheelTimer = 10;\n\tfunction onControlWheel() {\n\t\tmouse.active = false;\n\t\twheelTimer = 0;\n\t}\n\n\tfunction onMapChange() {\n\t\tdirtyMap = true;\n\t\tsaveTimer = timeTilAutoSave;\n\t\tmap = grid.toJSON();\n\t}\n\n\tfunction loadMap(json) {\n\t\tif (json.type !== grid.type) {\n\t\t\tvar newGrid;\n\t\t\tswitch (json.type) {\n\t\t\t\tcase vg.HEX:\n\t\t\t\t\tnewGrid = new vg.HexGrid(json);\n\t\t\t\t\tbreak;\n\t\t\t\tcase vg.SQR:\n\t\t\t\t\tnewGrid = new vg.SqrGrid(json);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// unsupported\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnexus.grid = newGrid;\n\t\t\tgrid = newGrid;\n\t\t\t// nexus.gen.geoGen.init(grid.cellSize);\n\t\t}\n\n\t\tgrid.fromJSON(json);\n\n\t\tboard.setGrid(grid);\n\t\tboard.heightStep = json.heightStep;\n\n\t\tplane.setGrid(grid);\n\t\tplane.generate();\n\n\t\tvar settings = data.get('settings');\n\n\t\tif (!settings.mesh) {\n\t\t\t// TODO: reflect height step in settings\n\t\t\tnexus.gen.makeTiles(30);\n\t\t}\n\n\t\tplane.updatePlane(settings.planeColor, settings.planeSize);\n\n\t\tconsole.log('Map load complete');\n\t}\n\n\tfunction saveMap() {\n\t\tvar output = null;\n\t\tvar settings = data.get('settings');\n\n\t\tmap = grid.toJSON();\n\t\tmap.heightStep = settings.heightStep;\n\t\tconsole.log(settings);\n\n\t\ttry {\n\t\t\toutput = JSON.stringify(map, null, '\\t');\n\t\t\toutput = output.replace(/[\\n\\t]+([\\d\\.e\\-\\[\\]]+)/g, '$1');\n\t\t}\n\t\tcatch (err) {\n\t\t\toutput = JSON.stringify(map);\n\t\t}\n\n\t\texportString(output, 'von-grid-map.json');\n\t}\n\n\tfunction createMap(config) {\n\t\tvar settings = data.get('settings'); // use previous settings if needed\n\t\tvar newGrid;\n\t\tif (config) {\n\t\t\tswitch (config.type) {\n\t\t\t\tcase vg.HEX:\n\t\t\t\t\tnewGrid = new vg.HexGrid(config);\n\t\t\t\t\tbreak;\n\t\t\t\tcase vg.SQR:\n\t\t\t\t\tnewGrid = new vg.SqrGrid(config);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// unsupported\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tconfig = {\n\t\t\t\tmapSize: settings.mapSize,\n\t\t\t\tcellSize: settings.cellSize,\n\t\t\t\tplaneSize: settings.planeSize,\n\t\t\t\theightStep: settings.heightStep,\n\t\t\t\tplaneColor: '#ffffff',\n\t\t\t\tmesh: null\n\t\t\t};\n\t\t}\n\n\t\tvg.util.overwrite(settings, config);\n\n\t\tnewGrid.generate({\n\t\t\tsize: config.mapSize,\n\t\t\tcellSize: config.cellSize\n\t\t});\n\n\t\tnexus.grid = newGrid;\n\t\tboard.setGrid(newGrid);\n\t\tboard.heightStep = config.heightStep;\n\t\tgrid = newGrid;\n\n\t\tnexus.gen.geoGen.init(grid.cellSize);\n\n\t\tplane.setGrid(grid);\n\t\tplane.generate();\n\n\t\tmap = grid.toJSON();\n\t\tdata.set('map', map);\n\n\t\tsettings.planeSize = plane.planeSize;\n\t\tdata.set('settings', settings);\n\n\t\tif (!settings.mesh) {\n\t\t\tnexus.gen.makeTiles(50, map.materials);\n\t\t}\n\n\t\tconsole.log('Created a new map');\n\t\tdata.save();\n\t}\n\n\t// taken from https://github.com/mrdoob/three.js/blob/master/editor/js/Menubar.File.js\n\tvar link = document.createElement('a');\n\tlink.style.display = 'none';\n\tdocument.body.appendChild(link);\n\n\tfunction exportString(output, filename) {\n\t\tvar blob = new Blob([output], {type: 'text/plain'});\n\t\tvar objectURL = URL.createObjectURL(blob);\n\n\t\tlink.href = objectURL;\n\t\tlink.download = filename || 'data.json';\n\t\tlink.target = '_blank';\n\n\t\tvar evt = document.createEvent('MouseEvents');\n\t\tevt.initMouseEvent(\n\t\t\t'click', true, false, window, 0, 0, 0, 0, 0,\n\t\t\tfalse, false, false, false, 0, null\n\t\t);\n\t\tlink.dispatchEvent(evt);\n\t}\n});\n","/*\n\tTranslates the MouseCaster's events into more relevant data that the editor uses.\n*/\ndefine('Input', function() {\n\tvar tower = require('tower');\n\tvar nexus = require('nexus');\n\tvar keyboard = require('keyboard');\n\n\tvar Input = function(scene, mouse) {\n\t\tthis.mouse = mouse;\n\t\tthis.mouse.signal.add(this.onMouse, this);\n\n\t\tthis.mouseDelta = new THREE.Vector3();\n\t\tthis.mousePanMinDistance = 0.1;\n\t\tthis.editorWorldPos = new THREE.Vector3(); // current grid position of mouse\n\n\t\tthis.overTile = null;\n\n\t\tthis._travel = 0;\n\n\t\t/*keyboard.signal.add(function(type, code) {\n\t\t\tif (type === keyboard.eventType.DOWN) {\n\t\t\t\tif (code === keyboard.code.SHIFT) nexus.scene.controls.enabled = false;\n\t\t\t\telse if (code === keyboard.code.A) {\n\t\t\t\t\tnexus.scene.focusOn(nexus.board.tileGroup); // doesn't work??\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (code === keyboard.code.SHIFT) nexus.scene.controls.enabled = true;\n\t\t\t}\n\t\t}, this);*/\n\t};\n\n\tInput.prototype = {\n\t\tupdate: function() {\n\t\t\tvar hit = this.mouse.allHits[0];\n\t\t\tif (hit) { // fun fact, 3 references are faster than 1 function call\n\t\t\t\tthis.editorWorldPos.x = hit.point.x;\n\t\t\t\tthis.editorWorldPos.y = hit.point.y;\n\t\t\t\tthis.editorWorldPos.z = hit.point.z;\n\t\t\t}\n\t\t\tvar dx = this.mouseDelta.x - this.mouse.screenPosition.x;\n\t\t\tvar dy = this.mouseDelta.y - this.mouse.screenPosition.y;\n\t\t\tthis._travel += Math.sqrt(dx * dx + dy * dy); // fun fact, sqrt is on of the most expensive math ops\n\n\t\t\tif (keyboard.ctrl) {\n\t\t\t\tnexus.scene.controls.enabled = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnexus.scene.controls.enabled = false;\n\t\t\t}\n\t\t},\n\n\t\tonMouse: function(type, obj) {\n\t\t\tvar hit;\n\t\t\tif (this.mouse.allHits && this.mouse.allHits[0]) {\n\t\t\t\thit = this.mouse.allHits[0];\n\t\t\t}\n\t\t\tswitch (type) {\n\t\t\t\tcase vg.MouseCaster.WHEEL:\n\t\t\t\t\ttower.userAction.dispatch(vg.MouseCaster.WHEEL, this.overTile, obj);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase vg.MouseCaster.OVER:\n\t\t\t\t\tif (obj) {\n\t\t\t\t\t\tthis.overTile = obj;\n\t\t\t\t\t}\n\t\t\t\t\ttower.userAction.dispatch(vg.MouseCaster.OVER, this.overTile, hit);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase vg.MouseCaster.OUT:\n\t\t\t\t\tthis.overTile = null;\n\t\t\t\t\ttower.userAction.dispatch(vg.MouseCaster.OUT, this.overTile, hit);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase vg.MouseCaster.DOWN:\n\t\t\t\t\tthis.mouseDelta.copy(this.mouse.screenPosition);\n\t\t\t\t\ttower.userAction.dispatch(vg.MouseCaster.DOWN, this.overTile, hit);\n\t\t\t\t\tthis._travel = 0;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase vg.MouseCaster.UP:\n\t\t\t\t\tif (this._travel > this.mousePanMinDistance) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\ttower.userAction.dispatch(vg.MouseCaster.UP, this.overTile, hit);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase vg.MouseCaster.CLICK:\n\t\t\t\t\ttower.userAction.dispatch(vg.MouseCaster.CLICK, this.overTile, hit);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t};\n\n\treturn Input;\n});\n","/*\n\t2D plane that the user moves mouse around on in order to build maps. Provides a working plane to navigate, and a visual aid for tile placement.\n\n\t@author Corey Birnbaum https://github.com/vonWolfehaus/\n */\ndefine('EditorPlane', function() {\n\n\tfunction EditorPlane(scene, grid, mouse) {\n\t\tthis.nexus = require('nexus');\n\t\tthis.tower = require('tower');\n\n\t\tthis.mesh = null;\n\t\tthis.planeMaterial = new THREE.MeshBasicMaterial({\n\t\t\tcolor: 0xffffff,\n\t\t\tside: THREE.DoubleSide\n\t\t});\n\n\t\tthis.hoverMaterial = new THREE.MeshBasicMaterial({\n\t\t\tcolor: 0x1aaeff,\n\t\t\tside: THREE.DoubleSide\n\t\t});\n\n\t\tthis.scene = scene;\n\t\tthis.mouse = mouse;\n\t\tthis.board = this.nexus.board;\n\n\t\tthis.hoverMesh = null; // mesh that hovers over empty cells\n\t\tthis.tileHoverMesh = null; // mesh that hovers over tiles\n\n\t\tthis.setGrid(grid);\n\n\t\tthis.tower.userAction.add(function onUserAction(type, overTile, data) {\n\t\t\tswitch (type) {\n\t\t\t\tcase vg.MouseCaster.OVER:\n\t\t\t\t\tif (overTile && !mouse.down) {\n\t\t\t\t\t\tthis.tileHoverMesh.visible = true;\n\t\t\t\t\t\tthis.tileHoverMesh.position.copy(overTile.position);\n\t\t\t\t\t\tthis.tileHoverMesh.position.y += 1;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase vg.MouseCaster.OUT:\n\t\t\t\t\tthis.tileHoverMesh.visible = false;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}, this);\n\n\t\tthis.tower.tileAction.add(function onUserAction(type, overTile) {\n\t\t\tif (type === this.tower.TILE_CHANGE_HEIGHT) {\n\t\t\t\t// console.log(overTile.position)\n\t\t\t\tthis.tileHoverMesh.position.copy(overTile.position);\n\t\t\t\tthis.tileHoverMesh.position.y += 1;\n\t\t\t}\n\t\t}, this);\n\t}\n\n\tEditorPlane.prototype = {\n\t\tupdatePlane: function(color, size) {\n\t\t\tvar newColor = parseInt(color.replace(/^#/, ''), 16);\n\t\t\tthis.planeMaterial.color.setHex(newColor);\n\n\t\t\tif (this.planeSize !== size) {\n\t\t\t\tthis.planeSize = size;\n\t\t\t\tswitch (this.grid.type) {\n\t\t\t\t\tcase vg.HEX:\n\t\t\t\t\t\tthis._actualSize = size * (vg.SQRT3 * 0.5) * this.grid._cellWidth + this.grid.cellSize;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase vg.SQR:\n\t\t\t\t\t\tthis._actualSize = size * this.grid.cellSize * 2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tthis.generate();\n\t\t\t}\n\t\t},\n\n\t\tgenerate: function() {\n\t\t\tvar geometry;\n\t\t\tif (this.mesh && this.mesh.parent) {\n\t\t\t\tthis.mesh.parent.remove(this.mesh);\n\t\t\t\tthis.mesh.geometry.dispose();\n\t\t\t}\n\n\t\t\tthis.nexus.gen.makeOverlay(this.planeSize);\n\n\t\t\tswitch (this.grid.type) {\n\t\t\t\tcase vg.HEX:\n\t\t\t\t\tgeometry = new THREE.CircleGeometry(this._actualSize, 6);\n\t\t\t\t\tbreak;\n\t\t\t\tcase vg.SQR:\n\t\t\t\t\tgeometry = new THREE.PlaneGeometry(this._actualSize, this._actualSize, 1, 1);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('[EditorPlane.generate] no grid type set');\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tthis.mesh = new THREE.Mesh(geometry, this.planeMaterial);\n\t\t\tthis.mesh.rotation.x = 90 * vg.DEG_TO_RAD;\n\t\t\tthis.mesh.position.y = -0.5;\n\t\t\tif (this.grid.type === vg.HEX) {\n\t\t\t\tthis.mesh.rotation.z = 90 * vg.DEG_TO_RAD;\n\t\t\t}\n\t\t\tthis.scene.add(this.mesh);\n\n\t\t\t// make hover mesh\n\t\t\tif (this.hoverMesh && this.hoverMesh.parent) {\n\t\t\t\tthis.hoverMesh.parent.remove(this.hoverMesh);\n\t\t\t}\n\t\t\tthis.hoverMesh = this.nexus.gen.geoGen.makeTilePoly(this.hoverMaterial);\n\t\t\tthis.nexus.scene.container.add(this.hoverMesh);\n\n\t\t\tif (this.tileHoverMesh && this.tileHoverMesh.parent) {\n\t\t\t\tthis.tileHoverMesh.parent.remove(this.tileHoverMesh);\n\t\t\t}\n\t\t\tthis.tileHoverMesh = this.nexus.gen.geoGen.makeTileHighlight(this.hoverMaterial);\n\t\t\tthis.nexus.scene.container.add(this.tileHoverMesh);\n\t\t\tthis.tileHoverMesh.visible = false;\n\t\t},\n\n\t\tupdate: function() {\n\t\t\tif (this.mouse.allHits.length && !this.mouse.pickedObject) {\n\t\t\t\tvar cell = this.grid.pixelToCell(this.nexus.input.editorWorldPos);\n\t\t\t\tthis.hoverMesh.position.copy(this.grid.cellToPixel(cell));\n\t\t\t\tthis.hoverMesh.position.y += 0.05;\n\t\t\t\tthis.hoverMesh.visible = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.hoverMesh.visible = false;\n\t\t\t}\n\t\t},\n\n\t\tsetGrid: function(grid) {\n\t\t\tthis.grid = grid;\n\t\t\tthis.planeSize = grid.size + 5;\n\t\t\tif (grid.type === vg.HEX) {\n\t\t\t\tthis._actualSize = this.planeSize * (vg.SQRT3 * 0.5) * this.grid._cellWidth + this.grid.cellSize;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis._actualSize = this.planeSize * this.grid.cellSize + this.grid.cellSize;\n\t\t\t}\n\t\t}\n\t};\n\n\treturn EditorPlane;\n});\n"],"sourceRoot":"/source/"}