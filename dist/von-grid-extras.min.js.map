{"version":3,"sources":["GeneratedTile.js","GeneratedTileManager.js","HexGeoGenerator.js","Scene.js","SelectionManager.js","Tile.js"],"names":["vg","GeneratedTile","config","settings","scale","cell","geometry","material","util","merge","Error","this","dispose","uniqueID","generateID","THREE","MeshPhongMaterial","color","randomizeRGB","objectType","entity","userData","selected","highlight","mesh","Mesh","structure","position","rotation","x","DEG_TO_RAD","set","emissive","_emissive","getHex","prototype","select","setHex","deselect","toggle","parent","remove","constructor","GeneratedTileManager","board","geoGen","overlay","makeTiles","tileHeight","reset","makeGenerator","i","c","geo","t","makeTileGeo","height","mats","push","grid","cells","randomInt","copy","cellToPixel","y","h","tileHeightStep","tiles","tileGroup","add","type","HEX","HexGeoGenerator","init","cellSize","makeOverlay","size","mat","LineBasicMaterial","opacity","group","Object3D","tileGeo","tileShape","flatGeo","shapeGeo","vertices","_cel","Cell","_vec3","Vector3","_tileSize","_cellWidth","_cellLength","SQRT3","angle","vec","verts","TAU","Math","cos","sin","Shape","moveTo","z","lineTo","autoClose","ShapeGeometry","rotateX","verticesNeedUpdate","Geometry","amount","bevelEnabled","bevelSegments","steps","bevelSize","bevelThickness","overwrite","ExtrudeGeometry","makeTilePoly","MeshBasicMaterial","makeTileHighlight","require","TorusGeometry","PI","containerObj","createPointsGeometry","abs","line","Line","_cellToPixel","q","s","r","Scene","sceneConfig","controlConfig","sceneSettings","element","document","body","alpha","antialias","clearColor","sortObjects","fog","light","lightPosition","cameraType","cameraPosition","orthoZoom","controlSettings","minDistance","maxDistance","zoomSpeed","noZoom","renderer","WebGLRenderer","setClearColor","width","window","innerWidth","innerHeight","container","DirectionalLight","AmbientLight","normalize","camera","OrthographicCamera","PerspectiveCamera","contolled","controls","OrbitControls","domElement","addEventListener","left","right","top","bottom","aspect","updateProjectionMatrix","setSize","bind","attachTo","style","setPixelRatio","devicePixelRatio","appendChild","render","update","updateOrthoZoom","focusOn","obj","lookAt","SelectionManager","mouse","onSelect","Signal","onDeselect","toggleSelection","signal","onMouse","fireSignal","clearSelection","dispatch","MouseCaster","DOWN","CLICK","Tile","tile","TILE"],"mappings":"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","file":"von-grid-extras.min.js","sourcesContent":["/*\n\tExample GeneratedTile class that constructs its geometry for rendering and holds some gameplay properties.\n\n\t@author Corey Birnbaum https://github.com/vonWolfehaus/\n*/\nvg.GeneratedTile = function(config) {\n\tconfig = config || {};\n\tvar settings = {\n\t\tscale: 1,\n\t\tcell: null, // required vg.Cell\n\t\tgeometry: null, // required threejs geometry\n\t\tmaterial: null // not required but it would improve performance significantly\n\t};\n\tsettings = vg.util.merge(settings, config);\n\n\tif (!settings.cell || !settings.geometry) {\n\t\tthrow new Error('Missing vg.GeneratedTile configuration');\n\t}\n\n\tthis.cell = settings.cell;\n\tif (this.cell.GeneratedTile && this.cell.GeneratedTile !== this) this.cell.GeneratedTile.dispose(); // remove whatever was there\n\tthis.cell.GeneratedTile = this;\n\n\tthis.uniqueID = vg.util.generateID();\n\n\tthis.geometry = settings.geometry;\n\tthis.material = settings.material;\n\tif (!this.material) {\n\t\tthis.material = new THREE.MeshPhongMaterial({\n\t\t\tcolor: vg.util.randomizeRGB('30, 30, 30', 13)\n\t\t});\n\t}\n\n\tthis.objectType = vg.GeneratedTile;\n\tthis.entity = null;\n\tthis.userData = {};\n\n\tthis.selected = false;\n\tthis.highlight = '0x0084cc';\n\n\tthis.mesh = new THREE.Mesh(this.geometry, this.material);\n\tthis.mesh.userData.structure = this;\n\n\t// create references so we can control orientation through this (GeneratedTile), instead of drilling down\n\tthis.position = this.mesh.position;\n\tthis.rotation = this.mesh.rotation;\n\n\t// rotate it to face \"up\" (the threejs coordinate space is Y+)\n\tthis.rotation.x = 90 * vg.DEG_TO_RAD;\n\tthis.mesh.scale.set(settings.scale, settings.scale, 1);\n\n\tif (this.material.emissive) {\n\t\tthis._emissive = this.material.emissive.getHex();\n\t}\n\telse {\n\t\tthis._emissive = null;\n\t}\n};\n\nvg.GeneratedTile.prototype = {\n\tselect: function() {\n\t\tif (this.material.emissive) {\n\t\t\tthis.material.emissive.setHex(this.highlight);\n\t\t}\n\t\tthis.selected = true;\n\t\treturn this;\n\t},\n\n\tdeselect: function() {\n\t\tif (this._emissive !== null && this.material.emissive) {\n\t\t\tthis.material.emissive.setHex(this._emissive);\n\t\t}\n\t\tthis.selected = false;\n\t\treturn this;\n\t},\n\n\ttoggle: function() {\n\t\tif (this.selected) {\n\t\t\tthis.deselect();\n\t\t}\n\t\telse {\n\t\t\tthis.select();\n\t\t}\n\t\treturn this;\n\t},\n\n\tdispose: function() {\n\t\tif (this.cell && this.cell.GeneratedTile) this.cell.GeneratedTile = null;\n\t\tthis.cell = null;\n\t\tthis.position = null;\n\t\tthis.rotation = null;\n\t\tif (this.mesh.parent) this.mesh.parent.remove(this.mesh);\n\t\tthis.mesh.userData.structure = null;\n\t\tthis.mesh = null;\n\t\tthis.material = null;\n\t\tthis.userData = null;\n\t\tthis.entity = null;\n\t\tthis.geometry = null;\n\t\tthis._emissive = null;\n\t}\n};\n\nvg.GeneratedTile.prototype.constructor = vg.GeneratedTile;\n","/*\n\tInstantiates all tiles for a generated grid.\n\n\t@author Corey Birnbaum https://github.com/vonWolfehaus/\n*/\nvg.GeneratedTileManager = function(board) {\n\tthis.board = board;\n\tthis.geoGen = null;\n\tthis.overlay = null;\n};\n\nvg.GeneratedTileManager.prototype = {\n\t/*\n\t\tMake all the geometry and objects necessary to give 3D form to the current grid.\n\t\tIt uses ExtrudeGeometry with a slight bevel and creates a few unique materials for variation.\n\n\t\ttileHeight \t[int] \tHow tall the tile geometry is\n\t*/\n\tmakeTiles: function(tileHeight) {\n\t\tthis.board.reset();\n\t\tthis.makeGenerator();\n\n\t\tvar i, c, geo, t;\n\t\tgeo = this.geoGen.makeTileGeo({\n\t\t\theight: tileHeight || 1\n\t\t});\n\n\t\tvar mats = [];\n\t\tfor (i = 0; i < 10; i++) {\n\t\t\tmats.push(new THREE.MeshPhongMaterial({\n\t\t\t\tcolor: vg.util.randomizeRGB('30, 30, 30', 13)\n\t\t\t}));\n\t\t}\n\n\t\tfor (i in this.board.grid.cells) {\n\t\t\tc = this.board.grid.cells[i];\n\t\t\tt = new vg.GeneratedTile({\n\t\t\t\tcell: c,\n\t\t\t\tgeometry: geo,\n\t\t\t\tmaterial: mats[vg.util.randomInt(0, 9)],\n\t\t\t\tscale: 1\n\t\t\t});\n\n\t\t\tt.position.copy(this.board.grid.cellToPixel(c));\n\t\t\tt.position.y = c.h * this.board.tileHeightStep;\n\n\t\t\tthis.board.tiles.push(t);\n\t\t\tthis.board.tileGroup.add(t.mesh);\n\t\t}\n\t},\n\n\tmakeGenerator: function() {\n\t\tif (!this.geoGen) {\n\t\t\tswitch (this.board.grid.type) {\n\t\t\t\tcase vg.HEX:\n\t\t\t\t\tthis.geoGen = new vg.HexGeoGenerator();\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.geoGen.init(this.board.grid.cellSize);\n\t},\n\n\tmakeOverlay: function(size) {\n\t\tvar mat = new THREE.LineBasicMaterial({\n\t\t\tcolor: 0x000000,\n\t\t\topacity: 0.3\n\t\t});\n\t\tthis.makeGenerator();\n\n\t\tif (this.overlay) {\n\t\t\tthis.board.group.remove(this.overlay);\n\t\t}\n\n\t\tthis.overlay = new THREE.Object3D();\n\n\t\tthis.geoGen.makeOverlay(this.overlay, size, mat);\n\n\t\tthis.board.group.add(this.overlay);\n\t}\n};\n","vg.HexGeoGenerator = function() {\n\tthis.tileGeo = null;\n\tthis.tileShape = null;\n\tthis.flatGeo = null;\n\tthis.shapeGeo = null;\n\tthis.vertices = null;\n\n\tthis._cel = new vg.Cell(); // used as scratch object in various operations\n\tthis._vec3 = new THREE.Vector3();\n\tthis._tileSize = -1;\n\tthis._cellWidth = 0;\n\tthis._cellLength = 0;\n};\n\nvg.HexGeoGenerator.prototype = {\n\t/*\n\t\tMake all the required geometry for constructing tiles.\n\t\tsize \t[int]\tCell size as a radius, in threejs world space.\n\t*/\n\tinit: function(size) {\n\t\tif (this.flatGeo) this.flatGeo.dispose();\n\t\tif (this.shapeGeo) this.shapeGeo.dispose();\n\t\tif (size === this._tileSize) return; // already generated necessary geo\n\t\tthis._tileSize = size || 10;\n\t\tthis._cellWidth = this._tileSize * 2;\n\t\tthis._cellLength = (vg.SQRT3 * 0.5) * this._cellWidth;\n\n\t\t// create base shape used for building geometry\n\t\tvar i, verts = [];\n\t\tvar angle, vec;\n\n\t\t// create the skeleton of the hex\n\t\tfor (i = 0; i < 6; i++) {\n\t\t\tangle = (vg.TAU / 6) * i;\n\t\t\tvec = new THREE.Vector3(this._tileSize * Math.cos(angle), 0, this._tileSize * Math.sin(angle));\n\t\t\tverts.push(vec);\n\t\t}\n\t\tthis.vertices = verts;\n\n\t\t// copy the verts into a shape for the geometry to use\n\t\tthis.tileShape = new THREE.Shape();\n\t\tthis.tileShape.moveTo(verts[0].x, verts[0].z);\n\t\tfor (i = 1; i < 6; i++) {\n\t\t\tthis.tileShape.lineTo(verts[i].x, verts[i].z);\n\t\t}\n\t\tthis.tileShape.lineTo(verts[0].x, verts[0].z);\n\t\tthis.tileShape.autoClose = true;\n\n\t\tthis.shapeGeo = new THREE.ShapeGeometry(this.tileShape);\n\t\tthis.shapeGeo.rotateX(90 * vg.DEG_TO_RAD);\n\t\tthis.shapeGeo.verticesNeedUpdate = true;\n\n\t\tthis.flatGeo = new THREE.Geometry();\n\t\tthis.flatGeo.vertices = verts;\n\t\t// this.flatGeo.rotateX(90 * vg.DEG_TO_RAD);\n\t\tthis.flatGeo.verticesNeedUpdate = true;\n\t},\n\n\tmakeTileGeo: function(config) {\n\t\tconfig = config || {};\n\t\tvar settings = {\n\t\t\tamount: 1,\n\t\t\tbevelEnabled: false,\n\t\t\tbevelSegments: 1,\n\t\t\tsteps: 1,\n\t\t\tbevelSize: 0.5,\n\t\t\tbevelThickness: 0.5\n\t\t};\n\t\tvg.util.overwrite(settings, config);\n\t\tsettings.amount = config.height || settings.amount;\n\n\t\tif (this.tileGeo) this.tileGeo.dispose();\n\t\tthis.tileGeo = new THREE.ExtrudeGeometry(this.tileShape, settings);\n\t\t// this.tileGeo.translate(0, -settings.amount, 0); // adjust verts so top poly is at y:0\n\n\t\treturn this.tileGeo;\n\t},\n\n\tmakeTilePoly: function(material) {\n\t\tif (!material) {\n\t\t\tmaterial = new THREE.MeshBasicMaterial({color: 0x24b4ff});\n\t\t}\n\t\tvar mesh = new THREE.Mesh(this.shapeGeo, material);\n\t\t// this._vec3.set(1, 0, 0);\n\t\t// mesh.rotateOnAxis(this._vec3, vg.PI/2);\n\t\treturn mesh;\n\t},\n\n\tmakeTileHighlight: function(material) {\n\t\tvar grid = require('nexus').grid;\n\t\tif (!material) {\n\t\t\tmaterial = new THREE.MeshBasicMaterial({color: 0x24b4ff});\n\t\t}\n\n\t\tvar geo = new THREE.TorusGeometry(grid.cellSize, 2, 3, 6);\n\t\tvar mesh = new THREE.Mesh(geo, material);\n\n\t\tmesh.rotateX(vg.PI/2);\n\t\tmesh.scale.x = 0.8;\n\t\tmesh.scale.y = 0.8;\n\n\t\treturn mesh;\n\t},\n\n\t/*\n\t\tMake an outlined grid that shows the shape and placement of all its cells.\n\t\tcontainerObj\t[Object3D]\tContainer to add the tile outlines to\n\t\tsize \t\t\t[int]\t\tNumber of cells to generate, as a radius (of the hex-shaped grid)\n\t\tmaterial \t\t[Material]\tthreejs material to use for the Lines\n\t*/\n\tmakeOverlay: function(containerObj, size, material) {\n\t\tvar x, y, z;\n\t\tvar geo = this.tileShape.createPointsGeometry();\n\t\tfor (x = -size; x < size+1; x++) {\n\t\t\tfor (y = -size; y < size+1; y++) {\n\t\t\t\tz = -x-y;\n\t\t\t\tif (Math.abs(x) <= size && Math.abs(y) <= size && Math.abs(z) <= size) {\n\t\t\t\t\tthis._cel.set(x, y, z); // define the cell\n\t\t\t\t\tvar line = new THREE.Line(geo, material);\n\t\t\t\t\tline.position.copy(this._cellToPixel(this._cel));\n\t\t\t\t\tline.position.y = 0.5;\n\t\t\t\t\tline.rotation.x = 90 * vg.DEG_TO_RAD;\n\t\t\t\t\tcontainerObj.add(line);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/*var tally = 0;\n\t\tfor (x = 0; x < containerObj.children.length; x++) {\n\t\t\ttally += containerObj.children[x].geometry.vertices.length;\n\t\t}\n\t\tconsole.log('verts: '+tally);*/\n\t},\n\n\t_cellToPixel: function(cell) {\n\t\tthis._vec3.x = cell.q * this._cellWidth * 0.75;\n\t\tthis._vec3.y = cell.h;\n\t\tthis._vec3.z = -((cell.s - cell.r) * this._cellLength * 0.5);\n\t\treturn this._vec3;\n\t},\n};\n","/*\n\tSets up and manages a THREEjs container, camera, and light, making it easy to get going.\n\tAlso provides camera control.\n\n\tAssumes full screen.\n */\n// 'utils/Tools'\nvg.Scene = function(sceneConfig, controlConfig) {\n\tvar sceneSettings = {\n\t\telement: document.body,\n\t\talpha: true,\n\t\tantialias: true,\n\t\tclearColor: '#fff',\n\t\tsortObjects: false,\n\t\tfog: null,\n\t\tlight: null,\n\t\tlightPosition: null,\n\t\tcameraType: 'PerspectiveCamera',\n\t\tcameraPosition: null, // {x, y, z}\n\t\torthoZoom: 4\n\t};\n\n\tvar controlSettings = {\n\t\tminDistance: 100,\n\t\tmaxDistance: 1000,\n\t\tzoomSpeed: 2,\n\t\tnoZoom: false\n\t};\n\n\tsceneSettings = vg.util.merge(sceneSettings, sceneConfig);\n\tif (typeof controlConfig !== 'boolean') {\n\t\tcontrolSettings = vg.util.merge(controlSettings, controlConfig);\n\t}\n\n\tthis.renderer = new THREE.WebGLRenderer({\n\t\talpha: sceneSettings.alpha,\n\t\tantialias: sceneSettings.antialias\n\t});\n\tthis.renderer.setClearColor(sceneSettings.clearColor, 0);\n\tthis.renderer.sortObjects = sceneSettings.sortObjects;\n\n\tthis.width = window.innerWidth;\n\tthis.height = window.innerHeight;\n\n\tthis.orthoZoom = sceneSettings.orthoZoom;\n\n\tthis.container = new THREE.Scene();\n\tthis.container.fog = sceneSettings.fog;\n\n\tif (!sceneSettings.light) {\n\t\tsceneSettings.light = new THREE.DirectionalLight(0xdddddd);\n\t\tthis.container.add(new THREE.AmbientLight(0xdddddd));\n\t}\n\tif (!sceneSettings.lightPosition) {\n\t\tsceneSettings.light.position.set(-1, 1, -1).normalize();\n\t}\n\tthis.container.add(sceneSettings.light);\n\n\tif (sceneSettings.cameraType === 'OrthographicCamera') {\n\t\tvar width = window.innerWidth / this.orthoZoom;\n\t\tvar height = window.innerHeight / this.orthoZoom;\n\t\tthis.camera = new THREE.OrthographicCamera(width / -2, width / 2, height / 2, height / -2, 1, 5000);\n\t}\n\telse {\n\t\tthis.camera = new THREE.PerspectiveCamera(50, this.width / this.height, 1, 5000);\n\t}\n\n\tthis.contolled = !!controlConfig;\n\tif (this.contolled) {\n\t\tthis.controls = new THREE.OrbitControls(this.camera, this.renderer.domElement);\n\t\tvg.util.overwrite(this.controls, controlSettings);\n\t}\n\n\tif (sceneSettings.cameraPosition) {\n\t\tthis.camera.position.copy(sceneSettings.cameraPosition);\n\t}\n\n\twindow.addEventListener('resize', function onWindowResize() {\n\t\tthis.width = window.innerWidth;\n\t\tthis.height = window.innerHeight;\n\t\tif (this.camera.type === 'OrthographicCamera') {\n\t\t\tvar width = this.width / this.orthoZoom;\n\t\t\tvar height = this.height / this.orthoZoom;\n\t\t\tthis.camera.left = width / -2;\n\t\t\tthis.camera.right = width / 2;\n\t\t\tthis.camera.top = height / 2;\n\t\t\tthis.camera.bottom = height / -2;\n\t\t}\n\t\telse {\n\t\t\tthis.camera.aspect = this.width / this.height;\n\t\t}\n\t\tthis.camera.updateProjectionMatrix();\n\t\tthis.renderer.setSize(this.width, this.height);\n\t}.bind(this), false);\n\n\tthis.attachTo(sceneSettings.element);\n};\n\nvg.Scene.prototype = {\n\tconstructor: vg.Scene,\n\n\tattachTo: function(element) {\n\t\telement.style.width = this.width + 'px';\n\t\telement.style.height = this.height + 'px';\n\t\tthis.renderer.setPixelRatio(window.devicePixelRatio);\n\t\tthis.renderer.setSize(this.width, this.height);\n\t\telement.appendChild(this.renderer.domElement);\n\t},\n\n\tadd: function(mesh) {\n\t\tthis.container.add(mesh);\n\t},\n\n\tremove: function(mesh) {\n\t\tthis.container.remove(mesh);\n\t},\n\n\trender: function() {\n\t\tif (this.contolled) this.controls.update();\n\t\tthis.renderer.render(this.container, this.camera);\n\t},\n\n\tupdateOrthoZoom: function() {\n\t\tif (this.orthoZoom <= 0) {\n\t\t\tthis.orthoZoom = 0;\n\t\t\treturn;\n\t\t}\n\t\tvar width = this.width / this.orthoZoom;\n\t\tvar height = this.height / this.orthoZoom;\n\t\tthis.camera.left = width / -2;\n\t\tthis.camera.right = width / 2;\n\t\tthis.camera.top = height / 2;\n\t\tthis.camera.bottom = height / -2;\n\t\tthis.camera.updateProjectionMatrix();\n\t},\n\n\tfocusOn: function(obj) {\n\t\tthis.camera.lookAt(obj.position);\n\t}\n};\n","vg.SelectionManager = function(mouse) {\n\tthis.mouse = mouse;\n\n\tthis.onSelect = new vg.Signal();\n\tthis.onDeselect = new vg.Signal();\n\n\tthis.selected = null;\n\t// deselect if player clicked on the same thing twice\n\tthis.toggleSelection = false;\n\n\t// allow multiple entities to be selected at once\n\t// this.multiselect = false; // todo\n\t// this.allSelected = new LinkedList();\n\n\tthis.mouse.signal.add(this.onMouse, this);\n};\n\nvg.SelectionManager.prototype = {\n\tselect: function(obj, fireSignal) {\n\t\tif (!obj) return;\n\t\tfireSignal = fireSignal || true;\n\n\t\tif (this.selected !== obj) {\n\t\t\t// deselect previous object\n\t\t\tthis.clearSelection(fireSignal);\n\t\t}\n\t\tif (obj.selected) {\n\t\t\tif (this.toggleSelection) {\n\t\t\t\tif (fireSignal) {\n\t\t\t\t\tthis.onDeselect.dispatch(obj);\n\t\t\t\t}\n\t\t\t\tobj.deselect();\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tobj.select();\n\t\t}\n\n\t\tthis.selected = obj;\n\t\tif (fireSignal) {\n\t\t\tthis.onSelect.dispatch(obj);\n\t\t}\n\t},\n\n\tclearSelection: function(fireSignal) {\n\t\tfireSignal = fireSignal || true;\n\t\tif (this.selected) {\n\t\t\tif (fireSignal) {\n\t\t\t\tthis.onDeselect.dispatch(this.selected);\n\t\t\t}\n\t\t\tthis.selected.deselect();\n\t\t}\n\t\tthis.selected = null;\n\t},\n\n\tonMouse: function(type, obj) {\n\t\tswitch (type) {\n\t\t\tcase vg.MouseCaster.DOWN:\n\t\t\t\tif (!obj) {\n\t\t\t\t\tthis.clearSelection();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase vg.MouseCaster.CLICK:\n\t\t\t\tthis.select(obj);\n\t\t\t\tbreak;\n\t\t}\n\t}\n};\n\nvg.SelectionManager.prototype.constructor = vg.SelectionManager;\n","/*\n\tExample tile class that constructs its geometry for rendering and holds some gameplay properties.\n\n\t@author Corey Birnbaum https://github.com/vonWolfehaus/\n*/\nvg.Tile = function(config) {\n\tconfig = config || {};\n\tvar settings = {\n\t\tscale: 1,\n\t\tcell: null, // required vg.Cell\n\t\tgeometry: null, // required threejs geometry\n\t\tmaterial: null // not required but it would improve performance significantly\n\t};\n\tsettings = vg.util.merge(settings, config);\n\n\tif (!settings.cell || !settings.geometry) {\n\t\tthrow new Error('Missing vg.Tile configuration');\n\t}\n\n\tthis.cell = settings.cell;\n\tif (this.cell.tile && this.cell.tile !== this) this.cell.tile.dispose(); // remove whatever was there\n\tthis.cell.tile = this;\n\n\tthis.uniqueID = vg.util.generateID();\n\n\tthis.geometry = settings.geometry;\n\tthis.material = settings.material;\n\tif (!this.material) {\n\t\tthis.material = new THREE.MeshPhongMaterial({\n\t\t\tcolor: vg.util.randomizeRGB('30, 30, 30', 13)\n\t\t});\n\t}\n\n\tthis.objectType = vg.TILE;\n\tthis.entity = null;\n\tthis.userData = {};\n\n\tthis.selected = false;\n\tthis.highlight = '0x0084cc';\n\n\tthis.mesh = new THREE.Mesh(this.geometry, this.material);\n\tthis.mesh.userData.structure = this;\n\n\t// create references so we can control orientation through this (Tile), instead of drilling down\n\tthis.position = this.mesh.position;\n\tthis.rotation = this.mesh.rotation;\n\n\t// rotate it to face \"up\" (the threejs coordinate space is Y+)\n\tthis.rotation.x = 90 * vg.DEG_TO_RAD;\n\tthis.mesh.scale.set(settings.scale, settings.scale, 1);\n\n\tif (this.material.emissive) {\n\t\tthis._emissive = this.material.emissive.getHex();\n\t}\n\telse {\n\t\tthis._emissive = null;\n\t}\n};\n\nvg.Tile.prototype = {\n\tselect: function() {\n\t\tif (this.material.emissive) {\n\t\t\tthis.material.emissive.setHex(this.highlight);\n\t\t}\n\t\tthis.selected = true;\n\t\treturn this;\n\t},\n\n\tdeselect: function() {\n\t\tif (this._emissive !== null && this.material.emissive) {\n\t\t\tthis.material.emissive.setHex(this._emissive);\n\t\t}\n\t\tthis.selected = false;\n\t\treturn this;\n\t},\n\n\ttoggle: function() {\n\t\tif (this.selected) {\n\t\t\tthis.deselect();\n\t\t}\n\t\telse {\n\t\t\tthis.select();\n\t\t}\n\t\treturn this;\n\t},\n\n\tdispose: function() {\n\t\tif (this.cell && this.cell.tile) this.cell.tile = null;\n\t\tthis.cell = null;\n\t\tthis.position = null;\n\t\tthis.rotation = null;\n\t\tif (this.mesh.parent) this.mesh.parent.remove(this.mesh);\n\t\tthis.mesh.userData.structure = null;\n\t\tthis.mesh = null;\n\t\tthis.material = null;\n\t\tthis.userData = null;\n\t\tthis.entity = null;\n\t\tthis.geometry = null;\n\t\tthis._emissive = null;\n\t}\n};\n\nvg.Tile.prototype.constructor = vg.Tile;\n"],"sourceRoot":"/source/"}