{"version":3,"sources":["HexGeoGenerator.js","Scene.js","SelectionManager.js","Tile.js"],"names":["vg","HexGeoGenerator","this","tileGeo","tileShape","flatGeo","shapeGeo","vertices","_cel","Cell","_vec3","THREE","Vector3","_tileSize","_cellWidth","_cellLength","prototype","init","size","dispose","SQRT3","i","angle","vec","verts","TAU","Math","cos","sin","push","Shape","moveTo","x","z","lineTo","autoClose","ShapeGeometry","rotateX","DEG_TO_RAD","verticesNeedUpdate","Geometry","makeTileGeo","config","settings","amount","bevelEnabled","bevelSegments","steps","bevelSize","bevelThickness","util","overwrite","height","ExtrudeGeometry","makeTilePoly","material","MeshBasicMaterial","color","mesh","Mesh","makeTileHighlight","grid","require","geo","TorusGeometry","cellSize","PI","scale","y","makeOverlay","containerObj","createPointsGeometry","abs","set","line","Line","position","copy","_cellToPixel","rotation","add","cell","q","h","s","r","Scene","sceneConfig","controlConfig","sceneSettings","element","document","body","alpha","antialias","clearColor","sortObjects","fog","light","lightPosition","cameraType","cameraPosition","orthoZoom","controlSettings","minDistance","maxDistance","zoomSpeed","noZoom","merge","renderer","WebGLRenderer","setClearColor","width","window","innerWidth","innerHeight","container","DirectionalLight","AmbientLight","normalize","camera","OrthographicCamera","PerspectiveCamera","contolled","controls","OrbitControls","domElement","addEventListener","type","left","right","top","bottom","aspect","updateProjectionMatrix","setSize","bind","attachTo","constructor","style","setPixelRatio","devicePixelRatio","appendChild","remove","render","update","updateOrthoZoom","focusOn","obj","lookAt","SelectionManager","mouse","onSelect","Signal","onDeselect","selected","toggleSelection","signal","onMouse","select","fireSignal","clearSelection","dispatch","deselect","MouseCaster","DOWN","CLICK","Tile","geometry","Error","tile","uniqueID","generateID","MeshPhongMaterial","randomizeRGB","objectType","TILE","entity","userData","highlight","structure","emissive","_emissive","getHex","setHex","toggle","parent"],"mappings":"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","file":"von-grid-extras.min.js","sourcesContent":["vg.HexGeoGenerator = function() {\n\tthis.tileGeo = null;\n\tthis.tileShape = null;\n\tthis.flatGeo = null;\n\tthis.shapeGeo = null;\n\tthis.vertices = null;\n\n\tthis._cel = new vg.Cell(); // used as scratch object in various operations\n\tthis._vec3 = new THREE.Vector3();\n\tthis._tileSize = -1;\n\tthis._cellWidth = 0;\n\tthis._cellLength = 0;\n};\n\nvg.HexGeoGenerator.prototype = {\n\t/*\n\t\tMake all the required geometry for constructing tiles.\n\t\tsize \t[int]\tCell size as a radius, in threejs world space.\n\t*/\n\tinit: function(size) {\n\t\tif (this.flatGeo) this.flatGeo.dispose();\n\t\tif (this.shapeGeo) this.shapeGeo.dispose();\n\t\tif (size === this._tileSize) return; // already generated necessary geo\n\t\tthis._tileSize = size || 10;\n\t\tthis._cellWidth = this._tileSize * 2;\n\t\tthis._cellLength = (vg.SQRT3 * 0.5) * this._cellWidth;\n\n\t\t// create base shape used for building geometry\n\t\tvar i, verts = [];\n\t\tvar angle, vec;\n\n\t\t// create the skeleton of the hex\n\t\tfor (i = 0; i < 6; i++) {\n\t\t\tangle = (vg.TAU / 6) * i;\n\t\t\tvec = new THREE.Vector3(this._tileSize * Math.cos(angle), 0, this._tileSize * Math.sin(angle));\n\t\t\tverts.push(vec);\n\t\t}\n\t\tthis.vertices = verts;\n\n\t\t// copy the verts into a shape for the geometry to use\n\t\tthis.tileShape = new THREE.Shape();\n\t\tthis.tileShape.moveTo(verts[0].x, verts[0].z);\n\t\tfor (i = 1; i < 6; i++) {\n\t\t\tthis.tileShape.lineTo(verts[i].x, verts[i].z);\n\t\t}\n\t\tthis.tileShape.lineTo(verts[0].x, verts[0].z);\n\t\tthis.tileShape.autoClose = true;\n\n\t\tthis.shapeGeo = new THREE.ShapeGeometry(this.tileShape);\n\t\tthis.shapeGeo.rotateX(90 * vg.DEG_TO_RAD);\n\t\tthis.shapeGeo.verticesNeedUpdate = true;\n\n\t\tthis.flatGeo = new THREE.Geometry();\n\t\tthis.flatGeo.vertices = verts;\n\t\t// this.flatGeo.rotateX(90 * vg.DEG_TO_RAD);\n\t\tthis.flatGeo.verticesNeedUpdate = true;\n\t},\n\n\tmakeTileGeo: function(config) {\n\t\tconfig = config || {};\n\t\tvar settings = {\n\t\t\tamount: 1,\n\t\t\tbevelEnabled: true,\n\t\t\tbevelSegments: 1,\n\t\t\tsteps: 1,\n\t\t\tbevelSize: 0.5,\n\t\t\tbevelThickness: 0.5\n\t\t};\n\t\tvg.util.overwrite(settings, config);\n\t\tsettings.amount = config.height || settings.amount;\n\n\t\tif (this.tileGeo) this.tileGeo.dispose();\n\t\tthis.tileGeo = new THREE.ExtrudeGeometry(this.tileShape, settings);\n\t\t// this.tileGeo.translate(0, -settings.amount, 0); // adjust verts so top poly is at y:0\n\n\t\treturn this.tileGeo;\n\t},\n\n\tmakeTilePoly: function(material) {\n\t\tif (!material) {\n\t\t\tmaterial = new THREE.MeshBasicMaterial({color: 0x24b4ff});\n\t\t}\n\t\tvar mesh = new THREE.Mesh(this.shapeGeo, material);\n\t\t// this._vec3.set(1, 0, 0);\n\t\t// mesh.rotateOnAxis(this._vec3, vg.PI/2);\n\t\treturn mesh;\n\t},\n\n\tmakeTileHighlight: function(material) {\n\t\tvar grid = require('nexus').grid;\n\t\tif (!material) {\n\t\t\tmaterial = new THREE.MeshBasicMaterial({color: 0x24b4ff});\n\t\t}\n\n\t\tvar geo = new THREE.TorusGeometry(grid.cellSize, 2, 3, 6);\n\t\tvar mesh = new THREE.Mesh(geo, material);\n\n\t\tmesh.rotateX(vg.PI/2);\n\t\tmesh.scale.x = 0.8;\n\t\tmesh.scale.y = 0.8;\n\n\t\treturn mesh;\n\t},\n\n\t/*\n\t\tMake an outlined grid that shows the shape and placement of all its cells.\n\t\tcontainerObj\t[Object3D]\tContainer to add the tile outlines to\n\t\tsize \t\t\t[int]\t\tNumber of cells to generate, as a radius (of the hex-shaped grid)\n\t\tmaterial \t\t[Material]\tthreejs material to use for the Lines\n\t*/\n\tmakeOverlay: function(containerObj, size, material) {\n\t\tvar x, y, z;\n\t\tvar geo = this.tileShape.createPointsGeometry();\n\t\tfor (x = -size; x < size+1; x++) {\n\t\t\tfor (y = -size; y < size+1; y++) {\n\t\t\t\tz = -x-y;\n\t\t\t\tif (Math.abs(x) <= size && Math.abs(y) <= size && Math.abs(z) <= size) {\n\t\t\t\t\tthis._cel.set(x, y, z); // define the cell\n\t\t\t\t\tvar line = new THREE.Line(geo, material);\n\t\t\t\t\tline.position.copy(this._cellToPixel(this._cel));\n\t\t\t\t\tline.position.y = 0.5;\n\t\t\t\t\tline.rotation.x = 90 * vg.DEG_TO_RAD;\n\t\t\t\t\tcontainerObj.add(line);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/*var tally = 0;\n\t\tfor (x = 0; x < containerObj.children.length; x++) {\n\t\t\ttally += containerObj.children[x].geometry.vertices.length;\n\t\t}\n\t\tconsole.log('verts: '+tally);*/\n\t},\n\n\t_cellToPixel: function(cell) {\n\t\tthis._vec3.x = cell.q * this._cellWidth * 0.75;\n\t\tthis._vec3.y = cell.h;\n\t\tthis._vec3.z = -((cell.s - cell.r) * this._cellLength * 0.5);\n\t\treturn this._vec3;\n\t},\n};\n","/*\n\tSets up and manages a THREEjs container, camera, and light, making it easy to get going.\n\tAlso provides camera control.\n\n\tAssumes full screen.\n */\n// 'utils/Tools'\nvg.Scene = function(sceneConfig, controlConfig) {\n\tvar sceneSettings = {\n\t\telement: document.body,\n\t\talpha: true,\n\t\tantialias: true,\n\t\tclearColor: '#fff',\n\t\tsortObjects: false,\n\t\tfog: null,\n\t\tlight: null,\n\t\tlightPosition: null,\n\t\tcameraType: 'PerspectiveCamera',\n\t\tcameraPosition: null, // {x, y, z}\n\t\torthoZoom: 4\n\t};\n\n\tvar controlSettings = {\n\t\tminDistance: 100,\n\t\tmaxDistance: 1000,\n\t\tzoomSpeed: 2,\n\t\tnoZoom: false\n\t};\n\n\tsceneSettings = vg.util.merge(sceneSettings, sceneConfig);\n\tif (typeof controlConfig !== 'boolean') {\n\t\tcontrolSettings = vg.util.merge(controlSettings, controlConfig);\n\t}\n\n\tthis.renderer = new THREE.WebGLRenderer({\n\t\talpha: sceneSettings.alpha,\n\t\tantialias: sceneSettings.antialias\n\t});\n\tthis.renderer.setClearColor(sceneSettings.clearColor, 0);\n\tthis.renderer.sortObjects = sceneSettings.sortObjects;\n\n\tthis.width = window.innerWidth;\n\tthis.height = window.innerHeight;\n\n\tthis.orthoZoom = sceneSettings.orthoZoom;\n\n\tthis.container = new THREE.Scene();\n\tthis.container.fog = sceneSettings.fog;\n\n\tif (!sceneSettings.light) {\n\t\tsceneSettings.light = new THREE.DirectionalLight(0xdddddd);\n\t\tthis.container.add(new THREE.AmbientLight(0xdddddd));\n\t}\n\tif (!sceneSettings.lightPosition) {\n\t\tsceneSettings.light.position.set(-1, 1, -1).normalize();\n\t}\n\tthis.container.add(sceneSettings.light);\n\n\tif (sceneSettings.cameraType === 'OrthographicCamera') {\n\t\tvar width = window.innerWidth / this.orthoZoom;\n\t\tvar height = window.innerHeight / this.orthoZoom;\n\t\tthis.camera = new THREE.OrthographicCamera(width / -2, width / 2, height / 2, height / -2, 1, 5000);\n\t}\n\telse {\n\t\tthis.camera = new THREE.PerspectiveCamera(50, this.width / this.height, 1, 5000);\n\t}\n\n\tthis.contolled = !!controlConfig;\n\tif (this.contolled) {\n\t\tthis.controls = new THREE.OrbitControls(this.camera, this.renderer.domElement);\n\t\tvg.util.overwrite(this.controls, controlSettings);\n\t}\n\n\tif (sceneSettings.cameraPosition) {\n\t\tthis.camera.position.copy(sceneSettings.cameraPosition);\n\t}\n\n\twindow.addEventListener('resize', function onWindowResize() {\n\t\tthis.width = window.innerWidth;\n\t\tthis.height = window.innerHeight;\n\t\tif (this.camera.type === 'OrthographicCamera') {\n\t\t\tvar width = this.width / this.orthoZoom;\n\t\t\tvar height = this.height / this.orthoZoom;\n\t\t\tthis.camera.left = width / -2;\n\t\t\tthis.camera.right = width / 2;\n\t\t\tthis.camera.top = height / 2;\n\t\t\tthis.camera.bottom = height / -2;\n\t\t}\n\t\telse {\n\t\t\tthis.camera.aspect = this.width / this.height;\n\t\t}\n\t\tthis.camera.updateProjectionMatrix();\n\t\tthis.renderer.setSize(this.width, this.height);\n\t}.bind(this), false);\n\n\tthis.attachTo(sceneSettings.element);\n};\n\nvg.Scene.prototype = {\n\tconstructor: vg.Scene,\n\n\tattachTo: function(element) {\n\t\telement.style.width = this.width + 'px';\n\t\telement.style.height = this.height + 'px';\n\t\tthis.renderer.setPixelRatio(window.devicePixelRatio);\n\t\tthis.renderer.setSize(this.width, this.height);\n\t\telement.appendChild(this.renderer.domElement);\n\t},\n\n\tadd: function(mesh) {\n\t\tthis.container.add(mesh);\n\t},\n\n\tremove: function(mesh) {\n\t\tthis.container.remove(mesh);\n\t},\n\n\trender: function() {\n\t\tif (this.contolled) this.controls.update();\n\t\tthis.renderer.render(this.container, this.camera);\n\t},\n\n\tupdateOrthoZoom: function() {\n\t\tif (this.orthoZoom <= 0) {\n\t\t\tthis.orthoZoom = 0;\n\t\t\treturn;\n\t\t}\n\t\tvar width = this.width / this.orthoZoom;\n\t\tvar height = this.height / this.orthoZoom;\n\t\tthis.camera.left = width / -2;\n\t\tthis.camera.right = width / 2;\n\t\tthis.camera.top = height / 2;\n\t\tthis.camera.bottom = height / -2;\n\t\tthis.camera.updateProjectionMatrix();\n\t},\n\n\tfocusOn: function(obj) {\n\t\tthis.camera.lookAt(obj.position);\n\t}\n};\n","vg.SelectionManager = function(mouse) {\n\tthis.mouse = mouse;\n\n\tthis.onSelect = new vg.Signal();\n\tthis.onDeselect = new vg.Signal();\n\n\tthis.selected = null;\n\t// deselect if player clicked on the same thing twice\n\tthis.toggleSelection = false;\n\n\t// allow multiple entities to be selected at once\n\t// this.multiselect = false; // todo\n\t// this.allSelected = new LinkedList();\n\n\tthis.mouse.signal.add(this.onMouse, this);\n};\n\nvg.SelectionManager.prototype = {\n\tselect: function(obj, fireSignal) {\n\t\tif (!obj) return;\n\t\tfireSignal = fireSignal || true;\n\n\t\tif (this.selected !== obj) {\n\t\t\t// deselect previous object\n\t\t\tthis.clearSelection(fireSignal);\n\t\t}\n\t\tif (obj.selected) {\n\t\t\tif (this.toggleSelection) {\n\t\t\t\tif (fireSignal) {\n\t\t\t\t\tthis.onDeselect.dispatch(obj);\n\t\t\t\t}\n\t\t\t\tobj.deselect();\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tobj.select();\n\t\t}\n\n\t\tthis.selected = obj;\n\t\tif (fireSignal) {\n\t\t\tthis.onSelect.dispatch(obj);\n\t\t}\n\t},\n\n\tclearSelection: function(fireSignal) {\n\t\tfireSignal = fireSignal || true;\n\t\tif (this.selected) {\n\t\t\tif (fireSignal) {\n\t\t\t\tthis.onDeselect.dispatch(this.selected);\n\t\t\t}\n\t\t\tthis.selected.deselect();\n\t\t}\n\t\tthis.selected = null;\n\t},\n\n\tonMouse: function(type, obj) {\n\t\tswitch (type) {\n\t\t\tcase vg.MouseCaster.DOWN:\n\t\t\t\tif (!obj) {\n\t\t\t\t\tthis.clearSelection();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase vg.MouseCaster.CLICK:\n\t\t\t\tthis.select(obj);\n\t\t\t\tbreak;\n\t\t}\n\t}\n};\n\nvg.SelectionManager.prototype.constructor = vg.SelectionManager;\n","/*\n\tExample tile class that constructs its geometry for rendering and holds some gameplay properties.\n\n\t@author Corey Birnbaum https://github.com/vonWolfehaus/\n*/\nvg.Tile = function(config) {\n\tconfig = config || {};\n\tvar settings = {\n\t\tscale: 1,\n\t\tcell: null, // required vg.Cell\n\t\tgeometry: null, // required threejs geometry\n\t\tmaterial: null // not required but it would improve performance significantly\n\t};\n\tsettings = vg.util.merge(settings, config);\n\n\tif (!settings.cell || !settings.geometry) {\n\t\tthrow new Error('Missing vg.Tile configuration');\n\t}\n\n\tthis.cell = settings.cell;\n\tif (this.cell.tile && this.cell.tile !== this) this.cell.tile.dispose(); // remove whatever was there\n\tthis.cell.tile = this;\n\n\tthis.uniqueID = vg.util.generateID();\n\n\tthis.geometry = settings.geometry;\n\tthis.material = settings.material;\n\tif (!this.material) {\n\t\tthis.material = new THREE.MeshPhongMaterial({\n\t\t\tcolor: vg.util.randomizeRGB('30, 30, 30', 13)\n\t\t});\n\t}\n\n\tthis.objectType = vg.TILE;\n\tthis.entity = null;\n\tthis.userData = {};\n\n\tthis.selected = false;\n\tthis.highlight = '0x0084cc';\n\n\tthis.mesh = new THREE.Mesh(this.geometry, this.material);\n\tthis.mesh.userData.structure = this;\n\n\t// create references so we can control orientation through this (Tile), instead of drilling down\n\tthis.position = this.mesh.position;\n\tthis.rotation = this.mesh.rotation;\n\n\t// rotate it to face \"up\" (the threejs coordinate space is Y+)\n\tthis.rotation.x = 90 * vg.DEG_TO_RAD;\n\tthis.mesh.scale.set(settings.scale, settings.scale, 1);\n\n\tif (this.material.emissive) {\n\t\tthis._emissive = this.material.emissive.getHex();\n\t}\n\telse {\n\t\tthis._emissive = null;\n\t}\n};\n\nvg.Tile.prototype = {\n\tselect: function() {\n\t\tif (this.material.emissive) {\n\t\t\tthis.material.emissive.setHex(this.highlight);\n\t\t}\n\t\tthis.selected = true;\n\t\treturn this;\n\t},\n\n\tdeselect: function() {\n\t\tif (this._emissive !== null && this.material.emissive) {\n\t\t\tthis.material.emissive.setHex(this._emissive);\n\t\t}\n\t\tthis.selected = false;\n\t\treturn this;\n\t},\n\n\ttoggle: function() {\n\t\tif (this.selected) {\n\t\t\tthis.deselect();\n\t\t}\n\t\telse {\n\t\t\tthis.select();\n\t\t}\n\t\treturn this;\n\t},\n\n\tdispose: function() {\n\t\tif (this.cell && this.cell.tile) this.cell.tile = null;\n\t\tthis.cell = null;\n\t\tthis.position = null;\n\t\tthis.rotation = null;\n\t\tif (this.mesh.parent) this.mesh.parent.remove(this.mesh);\n\t\tthis.mesh.userData.structure = null;\n\t\tthis.mesh = null;\n\t\tthis.material = null;\n\t\tthis.userData = null;\n\t\tthis.entity = null;\n\t\tthis.geometry = null;\n\t\tthis._emissive = null;\n\t}\n};\n\nvg.Tile.prototype.constructor = vg.Tile;\n"],"sourceRoot":"/source/"}