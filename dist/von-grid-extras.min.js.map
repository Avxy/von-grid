{"version":3,"sources":["HexGeoGenerator.js","Scene.js","SelectionManager.js","Tile.js"],"names":["vg","HexGeoGenerator","this","tileGeo","tileShape","flatGeo","shapeGeo","vertices","_cel","Cell","_vec3","THREE","Vector3","_tileSize","_cellWidth","_cellLength","prototype","init","size","dispose","SQRT3","i","angle","vec","verts","TAU","Math","cos","sin","push","Shape","moveTo","x","z","lineTo","ShapeGeometry","rotateX","DEG_TO_RAD","verticesNeedUpdate","Geometry","makeTileGeo","config","settings","amount","bevelEnabled","bevelSegments","steps","bevelSize","bevelThickness","util","overwrite","height","ExtrudeGeometry","makeTilePoly","material","MeshBasicMaterial","color","mesh","Mesh","makeTileHighlight","grid","require","geo","TorusGeometry","cellSize","PI","scale","y","makeOverlay","containerObj","abs","set","line","Line","position","copy","_cellToPixel","add","cell","q","h","s","r","Scene","sceneConfig","controlConfig","sceneSettings","element","document","body","alpha","antialias","clearColor","sortObjects","fog","light","lightPosition","cameraType","cameraPosition","orthoZoom","controlSettings","minDistance","maxDistance","zoomSpeed","noZoom","merge","renderer","WebGLRenderer","setClearColor","width","window","innerWidth","innerHeight","container","DirectionalLight","AmbientLight","normalize","camera","OrthographicCamera","PerspectiveCamera","contolled","controls","OrbitControls","domElement","addEventListener","type","left","right","top","bottom","aspect","updateProjectionMatrix","setSize","bind","attachTo","constructor","style","setPixelRatio","devicePixelRatio","appendChild","remove","render","update","updateOrthoZoom","focusOn","obj","lookAt","SelectionManager","mouse","onSelect","Signal","onDeselect","selected","toggleSelection","signal","onMouse","select","fireSignal","clearSelection","dispatch","deselect","MouseCaster","DOWN","CLICK","Tile","geometry","Error","tile","uniqueID","generateID","MeshPhongMaterial","randomizeRGB","objectType","TILE","entity","userData","highlight","structure","rotation","emissive","_emissive","getHex","setHex","toggle","parent"],"mappings":"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","file":"von-grid-extras.min.js","sourcesContent":["vg.HexGeoGenerator = function() {\n\tthis.tileGeo = null;\n\tthis.tileShape = null;\n\tthis.flatGeo = null;\n\tthis.shapeGeo = null;\n\tthis.vertices = null;\n\n\tthis._cel = new vg.Cell(); // used as scratch object in various operations\n\tthis._vec3 = new THREE.Vector3();\n\tthis._tileSize = -1;\n\tthis._cellWidth = 0;\n\tthis._cellLength = 0;\n};\n\nvg.HexGeoGenerator.prototype = {\n\t/*\n\t\tMake all the required geometry for constructing tiles.\n\t\tsize \t[int]\tCell size as a radius, in threejs world space.\n\t*/\n\tinit: function(size) {\n\t\tif (this.flatGeo) this.flatGeo.dispose();\n\t\tif (this.shapeGeo) this.shapeGeo.dispose();\n\t\tif (size === this._tileSize) return; // already generated necessary geo\n\t\tthis._tileSize = size || 10;\n\t\tthis._cellWidth = this._tileSize * 2;\n\t\tthis._cellLength = (vg.SQRT3 * 0.5) * this._cellWidth;\n\n\t\t// create base shape used for building geometry\n\t\tvar i, verts = [];\n\t\tvar angle, vec;\n\n\t\t// create the skeleton of the hex\n\t\tfor (i = 0; i < 6; i++) {\n\t\t\tangle = (vg.TAU / 6) * i;\n\t\t\tvec = new THREE.Vector3(this._tileSize * Math.cos(angle), 0, this._tileSize * Math.sin(angle));\n\t\t\tverts.push(vec);\n\t\t}\n\t\tthis.vertices = verts;\n\n\t\t// copy the verts into a shape for the geometry to use\n\t\tthis.tileShape = new THREE.Shape();\n\t\tthis.tileShape.moveTo(verts[0].x, verts[0].z);\n\t\tfor (i = 1; i < 6; i++) {\n\t\t\tthis.tileShape.lineTo(verts[i].x, verts[i].z);\n\t\t}\n\t\tthis.tileShape.lineTo(verts[0].x, verts[0].z);\n\n\t\tthis.shapeGeo = new THREE.ShapeGeometry(this.tileShape);\n\t\tthis.shapeGeo.rotateX(90 * vg.DEG_TO_RAD);\n\t\tthis.shapeGeo.verticesNeedUpdate = true;\n\n\t\tthis.flatGeo = new THREE.Geometry();\n\t\tthis.flatGeo.vertices = verts;\n\t\t// this.flatGeo.rotateX(90 * vg.DEG_TO_RAD);\n\t\tthis.flatGeo.verticesNeedUpdate = true;\n\t},\n\n\tmakeTileGeo: function(config) {\n\t\tconfig = config || {};\n\t\tvar settings = {\n\t\t\tamount: 1,\n\t\t\tbevelEnabled: true,\n\t\t\tbevelSegments: 1,\n\t\t\tsteps: 1,\n\t\t\tbevelSize: 0.5,\n\t\t\tbevelThickness: 0.5\n\t\t};\n\t\tvg.util.overwrite(settings, config);\n\t\tsettings.amount = config.height || settings.amount;\n\n\t\tif (this.tileGeo) this.tileGeo.dispose();\n\t\tthis.tileGeo = new THREE.ExtrudeGeometry(this.tileShape, settings);\n\t\t// this.tileGeo.translate(0, -settings.amount, 0); // adjust verts so top poly is at y:0\n\n\t\treturn this.tileGeo;\n\t},\n\n\tmakeTilePoly: function(material) {\n\t\tif (!material) {\n\t\t\tmaterial = new THREE.MeshBasicMaterial({color: 0x24b4ff});\n\t\t}\n\t\tvar mesh = new THREE.Mesh(this.shapeGeo, material);\n\t\t// this._vec3.set(1, 0, 0);\n\t\t// mesh.rotateOnAxis(this._vec3, vg.PI/2);\n\t\treturn mesh;\n\t},\n\n\tmakeTileHighlight: function(material) {\n\t\tvar grid = require('nexus').grid;\n\t\tif (!material) {\n\t\t\tmaterial = new THREE.MeshBasicMaterial({color: 0x24b4ff});\n\t\t}\n\n\t\tvar geo = new THREE.TorusGeometry(grid.cellSize, 2, 3, 6);\n\t\tvar mesh = new THREE.Mesh(geo, material);\n\n\t\tmesh.rotateX(vg.PI/2);\n\t\tmesh.scale.x = 0.8;\n\t\tmesh.scale.y = 0.8;\n\n\t\treturn mesh;\n\t},\n\n\t/*\n\t\tMake an outlined grid that shows the shape and placement of all its cells.\n\t\tcontainerObj\t[Object3D]\tContainer to add the tile outlines to\n\t\tsize \t\t\t[int]\t\tNumber of cells to generate, as a radius (of the hex-shaped grid)\n\t\tmaterial \t\t[Material]\tthreejs material to use for the Lines\n\t*/\n\tmakeOverlay: function(containerObj, size, material) {\n\t\tvar x, y, z;\n\t\tfor (x = -size; x < size+1; x++) {\n\t\t\tfor (y = -size; y < size+1; y++) {\n\t\t\t\tz = -x-y;\n\t\t\t\tif (Math.abs(x) <= size && Math.abs(y) <= size && Math.abs(z) <= size) {\n\t\t\t\t\tthis._cel.set(x, y, z); // define the cell\n\t\t\t\t\tvar line = new THREE.Line(this.flatGeo, material);\n\t\t\t\t\tline.position.copy(this._cellToPixel(this._cel));\n\t\t\t\t\tline.position.y = 0.5;\n\t\t\t\t\t// line.rotation.x = 90 * vg.DEG_TO_RAD;\n\t\t\t\t\tcontainerObj.add(line);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_cellToPixel: function(cell) {\n\t\tthis._vec3.x = cell.q * this._cellWidth * 0.75;\n\t\tthis._vec3.y = cell.h;\n\t\tthis._vec3.z = -((cell.s - cell.r) * this._cellLength * 0.5);\n\t\treturn this._vec3;\n\t},\n};\n","/*\n\tSets up and manages a THREEjs container, camera, and light, making it easy to get going.\n\tAlso provides camera control.\n\n\tAssumes full screen.\n */\n// 'utils/Tools'\nvg.Scene = function(sceneConfig, controlConfig) {\n\tvar sceneSettings = {\n\t\telement: document.body,\n\t\talpha: true,\n\t\tantialias: true,\n\t\tclearColor: '#fff',\n\t\tsortObjects: false,\n\t\tfog: null,\n\t\tlight: null,\n\t\tlightPosition: null,\n\t\tcameraType: 'PerspectiveCamera',\n\t\tcameraPosition: null, // {x, y, z}\n\t\torthoZoom: 4\n\t};\n\n\tvar controlSettings = {\n\t\tminDistance: 100,\n\t\tmaxDistance: 1000,\n\t\tzoomSpeed: 2,\n\t\tnoZoom: false\n\t};\n\n\tsceneSettings = vg.util.merge(sceneSettings, sceneConfig);\n\tif (typeof controlConfig !== 'boolean') {\n\t\tcontrolSettings = vg.util.merge(controlSettings, controlConfig);\n\t}\n\n\tthis.renderer = new THREE.WebGLRenderer({\n\t\talpha: sceneSettings.alpha,\n\t\tantialias: sceneSettings.antialias\n\t});\n\tthis.renderer.setClearColor(sceneSettings.clearColor, 0);\n\tthis.renderer.sortObjects = sceneSettings.sortObjects;\n\n\tthis.width = window.innerWidth;\n\tthis.height = window.innerHeight;\n\n\tthis.orthoZoom = sceneSettings.orthoZoom;\n\n\tthis.container = new THREE.Scene();\n\tthis.container.fog = sceneSettings.fog;\n\n\tif (!sceneSettings.light) {\n\t\tsceneSettings.light = new THREE.DirectionalLight(0xdddddd);\n\t\tthis.container.add(new THREE.AmbientLight(0xdddddd));\n\t}\n\tif (!sceneSettings.lightPosition) {\n\t\tsceneSettings.light.position.set(-1, 1, -1).normalize();\n\t}\n\tthis.container.add(sceneSettings.light);\n\n\tif (sceneSettings.cameraType === 'OrthographicCamera') {\n\t\tvar width = window.innerWidth / this.orthoZoom;\n\t\tvar height = window.innerHeight / this.orthoZoom;\n\t\tthis.camera = new THREE.OrthographicCamera(width / -2, width / 2, height / 2, height / -2, 1, 5000);\n\t}\n\telse {\n\t\tthis.camera = new THREE.PerspectiveCamera(50, this.width / this.height, 1, 5000);\n\t}\n\n\tthis.contolled = !!controlConfig;\n\tif (this.contolled) {\n\t\tthis.controls = new THREE.OrbitControls(this.camera, this.renderer.domElement);\n\t\tvg.util.overwrite(this.controls, controlSettings);\n\t}\n\n\tif (sceneSettings.cameraPosition) {\n\t\tthis.camera.position.copy(sceneSettings.cameraPosition);\n\t}\n\n\twindow.addEventListener('resize', function onWindowResize() {\n\t\tthis.width = window.innerWidth;\n\t\tthis.height = window.innerHeight;\n\t\tif (this.camera.type === 'OrthographicCamera') {\n\t\t\tvar width = this.width / this.orthoZoom;\n\t\t\tvar height = this.height / this.orthoZoom;\n\t\t\tthis.camera.left = width / -2;\n\t\t\tthis.camera.right = width / 2;\n\t\t\tthis.camera.top = height / 2;\n\t\t\tthis.camera.bottom = height / -2;\n\t\t}\n\t\telse {\n\t\t\tthis.camera.aspect = this.width / this.height;\n\t\t}\n\t\tthis.camera.updateProjectionMatrix();\n\t\tthis.renderer.setSize(this.width, this.height);\n\t}.bind(this), false);\n\n\tthis.attachTo(sceneSettings.element);\n};\n\nvg.Scene.prototype = {\n\tconstructor: vg.Scene,\n\n\tattachTo: function(element) {\n\t\telement.style.width = this.width + 'px';\n\t\telement.style.height = this.height + 'px';\n\t\tthis.renderer.setPixelRatio(window.devicePixelRatio);\n\t\tthis.renderer.setSize(this.width, this.height);\n\t\telement.appendChild(this.renderer.domElement);\n\t},\n\n\tadd: function(mesh) {\n\t\tthis.container.add(mesh);\n\t},\n\n\tremove: function(mesh) {\n\t\tthis.container.remove(mesh);\n\t},\n\n\trender: function() {\n\t\tif (this.contolled) this.controls.update();\n\t\tthis.renderer.render(this.container, this.camera);\n\t},\n\n\tupdateOrthoZoom: function() {\n\t\tif (this.orthoZoom <= 0) {\n\t\t\tthis.orthoZoom = 0;\n\t\t\treturn;\n\t\t}\n\t\tvar width = this.width / this.orthoZoom;\n\t\tvar height = this.height / this.orthoZoom;\n\t\tthis.camera.left = width / -2;\n\t\tthis.camera.right = width / 2;\n\t\tthis.camera.top = height / 2;\n\t\tthis.camera.bottom = height / -2;\n\t\tthis.camera.updateProjectionMatrix();\n\t},\n\n\tfocusOn: function(obj) {\n\t\tthis.camera.lookAt(obj.position);\n\t}\n};\n","vg.SelectionManager = function(mouse) {\n\tthis.mouse = mouse;\n\n\tthis.onSelect = new vg.Signal();\n\tthis.onDeselect = new vg.Signal();\n\n\tthis.selected = null;\n\t// deselect if player clicked on the same thing twice\n\tthis.toggleSelection = false;\n\n\t// allow multiple entities to be selected at once\n\t// this.multiselect = false; // todo\n\t// this.allSelected = new LinkedList();\n\n\tthis.mouse.signal.add(this.onMouse, this);\n};\n\nvg.SelectionManager.prototype = {\n\tselect: function(obj, fireSignal) {\n\t\tif (!obj) return;\n\t\tfireSignal = fireSignal || true;\n\n\t\tif (this.selected !== obj) {\n\t\t\t// deselect previous object\n\t\t\tthis.clearSelection(fireSignal);\n\t\t}\n\t\tif (obj.selected) {\n\t\t\tif (this.toggleSelection) {\n\t\t\t\tif (fireSignal) {\n\t\t\t\t\tthis.onDeselect.dispatch(obj);\n\t\t\t\t}\n\t\t\t\tobj.deselect();\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tobj.select();\n\t\t}\n\n\t\tthis.selected = obj;\n\t\tif (fireSignal) {\n\t\t\tthis.onSelect.dispatch(obj);\n\t\t}\n\t},\n\n\tclearSelection: function(fireSignal) {\n\t\tfireSignal = fireSignal || true;\n\t\tif (this.selected) {\n\t\t\tif (fireSignal) {\n\t\t\t\tthis.onDeselect.dispatch(this.selected);\n\t\t\t}\n\t\t\tthis.selected.deselect();\n\t\t}\n\t\tthis.selected = null;\n\t},\n\n\tonMouse: function(type, obj) {\n\t\tswitch (type) {\n\t\t\tcase vg.MouseCaster.DOWN:\n\t\t\t\tif (!obj) {\n\t\t\t\t\tthis.clearSelection();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase vg.MouseCaster.CLICK:\n\t\t\t\tthis.select(obj);\n\t\t\t\tbreak;\n\t\t}\n\t}\n};\n\nvg.SelectionManager.prototype.constructor = vg.SelectionManager;\n","/*\n\tExample tile class that constructs its geometry for rendering and holds some gameplay properties.\n\n\t@author Corey Birnbaum https://github.com/vonWolfehaus/\n*/\nvg.Tile = function(config) {\n\tconfig = config || {};\n\tvar settings = {\n\t\tscale: 1,\n\t\tcell: null, // required vg.Cell\n\t\tgeometry: null, // required threejs geometry\n\t\tmaterial: null // not required but it would improve performance significantly\n\t};\n\tsettings = vg.util.merge(settings, config);\n\n\tif (!settings.cell || !settings.geometry) {\n\t\tthrow new Error('Missing vg.Tile configuration');\n\t}\n\n\tthis.cell = settings.cell;\n\tif (this.cell.tile && this.cell.tile !== this) this.cell.tile.dispose(); // remove whatever was there\n\tthis.cell.tile = this;\n\n\tthis.uniqueID = vg.util.generateID();\n\n\tthis.geometry = settings.geometry;\n\tthis.material = settings.material;\n\tif (!this.material) {\n\t\tthis.material = new THREE.MeshPhongMaterial({\n\t\t\tcolor: vg.util.randomizeRGB('30, 30, 30', 13)\n\t\t});\n\t}\n\n\tthis.objectType = vg.TILE;\n\tthis.entity = null;\n\tthis.userData = {};\n\n\tthis.selected = false;\n\tthis.highlight = '0x0084cc';\n\n\tthis.mesh = new THREE.Mesh(this.geometry, this.material);\n\tthis.mesh.userData.structure = this;\n\n\t// create references so we can control orientation through this (Tile), instead of drilling down\n\tthis.position = this.mesh.position;\n\tthis.rotation = this.mesh.rotation;\n\n\t// rotate it to face \"up\" (the threejs coordinate space is Y+)\n\tthis.rotation.x = 90 * vg.DEG_TO_RAD;\n\tthis.mesh.scale.set(settings.scale, settings.scale, 1);\n\n\tif (this.material.emissive) {\n\t\tthis._emissive = this.material.emissive.getHex();\n\t}\n\telse {\n\t\tthis._emissive = null;\n\t}\n};\n\nvg.Tile.prototype = {\n\tselect: function() {\n\t\tif (this.material.emissive) {\n\t\t\tthis.material.emissive.setHex(this.highlight);\n\t\t}\n\t\tthis.selected = true;\n\t\treturn this;\n\t},\n\n\tdeselect: function() {\n\t\tif (this._emissive !== null && this.material.emissive) {\n\t\t\tthis.material.emissive.setHex(this._emissive);\n\t\t}\n\t\tthis.selected = false;\n\t\treturn this;\n\t},\n\n\ttoggle: function() {\n\t\tif (this.selected) {\n\t\t\tthis.deselect();\n\t\t}\n\t\telse {\n\t\t\tthis.select();\n\t\t}\n\t\treturn this;\n\t},\n\n\tdispose: function() {\n\t\tif (this.cell && this.cell.tile) this.cell.tile = null;\n\t\tthis.cell = null;\n\t\tthis.position = null;\n\t\tthis.rotation = null;\n\t\tif (this.mesh.parent) this.mesh.parent.remove(this.mesh);\n\t\tthis.mesh.userData.structure = null;\n\t\tthis.mesh = null;\n\t\tthis.material = null;\n\t\tthis.userData = null;\n\t\tthis.entity = null;\n\t\tthis.geometry = null;\n\t\tthis._emissive = null;\n\t}\n};\n\nvg.Tile.prototype.constructor = vg.Tile;\n"],"sourceRoot":"/source/"}