{"version":3,"sources":["Scene.js","SelectionManager.js","Tile.js"],"names":["vg","Scene","sceneConfig","controlConfig","sceneSettings","element","document","body","alpha","antialias","clearColor","sortObjects","fog","light","lightPosition","cameraType","cameraPosition","orthoZoom","controlSettings","minDistance","maxDistance","zoomSpeed","noZoom","Tools","merge","this","renderer","THREE","WebGLRenderer","setClearColor","width","window","innerWidth","height","innerHeight","container","DirectionalLight","add","AmbientLight","position","set","normalize","camera","OrthographicCamera","PerspectiveCamera","contolled","controls","OrbitControls","domElement","overwrite","copy","addEventListener","type","left","right","top","bottom","aspect","updateProjectionMatrix","setSize","bind","attachTo","prototype","constructor","style","setPixelRatio","devicePixelRatio","appendChild","mesh","remove","render","update","updateOrthoZoom","focusOn","obj","lookAt","SelectionManager","mouse","onSelect","Signal","onDeselect","selected","toggleSelection","signal","onMouse","select","fireSignal","clearSelection","dispatch","deselect","MouseCaster","DOWN","CLICK","Tile","config","settings","cell","geometry","material","Error","tile","dispose","uniqueID","generateID","MeshPhongMaterial","color","randomizeRGB","objectType","TILE","entity","userData","highlight","Mesh","structure","rotation","x","DEG_TO_RAD","scale","emissive","_emissive","getHex","setHex","toggle","parent"],"mappings":"AAOAA,GAAAC,MAAA,SAAAC,EAAAC,GACA,GAAAC,IACAC,QAAAC,SAAAC,KACAC,OAAA,EACAC,WAAA,EACAC,WAAA,OACAC,aAAA,EACAC,IAAA,KACAC,MAAA,KACAC,cAAA,KACAC,WAAA,oBACAC,eAAA,KACAC,UAAA,GAGAC,GACAC,YAAA,IACAC,YAAA,IACAC,UAAA,EACAC,QAAA,EAgCA,IA7BAlB,EAAAJ,GAAAuB,MAAAC,MAAApB,EAAAF,GACA,iBAAAC,KACAe,EAAAlB,GAAAuB,MAAAC,MAAAN,EAAAf,IAGAsB,KAAAC,SAAA,GAAAC,OAAAC,eACApB,MAAAJ,EAAAI,MACAC,UAAAL,EAAAK,YAEAgB,KAAAC,SAAAG,cAAAzB,EAAAM,WAAA,GACAe,KAAAC,SAAAf,YAAAP,EAAAO,YAEAc,KAAAK,MAAAC,OAAAC,WACAP,KAAAQ,OAAAF,OAAAG,YAEAT,KAAAR,UAAAb,EAAAa,UAEAQ,KAAAU,UAAA,GAAAR,OAAA1B,MACAwB,KAAAU,UAAAvB,IAAAR,EAAAQ,IAEAR,EAAAS,QACAT,EAAAS,MAAA,GAAAc,OAAAS,iBAAA,UACAX,KAAAU,UAAAE,IAAA,GAAAV,OAAAW,aAAA,YAEAlC,EAAAU,eACAV,EAAAS,MAAA0B,SAAAC,IAAA,GAAA,EAAA,IAAAC,YAEAhB,KAAAU,UAAAE,IAAAjC,EAAAS,OAEA,uBAAAT,EAAAW,WAAA,CACA,GAAAe,GAAAC,OAAAC,WAAAP,KAAAR,UACAgB,EAAAF,OAAAG,YAAAT,KAAAR,SACAQ,MAAAiB,OAAA,GAAAf,OAAAgB,mBAAAb,EAAA,GAAAA,EAAA,EAAAG,EAAA,EAAAA,EAAA,GAAA,EAAA,SAGAR,MAAAiB,OAAA,GAAAf,OAAAiB,kBAAA,GAAAnB,KAAAK,MAAAL,KAAAQ,OAAA,EAAA,IAGAR,MAAAoB,YAAA1C,EACAsB,KAAAoB,YACApB,KAAAqB,SAAA,GAAAnB,OAAAoB,cAAAtB,KAAAiB,OAAAjB,KAAAC,SAAAsB,YACAhD,GAAAuB,MAAA0B,UAAAxB,KAAAqB,SAAA5B,IAGAd,EAAAY,gBACAS,KAAAiB,OAAAH,SAAAW,KAAA9C,EAAAY,gBAGAe,OAAAoB,iBAAA,SAAA,WAGA,GAFA1B,KAAAK,MAAAC,OAAAC,WACAP,KAAAQ,OAAAF,OAAAG,YACA,uBAAAT,KAAAiB,OAAAU,KAAA,CACA,GAAAtB,GAAAL,KAAAK,MAAAL,KAAAR,UACAgB,EAAAR,KAAAQ,OAAAR,KAAAR,SACAQ,MAAAiB,OAAAW,KAAAvB,EAAA,GACAL,KAAAiB,OAAAY,MAAAxB,EAAA,EACAL,KAAAiB,OAAAa,IAAAtB,EAAA,EACAR,KAAAiB,OAAAc,OAAAvB,EAAA,OAGAR,MAAAiB,OAAAe,OAAAhC,KAAAK,MAAAL,KAAAQ,MAEAR,MAAAiB,OAAAgB,yBACAjC,KAAAC,SAAAiC,QAAAlC,KAAAK,MAAAL,KAAAQ,SACA2B,KAAAnC,OAAA,GAEAA,KAAAoC,SAAAzD,EAAAC,UAGAL,GAAAC,MAAA6D,WACAC,YAAA/D,GAAAC,MAEA4D,SAAA,SAAAxD,GACAA,EAAA2D,MAAAlC,MAAAL,KAAAK,MAAA,KACAzB,EAAA2D,MAAA/B,OAAAR,KAAAQ,OAAA,KACAR,KAAAC,SAAAuC,cAAAlC,OAAAmC,kBACAzC,KAAAC,SAAAiC,QAAAlC,KAAAK,MAAAL,KAAAQ,QACA5B,EAAA8D,YAAA1C,KAAAC,SAAAsB,aAGAX,IAAA,SAAA+B,GACA3C,KAAAU,UAAAE,IAAA+B,IAGAC,OAAA,SAAAD,GACA3C,KAAAU,UAAAkC,OAAAD,IAGAE,OAAA,WACA7C,KAAAoB,WAAApB,KAAAqB,SAAAyB,SACA9C,KAAAC,SAAA4C,OAAA7C,KAAAU,UAAAV,KAAAiB,SAGA8B,gBAAA,WACA,GAAA/C,KAAAR,WAAA,EAEA,YADAQ,KAAAR,UAAA,EAGA,IAAAa,GAAAL,KAAAK,MAAAL,KAAAR,UACAgB,EAAAR,KAAAQ,OAAAR,KAAAR,SACAQ,MAAAiB,OAAAW,KAAAvB,EAAA,GACAL,KAAAiB,OAAAY,MAAAxB,EAAA,EACAL,KAAAiB,OAAAa,IAAAtB,EAAA,EACAR,KAAAiB,OAAAc,OAAAvB,EAAA,GACAR,KAAAiB,OAAAgB,0BAGAe,QAAA,SAAAC,GACAjD,KAAAiB,OAAAiC,OAAAD,EAAAnC,YCzIAvC,GAAA4E,iBAAA,SAAAC,GACApD,KAAAoD,MAAAA,EAEApD,KAAAqD,SAAA,GAAA9E,IAAA+E,OACAtD,KAAAuD,WAAA,GAAAhF,IAAA+E,OAEAtD,KAAAwD,SAAA,KAEAxD,KAAAyD,iBAAA,EAMAzD,KAAAoD,MAAAM,OAAA9C,IAAAZ,KAAA2D,QAAA3D,OAGAzB,GAAA4E,iBAAAd,WACAuB,OAAA,SAAAX,EAAAY,GACAZ,IACAY,EAAAA,IAAA,EAEA7D,KAAAwD,WAAAP,GAEAjD,KAAA8D,eAAAD,GAEAZ,EAAAO,SACAxD,KAAAyD,kBACAI,GACA7D,KAAAuD,WAAAQ,SAAAd,GAEAA,EAAAe,YAIAf,EAAAW,SAGA5D,KAAAwD,SAAAP,EACAY,GACA7D,KAAAqD,SAAAU,SAAAd,KAIAa,eAAA,SAAAD,GACAA,EAAAA,IAAA,EACA7D,KAAAwD,WACAK,GACA7D,KAAAuD,WAAAQ,SAAA/D,KAAAwD,UAEAxD,KAAAwD,SAAAQ,YAEAhE,KAAAwD,SAAA,MAGAG,QAAA,SAAAhC,EAAAsB,GACA,OAAAtB,GACA,IAAApD,IAAA0F,YAAAC,KACAjB,GACAjD,KAAA8D,gBAEA,MAEA,KAAAvF,IAAA0F,YAAAE,MACAnE,KAAA4D,OAAAX,MAMA1E,GAAA4E,iBAAAd,UAAAC,YAAA/D,GAAA4E,iBCjEA5E,GAAA6F,KAAA,SAAAC,GACAA,EAAAA,KACA,IAAAC,IACAC,KAAA,KACAC,SAAA,KACAC,SAAA,KAIA,IAFAH,EAAA/F,GAAAuB,MAAAC,MAAAuE,EAAAD,IAEAC,EAAAC,OAAAD,EAAAE,SACA,KAAA,IAAAE,OAAA,gCAGA1E,MAAAuE,KAAAD,EAAAC,KACAvE,KAAAuE,KAAAI,MAAA3E,KAAAuE,KAAAI,OAAA3E,MAAAA,KAAAuE,KAAAI,KAAAC,UACA5E,KAAAuE,KAAAI,KAAA3E,KAEAA,KAAA6E,SAAAtG,GAAAuB,MAAAgF,aAEA9E,KAAAwE,SAAAF,EAAAE,SACAxE,KAAAyE,SAAAH,EAAAG,SACAzE,KAAAyE,WACAzE,KAAAyE,SAAA,GAAAvE,OAAA6E,mBACAC,MAAAzG,GAAAuB,MAAAmF,aAAA,aAAA,OAIAjF,KAAAkF,WAAA3G,GAAA4G,KACAnF,KAAAoF,OAAA,KACApF,KAAAqF,YAEArF,KAAAwD,UAAA,EACAxD,KAAAsF,UAAA,WAEAtF,KAAA2C,KAAA,GAAAzC,OAAAqF,KAAAvF,KAAAwE,SAAAxE,KAAAyE,UACAzE,KAAA2C,KAAA0C,SAAAG,UAAAxF,KAGAA,KAAAc,SAAAd,KAAA2C,KAAA7B,SACAd,KAAAyF,SAAAzF,KAAA2C,KAAA8C,SAGAzF,KAAAyF,SAAAC,EAAA,IAAAnH,GAAAoH,WACA3F,KAAA2C,KAAAiD,MAAA7E,IAAAuD,EAAAsB,MAAAtB,EAAAsB,MAAA,GAEA5F,KAAAyE,SAAAoB,SACA7F,KAAA8F,UAAA9F,KAAAyE,SAAAoB,SAAAE,SAGA/F,KAAA8F,UAAA,MAIAvH,GAAA6F,KAAA/B,WACAuB,OAAA,WAKA,MAJA5D,MAAAyE,SAAAoB,UACA7F,KAAAyE,SAAAoB,SAAAG,OAAAhG,KAAAsF,WAEAtF,KAAAwD,UAAA,EACAxD,MAGAgE,SAAA,WAKA,MAJA,QAAAhE,KAAA8F,WAAA9F,KAAAyE,SAAAoB,UACA7F,KAAAyE,SAAAoB,SAAAG,OAAAhG,KAAA8F,WAEA9F,KAAAwD,UAAA,EACAxD,MAGAiG,OAAA,WAOA,MANAjG,MAAAwD,SACAxD,KAAAgE,WAGAhE,KAAA4D,SAEA5D,MAGA4E,QAAA,WACA5E,KAAAuE,MAAAvE,KAAAuE,KAAAI,OAAA3E,KAAAuE,KAAAI,KAAA,MACA3E,KAAAuE,KAAA,KACAvE,KAAAc,SAAA,KACAd,KAAAyF,SAAA,KACAzF,KAAA2C,KAAAuD,QAAAlG,KAAA2C,KAAAuD,OAAAtD,OAAA5C,KAAA2C,MACA3C,KAAA2C,KAAA0C,SAAAG,UAAA,KACAxF,KAAA2C,KAAA,KACA3C,KAAAyE,SAAA,KACAzE,KAAAqF,SAAA,KACArF,KAAAoF,OAAA,KACApF,KAAAwE,SAAA,KACAxE,KAAA8F,UAAA,OAIAvH,GAAA6F,KAAA/B,UAAAC,YAAA/D,GAAA6F","file":"von-grid-extras.min.js","sourcesContent":["/*\n\tSets up and manages a THREEjs container, camera, and light, making it easy to get going.\n\tAlso provides camera control.\n\n\tAssumes full screen.\n */\n// 'utils/Tools'\nvg.Scene = function(sceneConfig, controlConfig) {\n\tvar sceneSettings = {\n\t\telement: document.body,\n\t\talpha: true,\n\t\tantialias: true,\n\t\tclearColor: '#fff',\n\t\tsortObjects: false,\n\t\tfog: null,\n\t\tlight: null,\n\t\tlightPosition: null,\n\t\tcameraType: 'PerspectiveCamera',\n\t\tcameraPosition: null, // {x, y, z}\n\t\torthoZoom: 4\n\t};\n\n\tvar controlSettings = {\n\t\tminDistance: 100,\n\t\tmaxDistance: 1000,\n\t\tzoomSpeed: 2,\n\t\tnoZoom: false\n\t};\n\n\tsceneSettings = vg.Tools.merge(sceneSettings, sceneConfig);\n\tif (typeof controlConfig !== 'boolean') {\n\t\tcontrolSettings = vg.Tools.merge(controlSettings, controlConfig);\n\t}\n\n\tthis.renderer = new THREE.WebGLRenderer({\n\t\talpha: sceneSettings.alpha,\n\t\tantialias: sceneSettings.antialias\n\t});\n\tthis.renderer.setClearColor(sceneSettings.clearColor, 0);\n\tthis.renderer.sortObjects = sceneSettings.sortObjects;\n\n\tthis.width = window.innerWidth;\n\tthis.height = window.innerHeight;\n\n\tthis.orthoZoom = sceneSettings.orthoZoom;\n\n\tthis.container = new THREE.Scene();\n\tthis.container.fog = sceneSettings.fog;\n\n\tif (!sceneSettings.light) {\n\t\tsceneSettings.light = new THREE.DirectionalLight(0xdddddd);\n\t\tthis.container.add(new THREE.AmbientLight(0xdddddd));\n\t}\n\tif (!sceneSettings.lightPosition) {\n\t\tsceneSettings.light.position.set(-1, 1, -1).normalize();\n\t}\n\tthis.container.add(sceneSettings.light);\n\n\tif (sceneSettings.cameraType === 'OrthographicCamera') {\n\t\tvar width = window.innerWidth / this.orthoZoom;\n\t\tvar height = window.innerHeight / this.orthoZoom;\n\t\tthis.camera = new THREE.OrthographicCamera(width / -2, width / 2, height / 2, height / -2, 1, 5000);\n\t}\n\telse {\n\t\tthis.camera = new THREE.PerspectiveCamera(50, this.width / this.height, 1, 5000);\n\t}\n\n\tthis.contolled = !!controlConfig;\n\tif (this.contolled) {\n\t\tthis.controls = new THREE.OrbitControls(this.camera, this.renderer.domElement);\n\t\tvg.Tools.overwrite(this.controls, controlSettings);\n\t}\n\n\tif (sceneSettings.cameraPosition) {\n\t\tthis.camera.position.copy(sceneSettings.cameraPosition);\n\t}\n\n\twindow.addEventListener('resize', function onWindowResize() {\n\t\tthis.width = window.innerWidth;\n\t\tthis.height = window.innerHeight;\n\t\tif (this.camera.type === 'OrthographicCamera') {\n\t\t\tvar width = this.width / this.orthoZoom;\n\t\t\tvar height = this.height / this.orthoZoom;\n\t\t\tthis.camera.left = width / -2;\n\t\t\tthis.camera.right = width / 2;\n\t\t\tthis.camera.top = height / 2;\n\t\t\tthis.camera.bottom = height / -2;\n\t\t}\n\t\telse {\n\t\t\tthis.camera.aspect = this.width / this.height;\n\t\t}\n\t\tthis.camera.updateProjectionMatrix();\n\t\tthis.renderer.setSize(this.width, this.height);\n\t}.bind(this), false);\n\n\tthis.attachTo(sceneSettings.element);\n};\n\nvg.Scene.prototype = {\n\tconstructor: vg.Scene,\n\n\tattachTo: function(element) {\n\t\telement.style.width = this.width + 'px';\n\t\telement.style.height = this.height + 'px';\n\t\tthis.renderer.setPixelRatio(window.devicePixelRatio);\n\t\tthis.renderer.setSize(this.width, this.height);\n\t\telement.appendChild(this.renderer.domElement);\n\t},\n\n\tadd: function(mesh) {\n\t\tthis.container.add(mesh);\n\t},\n\n\tremove: function(mesh) {\n\t\tthis.container.remove(mesh);\n\t},\n\n\trender: function() {\n\t\tif (this.contolled) this.controls.update();\n\t\tthis.renderer.render(this.container, this.camera);\n\t},\n\n\tupdateOrthoZoom: function() {\n\t\tif (this.orthoZoom <= 0) {\n\t\t\tthis.orthoZoom = 0;\n\t\t\treturn;\n\t\t}\n\t\tvar width = this.width / this.orthoZoom;\n\t\tvar height = this.height / this.orthoZoom;\n\t\tthis.camera.left = width / -2;\n\t\tthis.camera.right = width / 2;\n\t\tthis.camera.top = height / 2;\n\t\tthis.camera.bottom = height / -2;\n\t\tthis.camera.updateProjectionMatrix();\n\t},\n\n\tfocusOn: function(obj) {\n\t\tthis.camera.lookAt(obj.position);\n\t}\n};\n","vg.SelectionManager = function(mouse) {\n\tthis.mouse = mouse;\n\n\tthis.onSelect = new vg.Signal();\n\tthis.onDeselect = new vg.Signal();\n\n\tthis.selected = null;\n\t// deselect if player clicked on the same thing twice\n\tthis.toggleSelection = false;\n\n\t// allow multiple entities to be selected at once\n\t// this.multiselect = false; // todo\n\t// this.allSelected = new LinkedList();\n\n\tthis.mouse.signal.add(this.onMouse, this);\n};\n\nvg.SelectionManager.prototype = {\n\tselect: function(obj, fireSignal) {\n\t\tif (!obj) return;\n\t\tfireSignal = fireSignal || true;\n\n\t\tif (this.selected !== obj) {\n\t\t\t// deselect previous object\n\t\t\tthis.clearSelection(fireSignal);\n\t\t}\n\t\tif (obj.selected) {\n\t\t\tif (this.toggleSelection) {\n\t\t\t\tif (fireSignal) {\n\t\t\t\t\tthis.onDeselect.dispatch(obj);\n\t\t\t\t}\n\t\t\t\tobj.deselect();\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tobj.select();\n\t\t}\n\n\t\tthis.selected = obj;\n\t\tif (fireSignal) {\n\t\t\tthis.onSelect.dispatch(obj);\n\t\t}\n\t},\n\n\tclearSelection: function(fireSignal) {\n\t\tfireSignal = fireSignal || true;\n\t\tif (this.selected) {\n\t\t\tif (fireSignal) {\n\t\t\t\tthis.onDeselect.dispatch(this.selected);\n\t\t\t}\n\t\t\tthis.selected.deselect();\n\t\t}\n\t\tthis.selected = null;\n\t},\n\n\tonMouse: function(type, obj) {\n\t\tswitch (type) {\n\t\t\tcase vg.MouseCaster.DOWN:\n\t\t\t\tif (!obj) {\n\t\t\t\t\tthis.clearSelection();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase vg.MouseCaster.CLICK:\n\t\t\t\tthis.select(obj);\n\t\t\t\tbreak;\n\t\t}\n\t}\n};\n\nvg.SelectionManager.prototype.constructor = vg.SelectionManager;\n","/*\n\tExample tile class that constructs its geometry for rendering and holds some gameplay properties.\n\n\t@author Corey Birnbaum https://github.com/vonWolfehaus/\n*/\nvg.Tile = function(config) {\n\tconfig = config || {};\n\tvar settings = {\n\t\tcell: null, // required vg.Cell\n\t\tgeometry: null, // required threejs geometry\n\t\tmaterial: null // not required but it would improve performance significantly\n\t};\n\tsettings = vg.Tools.merge(settings, config);\n\n\tif (!settings.cell || !settings.geometry) {\n\t\tthrow new Error('Missing vg.Tile configuration');\n\t}\n\n\tthis.cell = settings.cell;\n\tif (this.cell.tile && this.cell.tile !== this) this.cell.tile.dispose(); // remove whatever was there\n\tthis.cell.tile = this;\n\n\tthis.uniqueID = vg.Tools.generateID();\n\n\tthis.geometry = settings.geometry;\n\tthis.material = settings.material;\n\tif (!this.material) {\n\t\tthis.material = new THREE.MeshPhongMaterial({\n\t\t\tcolor: vg.Tools.randomizeRGB('30, 30, 30', 13)\n\t\t});\n\t}\n\n\tthis.objectType = vg.TILE;\n\tthis.entity = null;\n\tthis.userData = {};\n\n\tthis.selected = false;\n\tthis.highlight = '0x0084cc';\n\n\tthis.mesh = new THREE.Mesh(this.geometry, this.material);\n\tthis.mesh.userData.structure = this;\n\n\t// create references so we can control orientation through this (Tile), instead of drilling down\n\tthis.position = this.mesh.position;\n\tthis.rotation = this.mesh.rotation;\n\n\t// rotate it to face \"up\" (the threejs coordinate space is Y+)\n\tthis.rotation.x = -90 * vg.DEG_TO_RAD;\n\tthis.mesh.scale.set(settings.scale, settings.scale, 1);\n\n\tif (this.material.emissive) {\n\t\tthis._emissive = this.material.emissive.getHex();\n\t}\n\telse {\n\t\tthis._emissive = null;\n\t}\n};\n\nvg.Tile.prototype = {\n\tselect: function() {\n\t\tif (this.material.emissive) {\n\t\t\tthis.material.emissive.setHex(this.highlight);\n\t\t}\n\t\tthis.selected = true;\n\t\treturn this;\n\t},\n\n\tdeselect: function() {\n\t\tif (this._emissive !== null && this.material.emissive) {\n\t\t\tthis.material.emissive.setHex(this._emissive);\n\t\t}\n\t\tthis.selected = false;\n\t\treturn this;\n\t},\n\n\ttoggle: function() {\n\t\tif (this.selected) {\n\t\t\tthis.deselect();\n\t\t}\n\t\telse {\n\t\t\tthis.select();\n\t\t}\n\t\treturn this;\n\t},\n\n\tdispose: function() {\n\t\tif (this.cell && this.cell.tile) this.cell.tile = null;\n\t\tthis.cell = null;\n\t\tthis.position = null;\n\t\tthis.rotation = null;\n\t\tif (this.mesh.parent) this.mesh.parent.remove(this.mesh);\n\t\tthis.mesh.userData.structure = null;\n\t\tthis.mesh = null;\n\t\tthis.material = null;\n\t\tthis.userData = null;\n\t\tthis.entity = null;\n\t\tthis.geometry = null;\n\t\tthis._emissive = null;\n\t}\n};\n\nvg.Tile.prototype.constructor = vg.Tile;\n"],"sourceRoot":"/source/"}