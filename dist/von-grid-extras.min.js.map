{"version":3,"sources":["GeneratedTileManager.js","HexGeoGenerator.js","Scene.js","SelectionManager.js","SqrGeoGenerator.js","Tile.js","TilesetManager.js"],"names":["vg","GeneratedTileManager","board","this","geoGen","overlay","prototype","makeTiles","tileHeight","mats","reset","makeGenerator","i","c","geo","t","makeTileGeo","height","push","THREE","MeshPhongMaterial","color","util","randomizeRGB","grid","cells","Tile","cell","geometry","material","materialId","scale","position","copy","cellToPixel","y","h","tileHeightStep","tiles","tileGroup","add","mesh","type","HEX","HexGeoGenerator","SQR","SqrGeoGenerator","Error","init","cellSize","makeOverlay","size","mat","LineBasicMaterial","opacity","group","remove","Object3D","tileGeo","tileShape","flatGeo","shapeGeo","vertices","_cel","Cell","_vec3","Vector3","_tileSize","_cellWidth","_cellLength","dispose","SQRT3","angle","vec","verts","TAU","Math","cos","sin","Shape","moveTo","x","z","lineTo","autoClose","ShapeGeometry","rotateX","DEG_TO_RAD","verticesNeedUpdate","Geometry","config","settings","amount","bevelEnabled","bevelSegments","steps","bevelSize","bevelThickness","overwrite","ExtrudeGeometry","makeTilePoly","MeshBasicMaterial","Mesh","makeTileHighlight","require","TorusGeometry","PI","containerObj","createPointsGeometry","abs","set","line","Line","_cellToPixel","rotation","q","s","r","Scene","sceneConfig","controlConfig","sceneSettings","element","document","body","alpha","antialias","clearColor","sortObjects","fog","light","lightPosition","cameraType","cameraPosition","orthoZoom","controlSettings","minDistance","maxDistance","zoomSpeed","noZoom","merge","renderer","WebGLRenderer","setClearColor","width","window","innerWidth","innerHeight","container","DirectionalLight","AmbientLight","normalize","camera","OrthographicCamera","PerspectiveCamera","contolled","controls","OrbitControls","domElement","addEventListener","left","right","top","bottom","aspect","updateProjectionMatrix","setSize","bind","attachTo","constructor","style","setPixelRatio","devicePixelRatio","appendChild","render","update","updateOrthoZoom","focusOn","obj","lookAt","SelectionManager","mouse","onSelect","Signal","onDeselect","selected","toggleSelection","signal","onMouse","select","fireSignal","clearSelection","dispatch","deselect","MouseCaster","DOWN","CLICK","_fullCellSize","tile","uniqueID","generateID","objectType","TILE","entity","userData","highlight","structure","emissive","_emissive","getHex","setHex","toggle","parent","TilesetManager","manager","LoadingManager","_loaderComplete","_loaderProgress","_loaderError","imgLoader","TextureLoader","geoLoader","BufferGeometryLoader","tilesetBasePath","tilesetMaterials","tilesetTextures","onComplete","onCompleteScope","load","map","hollaback","hollascope","loadMaterials","materials","tileGeoPath","matSources","m","length","id","_loadTextures","textures","normalMap","emissiveMap","specularMap","alphaMap","shininess","specular","Color","call","xhr","lengthComputable","percentComplete","loaded","total","console","log","round","warn","statusText","self","texture"],"mappings":"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","file":"von-grid-extras.min.js","sourcesContent":["/*\n\tInstantiates all tiles for a generated grid.\n\n\t@author Corey Birnbaum https://github.com/vonWolfehaus/\n*/\nvg.GeneratedTileManager = function(board) {\n\tthis.board = board;\n\tthis.geoGen = null;\n\tthis.overlay = null;\n};\n\nvg.GeneratedTileManager.prototype = {\n\t/*\n\t\tMake all the geometry and objects necessary to give 3D form to the current grid.\n\t\tIt uses ExtrudeGeometry with a slight bevel and creates a few unique materials for variation.\n\n\t\ttileHeight \t[int] \tHow tall the tile geometry is\n\t*/\n\tmakeTiles: function(tileHeight, mats) {\n\t\tthis.board.reset();\n\t\tthis.makeGenerator();\n\n\t\tvar i, c, geo, t;\n\t\tgeo = this.geoGen.makeTileGeo({\n\t\t\theight: tileHeight || 50\n\t\t});\n\n\t\tif (!mats) {\n\t\t\tmats = [];\n\t\t\tfor (i = 0; i < 10; i++) {\n\t\t\t\tmats.push(new THREE.MeshPhongMaterial({\n\t\t\t\t\tcolor: vg.util.randomizeRGB('30, 30, 30', 13)\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\n\t\tfor (i in this.board.grid.cells) {\n\t\t\tc = this.board.grid.cells[i];\n\t\t\tt = new vg.Tile({\n\t\t\t\tcell: c,\n\t\t\t\tgeometry: geo,\n\t\t\t\tmaterial: mats[c.materialId],\n\t\t\t\tscale: 1\n\t\t\t});\n\n\t\t\tt.position.copy(this.board.grid.cellToPixel(c));\n\t\t\tt.position.y = c.h * this.board.tileHeightStep;\n\n\t\t\tthis.board.tiles.push(t);\n\t\t\tthis.board.tileGroup.add(t.mesh);\n\t\t}\n\t},\n\n\tmakeGenerator: function() {\n\t\tif (!this.geoGen) {\n\t\t\tswitch (this.board.grid.type) {\n\t\t\t\tcase vg.HEX:\n\t\t\t\t\tthis.geoGen = new vg.HexGeoGenerator();\n\t\t\t\t\tbreak;\n\t\t\t\tcase vg.SQR:\n\t\t\t\t\tthis.geoGen = new vg.SqrGeoGenerator();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('[GeneratedTileManager] Only hex and square grids are supported');\n\t\t\t}\n\t\t}\n\t\tthis.geoGen.init(this.board.grid.cellSize);\n\t},\n\n\tmakeOverlay: function(size, color) {\n\t\tcolor = color || 0x000000;\n\t\tvar mat = new THREE.LineBasicMaterial({\n\t\t\tcolor: color,\n\t\t\topacity: 0.3\n\t\t});\n\t\tthis.makeGenerator();\n\n\t\tif (this.overlay) {\n\t\t\tthis.board.group.remove(this.overlay);\n\t\t}\n\n\t\tthis.overlay = new THREE.Object3D();\n\n\t\tthis.geoGen.makeOverlay(this.overlay, size, mat);\n\n\t\tthis.board.group.add(this.overlay);\n\t}\n};\n","vg.HexGeoGenerator = function() {\n\tthis.tileGeo = null;\n\tthis.tileShape = null;\n\tthis.flatGeo = null;\n\tthis.shapeGeo = null;\n\tthis.vertices = null;\n\n\tthis._cel = new vg.Cell(); // used as scratch object in various operations\n\tthis._vec3 = new THREE.Vector3();\n\tthis._tileSize = -1;\n\tthis._cellWidth = 0;\n\tthis._cellLength = 0;\n};\n\nvg.HexGeoGenerator.prototype = {\n\t/*\n\t\tMake all the required geometry for constructing tiles.\n\t\tsize \t[int]\tCell size as a radius, in threejs world space.\n\t*/\n\tinit: function(size) {\n\t\tif (this.flatGeo) this.flatGeo.dispose();\n\t\tif (this.shapeGeo) this.shapeGeo.dispose();\n\t\tthis._tileSize = size || 10;\n\t\tthis._cellWidth = this._tileSize * 2;\n\t\tthis._cellLength = (vg.SQRT3 * 0.5) * this._cellWidth;\n\n\t\t// create base shape used for building geometry\n\t\tvar i, verts = [];\n\t\tvar angle, vec;\n\n\t\t// create the skeleton of the hex\n\t\tfor (i = 0; i < 6; i++) {\n\t\t\tangle = (vg.TAU / 6) * i;\n\t\t\tvec = new THREE.Vector3(this._tileSize * Math.cos(angle), 0, this._tileSize * Math.sin(angle));\n\t\t\tverts.push(vec);\n\t\t}\n\t\tthis.vertices = verts;\n\n\t\t// copy the verts into a shape for the geometry to use\n\t\tthis.tileShape = new THREE.Shape();\n\t\tthis.tileShape.moveTo(verts[0].x, verts[0].z);\n\t\tfor (i = 1; i < 6; i++) {\n\t\t\tthis.tileShape.lineTo(verts[i].x, verts[i].z);\n\t\t}\n\t\tthis.tileShape.lineTo(verts[0].x, verts[0].z);\n\t\tthis.tileShape.autoClose = true;\n\n\t\tthis.shapeGeo = new THREE.ShapeGeometry(this.tileShape);\n\t\tthis.shapeGeo.rotateX(90 * vg.DEG_TO_RAD);\n\t\tthis.shapeGeo.verticesNeedUpdate = true;\n\n\t\tthis.flatGeo = new THREE.Geometry();\n\t\tthis.flatGeo.vertices = verts;\n\t\t// this.flatGeo.rotateX(90 * vg.DEG_TO_RAD);\n\t\tthis.flatGeo.verticesNeedUpdate = true;\n\t},\n\n\tmakeTileGeo: function(config) {\n\t\tconfig = config || {};\n\t\tvar settings = {\n\t\t\tamount: 1,\n\t\t\tbevelEnabled: false,\n\t\t\tbevelSegments: 1,\n\t\t\tsteps: 1,\n\t\t\tbevelSize: 0.5,\n\t\t\tbevelThickness: 0.5\n\t\t};\n\t\tvg.util.overwrite(settings, config);\n\t\tsettings.amount = config.height || settings.amount;\n\n\t\tif (this.tileGeo) this.tileGeo.dispose();\n\t\tthis.tileGeo = new THREE.ExtrudeGeometry(this.tileShape, settings);\n\t\t// this.tileGeo.translate(0, -settings.amount, 0); // adjust verts so top poly is at y:0\n\n\t\treturn this.tileGeo;\n\t},\n\n\tmakeTilePoly: function(material) {\n\t\tif (!material) {\n\t\t\tmaterial = new THREE.MeshBasicMaterial({color: 0x24b4ff});\n\t\t}\n\t\tvar mesh = new THREE.Mesh(this.shapeGeo, material);\n\t\t// this._vec3.set(1, 0, 0);\n\t\t// mesh.rotateOnAxis(this._vec3, vg.PI/2);\n\t\treturn mesh;\n\t},\n\n\tmakeTileHighlight: function(material) {\n\t\tvar grid = require('nexus').grid;\n\t\tif (!material) {\n\t\t\tmaterial = new THREE.MeshBasicMaterial({color: 0x24b4ff});\n\t\t}\n\n\t\tvar geo = new THREE.TorusGeometry(grid.cellSize, 2, 3, 6);\n\t\tvar mesh = new THREE.Mesh(geo, material);\n\n\t\tmesh.rotateX(vg.PI/2);\n\t\tmesh.scale.x = 0.8;\n\t\tmesh.scale.y = 0.8;\n\n\t\treturn mesh;\n\t},\n\n\t/*\n\t\tMake an outlined grid that shows the shape and placement of all its cells.\n\t\tcontainerObj\t[Object3D]\tContainer to add the tile outlines to\n\t\tsize \t\t\t[int]\t\tNumber of cells to generate, as a radius (of the hex-shaped grid)\n\t\tmaterial \t\t[Material]\tthreejs material to use for the Lines\n\t*/\n\tmakeOverlay: function(containerObj, size, material) {\n\t\tvar x, y, z;\n\t\tvar geo = this.tileShape.createPointsGeometry();\n\t\tfor (x = -size; x < size+1; x++) {\n\t\t\tfor (y = -size; y < size+1; y++) {\n\t\t\t\tz = -x-y;\n\t\t\t\tif (Math.abs(x) <= size && Math.abs(y) <= size && Math.abs(z) <= size) {\n\t\t\t\t\tthis._cel.set(x, y, z); // define the cell\n\t\t\t\t\tvar line = new THREE.Line(geo, material);\n\t\t\t\t\tline.position.copy(this._cellToPixel(this._cel));\n\t\t\t\t\tline.position.y = 0;\n\t\t\t\t\tline.rotation.x = 90 * vg.DEG_TO_RAD;\n\t\t\t\t\tcontainerObj.add(line);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/*var tally = 0;\n\t\tfor (x = 0; x < containerObj.children.length; x++) {\n\t\t\ttally += containerObj.children[x].geometry.vertices.length;\n\t\t}\n\t\tconsole.log('verts: '+tally);*/\n\t},\n\n\tdispose: function() {\n\t\tif (this.tileGeo) this.tileGeo.dispose();\n\t\tif (this.flatGeo) this.flatGeo.dispose();\n\t\tif (this.shapeGeo) this.shapeGeo.dispose();\n\t},\n\n\t_cellToPixel: function(cell) {\n\t\tthis._vec3.x = cell.q * this._cellWidth * 0.75;\n\t\tthis._vec3.y = cell.h;\n\t\tthis._vec3.z = -((cell.s - cell.r) * this._cellLength * 0.5);\n\t\treturn this._vec3;\n\t},\n};\n","/*\n\tSets up and manages a THREEjs container, camera, and light, making it easy to get going.\n\tAlso provides camera control.\n\n\tAssumes full screen.\n */\n// 'utils/Tools'\nvg.Scene = function(sceneConfig, controlConfig) {\n\tvar sceneSettings = {\n\t\telement: document.body,\n\t\talpha: true,\n\t\tantialias: true,\n\t\tclearColor: '#fff',\n\t\tsortObjects: false,\n\t\tfog: null,\n\t\tlight: null,\n\t\tlightPosition: null,\n\t\tcameraType: 'PerspectiveCamera',\n\t\tcameraPosition: null, // {x, y, z}\n\t\torthoZoom: 4\n\t};\n\n\tvar controlSettings = {\n\t\tminDistance: 100,\n\t\tmaxDistance: 1000,\n\t\tzoomSpeed: 2,\n\t\tnoZoom: false\n\t};\n\n\tsceneSettings = vg.util.merge(sceneSettings, sceneConfig);\n\tif (typeof controlConfig !== 'boolean') {\n\t\tcontrolSettings = vg.util.merge(controlSettings, controlConfig);\n\t}\n\n\tthis.renderer = new THREE.WebGLRenderer({\n\t\talpha: sceneSettings.alpha,\n\t\tantialias: sceneSettings.antialias\n\t});\n\tthis.renderer.setClearColor(sceneSettings.clearColor, 0);\n\tthis.renderer.sortObjects = sceneSettings.sortObjects;\n\n\tthis.width = window.innerWidth;\n\tthis.height = window.innerHeight;\n\n\tthis.orthoZoom = sceneSettings.orthoZoom;\n\n\tthis.container = new THREE.Scene();\n\tthis.container.fog = sceneSettings.fog;\n\n\tif (!sceneSettings.light) {\n\t\tsceneSettings.light = new THREE.DirectionalLight(0xdddddd);\n\t\tthis.container.add(new THREE.AmbientLight(0xdddddd));\n\t}\n\tif (!sceneSettings.lightPosition) {\n\t\tsceneSettings.light.position.set(-1, 1, -1).normalize();\n\t}\n\tthis.container.add(sceneSettings.light);\n\n\tif (sceneSettings.cameraType === 'OrthographicCamera') {\n\t\tvar width = window.innerWidth / this.orthoZoom;\n\t\tvar height = window.innerHeight / this.orthoZoom;\n\t\tthis.camera = new THREE.OrthographicCamera(width / -2, width / 2, height / 2, height / -2, 1, 5000);\n\t}\n\telse {\n\t\tthis.camera = new THREE.PerspectiveCamera(50, this.width / this.height, 1, 5000);\n\t}\n\n\tthis.contolled = !!controlConfig;\n\tif (this.contolled) {\n\t\tthis.controls = new THREE.OrbitControls(this.camera, this.renderer.domElement);\n\t\tvg.util.overwrite(this.controls, controlSettings);\n\t}\n\n\tif (sceneSettings.cameraPosition) {\n\t\tthis.camera.position.copy(sceneSettings.cameraPosition);\n\t}\n\n\twindow.addEventListener('resize', function onWindowResize() {\n\t\tthis.width = window.innerWidth;\n\t\tthis.height = window.innerHeight;\n\t\tif (this.camera.type === 'OrthographicCamera') {\n\t\t\tvar width = this.width / this.orthoZoom;\n\t\t\tvar height = this.height / this.orthoZoom;\n\t\t\tthis.camera.left = width / -2;\n\t\t\tthis.camera.right = width / 2;\n\t\t\tthis.camera.top = height / 2;\n\t\t\tthis.camera.bottom = height / -2;\n\t\t}\n\t\telse {\n\t\t\tthis.camera.aspect = this.width / this.height;\n\t\t}\n\t\tthis.camera.updateProjectionMatrix();\n\t\tthis.renderer.setSize(this.width, this.height);\n\t}.bind(this), false);\n\n\tthis.attachTo(sceneSettings.element);\n};\n\nvg.Scene.prototype = {\n\tconstructor: vg.Scene,\n\n\tattachTo: function(element) {\n\t\telement.style.width = this.width + 'px';\n\t\telement.style.height = this.height + 'px';\n\t\tthis.renderer.setPixelRatio(window.devicePixelRatio);\n\t\tthis.renderer.setSize(this.width, this.height);\n\t\telement.appendChild(this.renderer.domElement);\n\t},\n\n\tadd: function(mesh) {\n\t\tthis.container.add(mesh);\n\t},\n\n\tremove: function(mesh) {\n\t\tthis.container.remove(mesh);\n\t},\n\n\trender: function() {\n\t\tif (this.contolled) this.controls.update();\n\t\tthis.renderer.render(this.container, this.camera);\n\t},\n\n\tupdateOrthoZoom: function() {\n\t\tif (this.orthoZoom <= 0) {\n\t\t\tthis.orthoZoom = 0;\n\t\t\treturn;\n\t\t}\n\t\tvar width = this.width / this.orthoZoom;\n\t\tvar height = this.height / this.orthoZoom;\n\t\tthis.camera.left = width / -2;\n\t\tthis.camera.right = width / 2;\n\t\tthis.camera.top = height / 2;\n\t\tthis.camera.bottom = height / -2;\n\t\tthis.camera.updateProjectionMatrix();\n\t},\n\n\tfocusOn: function(obj) {\n\t\tthis.camera.lookAt(obj.position);\n\t}\n};\n","vg.SelectionManager = function(mouse) {\n\tthis.mouse = mouse;\n\n\tthis.onSelect = new vg.Signal();\n\tthis.onDeselect = new vg.Signal();\n\n\tthis.selected = null;\n\t// deselect if player clicked on the same thing twice\n\tthis.toggleSelection = false;\n\n\t// allow multiple entities to be selected at once\n\t// this.multiselect = false; // todo\n\t// this.allSelected = new LinkedList();\n\n\tthis.mouse.signal.add(this.onMouse, this);\n};\n\nvg.SelectionManager.prototype = {\n\tselect: function(obj, fireSignal) {\n\t\tif (!obj) return;\n\t\tfireSignal = fireSignal || true;\n\n\t\tif (this.selected !== obj) {\n\t\t\t// deselect previous object\n\t\t\tthis.clearSelection(fireSignal);\n\t\t}\n\t\tif (obj.selected) {\n\t\t\tif (this.toggleSelection) {\n\t\t\t\tif (fireSignal) {\n\t\t\t\t\tthis.onDeselect.dispatch(obj);\n\t\t\t\t}\n\t\t\t\tobj.deselect();\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tobj.select();\n\t\t}\n\n\t\tthis.selected = obj;\n\t\tif (fireSignal) {\n\t\t\tthis.onSelect.dispatch(obj);\n\t\t}\n\t},\n\n\tclearSelection: function(fireSignal) {\n\t\tfireSignal = fireSignal || true;\n\t\tif (this.selected) {\n\t\t\tif (fireSignal) {\n\t\t\t\tthis.onDeselect.dispatch(this.selected);\n\t\t\t}\n\t\t\tthis.selected.deselect();\n\t\t}\n\t\tthis.selected = null;\n\t},\n\n\tonMouse: function(type, obj) {\n\t\tswitch (type) {\n\t\t\tcase vg.MouseCaster.DOWN:\n\t\t\t\tif (!obj) {\n\t\t\t\t\tthis.clearSelection();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase vg.MouseCaster.CLICK:\n\t\t\t\tthis.select(obj);\n\t\t\t\tbreak;\n\t\t}\n\t}\n};\n\nvg.SelectionManager.prototype.constructor = vg.SelectionManager;\n","vg.SqrGeoGenerator = function() {\n\tthis.tileGeo = null;\n\tthis.tileShape = null;\n\tthis.flatGeo = null;\n\tthis.shapeGeo = null;\n\tthis.vertices = null;\n\n\tthis._cel = new vg.Cell(); // used as scratch object in various operations\n\tthis._vec3 = new THREE.Vector3();\n\tthis._tileSize = -1;\n\tthis._cellWidth = 0;\n\tthis._cellLength = 0;\n};\n\nvg.SqrGeoGenerator.prototype = {\n\t/*\n\t\tMake all the required geometry for constructing tiles.\n\t\tsize \t[int]\tCell size as a radius, in threejs world space.\n\t*/\n\tinit: function(size) {\n\t\tif (this.flatGeo) this.flatGeo.dispose();\n\t\tif (this.shapeGeo) this.shapeGeo.dispose();\n\t\tif (size === this._tileSize) return; // already generated necessary geo\n\t\tthis._tileSize = size || 10;\n\t\tthis._cellWidth = this._tileSize * 2;\n\t\tthis._cellLength = this._cellWidth;\n\n\t\t// create base shape used for building geometry\n\t\tvar i, verts = [];\n\n\t\t// create the skeleton of the square\n\t\tverts.push(new THREE.Vector3(0, 0, 0));\n\t\tverts.push(new THREE.Vector3(this._tileSize, 0, 0));\n\t\tverts.push(new THREE.Vector3(this._tileSize, 0, this._tileSize));\n\t\tverts.push(new THREE.Vector3(0, 0, this._tileSize));\n\t\tthis.vertices = verts;\n\n\t\t// copy the verts into a shape for the geometry to use\n\t\tthis.tileShape = new THREE.Shape();\n\t\tthis.tileShape.moveTo(verts[0].x, verts[0].z);\n\t\tfor (i = 1; i < 4; i++) {\n\t\t\tthis.tileShape.lineTo(verts[i].x, verts[i].z);\n\t\t}\n\t\tthis.tileShape.lineTo(verts[0].x, verts[0].z);\n\t\tthis.tileShape.autoClose = true;\n\n\t\tthis.shapeGeo = new THREE.ShapeGeometry(this.tileShape);\n\t\tthis.shapeGeo.rotateX(90 * vg.DEG_TO_RAD);\n\t\tthis.shapeGeo.verticesNeedUpdate = true;\n\n\t\tthis.flatGeo = new THREE.Geometry();\n\t\tthis.flatGeo.vertices = verts;\n\t\t// this.flatGeo.rotateX(90 * vg.DEG_TO_RAD);\n\t\tthis.flatGeo.verticesNeedUpdate = true;\n\t},\n\n\tmakeTileGeo: function(config) {\n\t\tconfig = config || {};\n\t\tvar settings = {\n\t\t\tamount: 1,\n\t\t\tbevelEnabled: false,\n\t\t\tbevelSegments: 1,\n\t\t\tsteps: 1,\n\t\t\tbevelSize: 0.5,\n\t\t\tbevelThickness: 0.5\n\t\t};\n\t\tvg.util.overwrite(settings, config);\n\t\tsettings.amount = config.height || settings.amount;\n\n\t\tif (this.tileGeo) this.tileGeo.dispose();\n\t\tthis.tileGeo = new THREE.ExtrudeGeometry(this.tileShape, settings);\n\t\t// this.tileGeo.translate(0, -settings.amount, 0); // adjust verts so top poly is at y:0\n\n\t\treturn this.tileGeo;\n\t},\n\n\tmakeTilePoly: function(material) {\n\t\tif (!material) {\n\t\t\tmaterial = new THREE.MeshBasicMaterial({color: 0x24b4ff});\n\t\t}\n\t\tvar mesh = new THREE.Mesh(this.shapeGeo, material);\n\t\t// this._vec3.set(1, 0, 0);\n\t\t// mesh.rotateOnAxis(this._vec3, vg.PI/2);\n\t\treturn mesh;\n\t},\n\n\tmakeTileHighlight: function(material) {\n\t\tvar grid = require('nexus').grid;\n\t\tif (!material) {\n\t\t\tmaterial = new THREE.MeshBasicMaterial({color: 0x24b4ff});\n\t\t}\n\n\t\tvar geo = new THREE.TorusGeometry(grid.cellSize, 2, 3, 4);\n\t\tvar mesh = new THREE.Mesh(geo, material);\n\n\t\tmesh.rotateX(vg.PI/2);\n\t\tmesh.scale.x = 0.8;\n\t\tmesh.scale.y = 0.8;\n\n\t\treturn mesh;\n\t},\n\n\t/*\n\t\tMake an outlined grid that shows the shape and placement of all its cells.\n\t\tcontainerObj\t[Object3D]\tContainer to add the tile outlines to\n\t\tsize \t\t\t[int]\t\tNumber of cells to generate, as a radius (of the hex-shaped grid)\n\t\tmaterial \t\t[Material]\tthreejs material to use for the Lines\n\t*/\n\tmakeOverlay: function(containerObj, size, material) {\n\t\tvar x, y, z;\n\t\tvar geo = this.tileShape.createPointsGeometry();\n\t\tfor (x = -size; x < size+1; x++) {\n\t\t\tfor (y = -size; y < size+1; y++) {\n\t\t\t\tz = -x-y;\n\t\t\t\tif (Math.abs(x) <= size && Math.abs(y) <= size && Math.abs(z) <= size) {\n\t\t\t\t\tthis._cel.set(x, y, z); // define the cell\n\t\t\t\t\tvar line = new THREE.Line(geo, material);\n\t\t\t\t\tline.position.copy(this._cellToPixel(this._cel));\n\t\t\t\t\tline.position.y = 0;\n\t\t\t\t\tline.rotation.x = 90 * vg.DEG_TO_RAD;\n\t\t\t\t\tcontainerObj.add(line);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/*var tally = 0;\n\t\tfor (x = 0; x < containerObj.children.length; x++) {\n\t\t\ttally += containerObj.children[x].geometry.vertices.length;\n\t\t}\n\t\tconsole.log('verts: '+tally);*/\n\t},\n\n\tdispose: function() {\n\t\tif (this.tileGeo) this.tileGeo.dispose();\n\t\tif (this.flatGeo) this.flatGeo.dispose();\n\t\tif (this.shapeGeo) this.shapeGeo.dispose();\n\t},\n\n\t_cellToPixel: function(cell) {\n\t\tthis._vec3.x = cell.q * this._fullCellSize;\n\t\tthis._vec3.y = cell.h;\n\t\tthis._vec3.z = cell.r * this._fullCellSize;\n\t\treturn this._vec3;\n\t},\n};\n","/*\n\tExample tile class that constructs its geometry for rendering and holds some gameplay properties.\n\n\t@author Corey Birnbaum https://github.com/vonWolfehaus/\n*/\nvg.Tile = function(config) {\n\tconfig = config || {};\n\tvar settings = {\n\t\tscale: 1,\n\t\tcell: null, // required vg.Cell\n\t\tgeometry: null, // required threejs geometry\n\t\tmaterial: null // not required but it would improve performance significantly\n\t};\n\tsettings = vg.util.merge(settings, config);\n\n\tif (!settings.cell || !settings.geometry) {\n\t\tthrow new Error('Missing vg.Tile configuration');\n\t}\n\n\tif (settings.cell.tile) {\n\t\t// remove whatever was there\n\t\tsettings.cell.tile.dispose();\n\t}\n\n\tthis.cell = settings.cell;\n\tthis.cell.tile = this;\n\n\tthis.uniqueID = vg.util.generateID();\n\n\tthis.geometry = settings.geometry;\n\tthis.material = settings.material;\n\tif (!this.material) {\n\t\tthis.material = new THREE.MeshPhongMaterial({\n\t\t\tcolor: vg.util.randomizeRGB('30, 30, 30', 13)\n\t\t});\n\t}\n\n\tthis.objectType = vg.TILE;\n\tthis.entity = null;\n\tthis.userData = {};\n\n\tthis.selected = false;\n\tthis.highlight = '0x0084cc';\n\n\tthis.mesh = new THREE.Mesh(this.geometry, this.material);\n\tthis.mesh.userData.structure = this;\n\n\t// create references so we can control orientation through this (Tile), instead of drilling down\n\tthis.position = this.mesh.position;\n\tthis.rotation = this.mesh.rotation;\n\n\t// rotate it to face \"up\" (the threejs coordinate space is Y+)\n\tthis.rotation.x = 90 * vg.DEG_TO_RAD;\n\tthis.mesh.scale.set(settings.scale, settings.scale, 1);\n\n\tif (this.material.emissive) {\n\t\tthis._emissive = this.material.emissive.getHex();\n\t}\n\telse {\n\t\tthis._emissive = null;\n\t}\n};\n\nvg.Tile.prototype = {\n\tselect: function() {\n\t\tif (this.material.emissive) {\n\t\t\tthis.material.emissive.setHex(this.highlight);\n\t\t}\n\t\tthis.selected = true;\n\t\treturn this;\n\t},\n\n\tdeselect: function() {\n\t\tif (this._emissive !== null && this.material.emissive) {\n\t\t\tthis.material.emissive.setHex(this._emissive);\n\t\t}\n\t\tthis.selected = false;\n\t\treturn this;\n\t},\n\n\ttoggle: function() {\n\t\tif (this.selected) {\n\t\t\tthis.deselect();\n\t\t}\n\t\telse {\n\t\t\tthis.select();\n\t\t}\n\t\treturn this;\n\t},\n\n\tdispose: function() {\n\t\tif (this.cell && this.cell.tile) this.cell.tile = null;\n\t\tthis.cell = null;\n\t\tthis.position = null;\n\t\tthis.rotation = null;\n\t\tif (this.mesh.parent) this.mesh.parent.remove(this.mesh);\n\t\tthis.mesh.userData.structure = null;\n\t\tthis.mesh = null;\n\t\tthis.material = null;\n\t\tthis.userData = null;\n\t\tthis.entity = null;\n\t\tthis.geometry = null;\n\t\tthis._emissive = null;\n\t}\n};\n\nvg.Tile.prototype.constructor = vg.Tile;\n","/*\n\n\n\t@author Corey Birnbaum https://github.com/vonWolfehaus/\n*/\nvg.TilesetManager = function(board) {\n\tthis.board = board;\n\tthis.manager = new THREE.LoadingManager(this._loaderComplete.bind(this), this._loaderProgress, this._loaderError);\n\tthis.imgLoader = new THREE.TextureLoader(this.manager);\n\tthis.geoLoader = new THREE.BufferGeometryLoader(this.manager);\n\n\tthis.tileGeo = null;\n\tthis.tilesetBasePath = null;\n\tthis.tilesetMaterials = null;\n\tthis.tilesetTextures = null;\n\tthis.onComplete = null;\n\tthis.onCompleteScope = null;\n};\n\nvg.TilesetManager.prototype = {\n\t/*\n\t\tLoads and creates materials, geometry, and vg.Tiles to give 3D form to the current grid.\n\n\t\tmap = {\n\t\t\ttileGeoPath: [String] // full path eg 'path/to/geo/hexTile.json'\n\t\t\ttilesetBasePath: [String] // eg 'path/to/materials/'\n\t\t\tmaterials: [\n\t\t\t\t{\n\t\t\t\t\tid: 0, // array index\n\t\t\t\t\tmap: [String] // required; all maps are filenames\n\t\t\t\t\tnormalMap\n\t\t\t\t\temissiveMap\n\t\t\t\t\tspecularMap\n\t\t\t\t\talphaMap\n\t\t\t\t\tshininess: [Number], // default is 0\n\t\t\t\t\tspecular: [Hex or String], // default is 0x111111\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 1, ...\n\t\t\t\t},\n\t\t\t\t...\n\t\t\t]\n\t\t}\n\t*/\n\tload: function(map, hollaback, hollascope) {\n\t\tthis.onComplete = hollaback;\n\t\tthis.onCompleteScope = hollascope;\n\t\tthis.tilesetBasePath = map.tilesetBasePath;\n\t\t// load in new geo and materials, then manager.onComplete will fire to build new ones\n\t\tthis.loadMaterials(map.materials);\n\t\t// start loading the BufferGeometry json\n\t\tthis.geoLoader.load(map.tileGeoPath, function(geo) {\n\t\t\tthis.tileGeo = geo;\n\t\t}.bind(this));\n\t},\n\n\t/*\n\t\tLoad all of the textures in the array of materials (one material == one tile type)\n\t*/\n\tloadMaterials: function(matSources) {\n\t\tvar m, i;\n\t\tthis.tilesetTextures = [];\n\n\t\tfor (i = 0; i < matSources.length; i++) {\n\t\t\tm = matSources[i];\n\t\t\tthis.tilesetTextures[m.id] = {};\n\t\t\tthis._loadTextures(m);\n\t\t}\n\t},\n\n\tmakeTiles: function() {\n\t\tvar grid = this.board.grid;\n\t\tvar i, c, t;\n\n\t\tfor (i in grid.cells) {\n\t\t\tc = grid.cells[i];\n\t\t\tt = new vg.Tile({\n\t\t\t\tcell: c,\n\t\t\t\tgeometry: this.tileGeo,\n\t\t\t\tmaterial: this.tilesetMaterials[c.materialId]\n\t\t\t});\n\n\t\t\tt.position.copy(grid.cellToPixel(c));\n\t\t\tt.position.y = c.h * this.board.tileHeightStep;\n\n\t\t\tthis.board.tiles.push(t);\n\t\t\tthis.board.tileGroup.add(t.mesh);\n\t\t}\n\t},\n\n\t/*\n\t\tEssentially clear cache so we can load in a different tileset.\n\t\tDoes NOT remove/dispose the meshes, materials, or geometry - use board.reset() for that\n\t*/\n\treset: function() {\n\t\tthis.tileGeo = null;\n\t\tthis.tilesetMaterials = null;\n\t\tthis.tilesetTextures = null;\n\t},\n\n\t_loaderComplete: function() {\n\t\tvar i, textures;\n\n\t\tthis.tilesetMaterials = [];\n\n\t\tfor (i = 0; i < this.tilesetTextures.length; i++) {\n\t\t\ttextures = this.tilesetTextures[i];\n\t\t\tthis.tilesetMaterials[i] = new THREE.MeshPhongMaterial({\n\t\t\t\tmap: textures.map,\n\t\t\t\tnormalMap: textures.normalMap || null,\n\t\t\t\temissiveMap: textures.emissiveMap || null,\n\t\t\t\tspecularMap: textures.specularMap || null,\n\t\t\t\talphaMap: textures.alphaMap || null,\n\t\t\t\tshininess: textures.shininess || 0,\n\t\t\t\tspecular: textures.specular ? new THREE.Color(textures.specular) : null,\n\t\t\t});\n\t\t}\n\n\t\tif (this.onComplete) this.onComplete.call(this.onCompleteScope || null);\n\t},\n\n\t_loaderProgress: function(xhr) {\n\t\tif (xhr.lengthComputable) {\n\t\t\tvar percentComplete = xhr.loaded / xhr.total * 100;\n\t\t\tconsole.log(Math.round(percentComplete, 2) + '% downloaded');\n\t\t}\n\t},\n\n\t_loaderError: function(xhr) {\n\t\tconsole.warn('[TilesetManager] ' + xhr.statusText);\n\t},\n\n\t_loadTextures: function(m) {\n\t\tvar self = this;\n\t\tthis.imgLoader.load(this.tilesetBasePath+m.map, function(texture) {\n\t\t\tself.tilesetTextures[m.id].map = texture;\n\t\t});\n\n\t\tif (m.normalMap) {\n\t\t\tthis.imgLoader.load(this.tilesetBasePath+m.normalMap, function(texture) {\n\t\t\t\tself.tilesetTextures[m.id].normalMap = texture;\n\t\t\t});\n\t\t}\n\t\tif (m.emissiveMap) {\n\t\t\tthis.imgLoader.load(this.tilesetBasePath+m.emissiveMap, function(texture) {\n\t\t\t\tself.tilesetTextures[m.id].emissiveMap = texture;\n\t\t\t});\n\t\t}\n\t\tif (m.specularMap) {\n\t\t\tthis.imgLoader.load(this.tilesetBasePath+m.specularMap, function(texture) {\n\t\t\t\tself.tilesetTextures[m.id].specularMap = texture;\n\t\t\t});\n\t\t}\n\t\tif (m.alphaMap) {\n\t\t\tthis.imgLoader.load(this.tilesetBasePath+m.alphaMap, function(texture) {\n\t\t\t\tself.tilesetTextures[m.id].alphaMap = texture;\n\t\t\t});\n\t\t}\n\t}\n};\n"],"sourceRoot":"/source/"}